.TH std::experimental::shared_ptr 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::shared_ptr \- std::experimental::shared_ptr

.SH Synopsis

  Defined in header <experimental/memory>
  template< class T > class shared_ptr;    (library fundamentals TS)

  std::experimental::shared_ptr is a modified version of std::shared_ptr that adds support for arrays.

.SH Member types


  Member type  Definition
  element_type std::remove_extent_t<T>


.SH Member functions


                constructs new shared_ptr
  constructor   \fI(public member function)\fP

.SH Observers

                returns the stored pointer
  get           \fI(public member function)\fP
                dereferences the stored pointer
  operator*     \fI(public member function)\fP
  operator->
                provides index access to the array
  operator[]    \fI(public member function)\fP


.SH Non-member functions



  static_pointer_cast      applies static_cast, dynamic_cast, const_cast, or reinterpret_cast to the stored pointer
  dynamic_pointer_cast     \fI(function template)\fP
  const_pointer_cast
  reinterpret_pointer_cast


.SH Helper classes


                                           hash support for std::experimental::shared_ptr
  std::hash<std::experimental::shared_ptr> \fI(class template specialization)\fP



  Members and non-members identical to std::shared_ptr


.SH Member functions

  The following member functions work with std::experimental::shared_ptr instead of std::shared_ptr and std::experimental::weak_ptr instead of std::weak_ptr. The behavior is otherwise identical.

                destructs the owned object if no more shared_ptrs link to it
  destructor    \fI(public member function of std::shared_ptr<T>)\fP
                assigns the shared_ptr
  operator=     \fI(public member function of std::shared_ptr<T>)\fP

.SH Modifiers

                replaces the managed object
  reset         \fI(public member function of std::shared_ptr<T>)\fP
                swaps the managed objects
  swap          \fI(public member function of std::shared_ptr<T>)\fP

.SH Observers

                returns the number of shared_ptr objects referring to the same managed object
  use_count     \fI(public member function of std::shared_ptr<T>)\fP

  unique        checks whether the managed object is managed only by the current shared_ptr instance
                \fI(public member function of std::shared_ptr<T>)\fP
  \fI(until C++20)\fP
                checks if the stored pointer is not null
  operator_bool \fI(public member function of std::shared_ptr<T>)\fP
                provides owner-based ordering of shared pointers
  owner_before  \fI(public member function of std::shared_ptr<T>)\fP


.SH Non-member functions

  These non-member functions are declared in the std::experimental namespace, and work with std::experimental::shared_ptr rather than std::shared_ptr, but otherwise behaves identically to the corresponding C++14 function.


  make_shared
  make_shared_default_init     creates a shared pointer that manages a new object
                               \fI(function template)\fP

  (C++20)

  allocate_shared
  allocate_shared_default_init creates a shared pointer that manages a new object allocated using an allocator
                               \fI(function template)\fP

  (C++20)
                               returns the deleter of specified type, if owned
  get_deleter                  \fI(function template)\fP

  operator==
  operator!=                   compares with another shared_ptr or with nullptr
  operator<                    \fI(function template)\fP
  operator<=
  operator>
  operator>=
                               outputs the value of the stored pointer to an output stream
  operator<<                   \fI(function template)\fP

  std::swap(std::shared_ptr)   specializes the std::swap algorithm
                               \fI(function template)\fP
  \fI(C++11)\fP



  std::atomic_is_lock_free(std::shared_ptr)
  std::atomic_load(std::shared_ptr)
  std::atomic_load_explicit(std::shared_ptr)
  std::atomic_store(std::shared_ptr)
  std::atomic_store_explicit(std::shared_ptr)
  std::atomic_exchange(std::shared_ptr)                         specializes atomic operations for std::shared_ptr
  std::atomic_exchange_explicit(std::shared_ptr)                \fI(function template)\fP
  std::atomic_compare_exchange_weak(std::shared_ptr)
  std::atomic_compare_exchange_strong(std::shared_ptr)
  std::atomic_compare_exchange_weak_explicit(std::shared_ptr)
  std::atomic_compare_exchange_strong_explicit(std::shared_ptr)

  (deprecated in C++20)


  Helper class templates

  These class templates are declared in the std::experimental namespace, and work with std::experimental::shared_ptr and std::experimental::weak_ptr rather than std::shared_ptr and std::weak_ptr, but otherwise behaves identically to the corresponding C++14 class template.


  owner_less              provides mixed-type owner-based ordering of shared and weak pointers
                          \fI(class template)\fP
  \fI(C++11)\fP

  enable_shared_from_this allows an object to create a shared_ptr referring to itself
                          \fI(class template)\fP
  \fI(C++11)\fP


.SH Example


   This section is incomplete
   Reason: no example




