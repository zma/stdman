.TH std::set<Key,Compare,Allocator>::set 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::set<Key,Compare,Allocator>::set \- std::set<Key,Compare,Allocator>::set

.SH Synopsis

  set();
  explicit set( const Compare& comp,
  const Allocator& alloc = Allocator() );
  explicit set( const Allocator& alloc );                               \fB(1)\fP \fI(since C++11)\fP
  template< class InputIt >
  set( InputIt first, InputIt last,
  const Compare& comp = Compare(),
  const Allocator& alloc = Allocator() );
  template< class InputIt >
  set( InputIt first, InputIt last, const Allocator& alloc)                               \fI(since C++14)\fP
  : set(first, last, Compare(), alloc) {}
  set( const set& other );                                              \fB(2)\fP \fB(3)\fP
  set( const set& other, const Allocator& alloc );                          \fB(3)\fP           \fI(since C++11)\fP
  set( set&& other );                                                       \fB(4)\fP           \fI(since C++11)\fP
  set( set&& other, const Allocator& alloc );                               \fB(4)\fP           \fI(since C++11)\fP
  set( std::initializer_list<value_type> init,
  const Compare& comp = Compare(),                                                                      \fI(since C++11)\fP
  const Allocator& alloc = Allocator() );                                   \fB(5)\fP
  set( std::initializer_list<value_type> init, const Allocator& alloc )                                 \fI(since C++14)\fP
  : set(init, Compare(), alloc) {}

  Constructs new container from a variety of data sources and optionally using user supplied allocator alloc or comparison function object comp.
  1) Default_constructor. Constructs empty container.
  2) Range constructor. Constructs the container with the contents of the range [first, last). If multiple elements in the range have keys that compare equivalent, it is unspecified which element is inserted (pending LWG2844).
  3) Copy_constructor. Constructs the container with the copy of the contents of other. If alloc is not provided, allocator is obtained by calling std::allocator_traits<allocator_type>::select_on_container_copy_construction(other.get_allocator()).
  4) Move_constructor. Constructs the container with the contents of other using move semantics. If alloc is not provided, allocator is obtained by move-construction from the allocator belonging to other.
  5) Initializer-list_constructor. Constructs the container with the contents of the initializer list init. If multiple elements in the range have keys that compare equivalent, it is unspecified which element is inserted (pending LWG2844).

.SH Parameters


  alloc       - allocator to use for all memory allocations of this container
  comp        - comparison function object to use for all comparisons of keys
  first, last - the range to copy the elements from
  other       - another container to be used as source to initialize the elements of the container with
  init        - initializer list to initialize the elements of the container with
.SH Type requirements
  -
  InputIt must meet the requirements of LegacyInputIterator.
  -
  Compare must meet the requirements of Compare.
  -
  Allocator must meet the requirements of Allocator.


.SH Complexity

  1) Constant
  2) N log(N) where N = std::distance(first, last) in general, linear in N if the range is already sorted by value_comp().
  3) Linear in size of other
  4) Constant. If alloc is given and alloc != other.get_allocator(), then linear.
  5) N log(N) where N = init.size()) in general, linear in N if init is already sorted by value_comp().

.SH Exceptions

  Calls to Allocator::allocate may throw.

.SH Notes

  After container move construction (overload \fB(4)\fP), references, pointers, and iterators (other than the end iterator) to other remain valid, but refer to elements that are now in *this. The current standard makes this guarantee via the blanket statement in ยง23.2.1[container.requirements.general]/12, and a more direct guarantee is under consideration via LWG_2321.

.SH Example

  
// Run this code

    #include <iostream>
    #include <string>
    #include <set>
    #include <cmath>

    struct Point { double x, y; };
    struct PointCmp {
        bool operator()(const Point& lhs, const Point& rhs) const {
            return std::hypot(lhs.x, lhs.y) < std::hypot(rhs.x, rhs.y);
        }
    };

    int main()
    {
      // (1) Default constructor
      std::set<std::string> a;
      a.insert("cat");
      a.insert("dog");
      a.insert("horse");
      for(auto& str: a) std::cout << str << ' ';
      std::cout << '\\n';

      // (2) Iterator constructor
      std::set<std::string> b(a.find("dog"), a.end());
      for(auto& str: b) std::cout << str << ' ';
      std::cout << '\\n';

      // (3) Copy constructor
      std::set<std::string> c(a);
      c.insert("another horse");
      for(auto& str: c) std::cout << str << ' ';
      std::cout << '\\n';

      // (4) Move constructor
      std::set<std::string> d(std::move(a));
      for(auto& str: d) std::cout << str << ' ';
      std::cout << '\\n';
      std::cout << "moved-from set is ";
      for(auto& str: a) std::cout << str << ' ';
      std::cout << '\\n';

      // (5) Initializer list constructor
      std::set<std::string> e {"one", "two", "three", "five", "eight"};
      for(auto& str: e) std::cout << str << ' ';
      std::cout << '\\n';

      // custom comparison
      std::set<Point, PointCmp> z = {{2, 5}, {3, 4}, {1, 1}};
      z.insert({1, -1}); // this fails because the magnitude of 1,-1 equals 1,1
      for(auto& p: z) std::cout << '(' << p.x << ',' << p.y << ") ";
      std::cout << '\\n';
    }

.SH Output:

    cat dog horse
    dog horse
    another horse cat dog horse
    cat dog horse
    moved-from set is
    eight five one three two
    (1,1) (3,4) (2,5)


  Defect reports

  The following behavior-changing defect reports were applied retroactively to previously published C++ standards.

  DR       Applied to Behavior as published               Correct behavior
  LWG_2193 C++11      the default constructor is explicit made non-explicit


.SH See also


            assigns values to the container
  operator= \fI(public member function)\fP




