.TH std::basic_string<CharT,Traits,Allocator>::clear 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string<CharT,Traits,Allocator>::clear \- std::basic_string<CharT,Traits,Allocator>::clear

.SH Synopsis

  void clear();           \fI(until C++11)\fP
  void clear() noexcept;  \fI(since C++11)\fP

  Removes all characters from the string as if by executing erase(begin(), end()).
  All pointers, references, and iterators are invalidated.

.SH Parameters

  \fI(none)\fP

.SH Return value

  \fI(none)\fP

.SH Notes

  Unlike for std::vector::clear, the C++ standard does not explicitly require that capacity is unchanged by this function, but existing implementations do not change capacity. This means that they do not release the allocated memory (see also shrink_to_fit).

.SH Complexity

  Linear in the size of the string, although existing implementations operate in constant time.

.SH Example

  
// Run this code

    #include <cassert>
    #include <string>

    int main()
    {
        std::string s{ "Exemplar" };
        std::string::size_type const capacity = s.capacity();

        s.clear();
        assert(s.capacity() == capacity);
        assert(s.empty());
        assert(s.size() == 0);
    }



.SH See also


        removes characters
  erase \fI(public member function)\fP




