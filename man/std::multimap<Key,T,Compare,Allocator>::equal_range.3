.TH std::multimap<Key,T,Compare,Allocator>::equal_range 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::multimap<Key,T,Compare,Allocator>::equal_range \- std::multimap<Key,T,Compare,Allocator>::equal_range

.SH Synopsis

  std::pair<iterator,iterator> equal_range( const Key& key );                   \fB(1)\fP
  std::pair<const_iterator,const_iterator> equal_range( const Key& key ) const; \fB(2)\fP
  template< class K >                                                           \fB(3)\fP \fI(since C++14)\fP
  std::pair<iterator,iterator> equal_range( const K& x );
  template< class K >                                                           \fB(4)\fP \fI(since C++14)\fP
  std::pair<const_iterator,const_iterator> equal_range( const K& x ) const;

  Returns a range containing all elements with the given key in the container. The range is defined by two iterators, one pointing to the first element that is not less than key and another pointing to the first element greater than key. Alternatively, the first iterator may be obtained with lower_bound(), and the second with upper_bound().
  1,2) Compares the keys to key.
  3,4) Compares the keys to the value x. This overload only participates in overload resolution if the qualified-id Compare::is_transparent is valid and denotes a type. They allow calling this function without constructing an instance of Key.

   This section is incomplete
   Reason: explain better


.SH Parameters


  key - key value to compare the elements to
  x   - alternative value that can be compared to Key


.SH Return value

  std::pair containing a pair of iterators defining the wanted range: the first pointing to the first element that is not less than key and the second pointing to the first element greater than key.
  If there are no elements not less than key, past-the-end (see end()) iterator is returned as the first element. Similarly if there are no elements greater than key, past-the-end iterator is returned as the second element.

  Since emplace and unhinted insert always insert at the upper bound, the order of equivalent elements in the equal range is the order of insertion unless hinted insert or emplace_hint was used to insert an element at a different position. \fI(since C++11)\fP


.SH Complexity

  Logarithmic in the size of the container.

.SH Example

  
// Run this code

    #include <iostream>
    #include <map>

    int main()
    {
        std::multimap<int, char> dict {
            {1, 'A'},
            {2, 'B'},
            {2, 'C'},
            {2, 'D'},
            {4, 'E'},
            {3, 'F'}
        };

        auto range = dict.equal_range(2);

        for (auto i = range.first; i != range.second; ++i)
        {
            std::cout << i->first << ": " << i->second << '\\n';
        }
    }

.SH Output:

    2: B
    2: C
    2: D


.SH See also


              finds element with specific key
  find        \fI(public member function)\fP
              returns an iterator to the first element greater than the given key
  upper_bound \fI(public member function)\fP
              returns an iterator to the first element not less than the given key
  lower_bound \fI(public member function)\fP




