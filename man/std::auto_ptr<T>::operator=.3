.TH std::auto_ptr<T>::operator= 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::auto_ptr<T>::operator= \- std::auto_ptr<T>::operator=

.SH Synopsis

  auto_ptr& operator=( auto_ptr& r ) throw();    \fB(1)\fP (deprecated in C++11)
                                                     (removed in C++17)
  template< class Y >                            \fB(2)\fP (deprecated in C++11)
  auto_ptr& operator=( auto_ptr<Y>& r ) throw();     (removed in C++17)
  auto_ptr& operator=( auto_ptr_ref m ) throw(); \fB(3)\fP (deprecated in C++11)
                                                     (removed in C++17)

  Replaces the managed object with the one managed by r.
  1) Effectively calls reset(r.release()).
  2) Effectively calls reset(r.release()). Y* must be implicitly convertible to T*.
  3) Effectively calls reset(m.release()). auto_ptr_ref is an implementation-defined type that holds a reference to auto_ptr. std::auto_ptr is implicitly convertible_to and from this type. The implementation is allowed to provide the template with a different name or implement equivalent functionality in other ways.

.SH Parameters


  r - another auto_ptr to transfer the ownership of the object from
  m - an implementation-defined type that holds a reference to auto_ptr


.SH Return value

  *this.

.SH Notes

  The constructor and the copy assignment operator from auto_ptr_ref is provided to allow copy-constructing and assigning std::auto_ptr from nameless temporaries. Since its copy constructor and copy assignment operator take the argument as non-const reference, they cannot bind rvalue arguments directly. However, a user-defined_conversion can be executed (which releases the original auto_ptr), followed by a call to the constructor or copy-assignment operator that take auto_ptr_ref by value. This is an early implementation of move_semantics.



