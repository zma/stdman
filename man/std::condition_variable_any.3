.TH std::condition_variable_any 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::condition_variable_any \- std::condition_variable_any

.SH Synopsis

  Defined in header <condition_variable>
  class condition_variable_any;           \fI(since C++11)\fP

  The condition_variable_any class is a generalization of std::condition_variable. Whereas std::condition_variable works only on std::unique_lock<std::mutex>, condition_variable_any can operate on any lock that meets the BasicLockable requirements.
  See std::condition_variable for the description of the semantics of condition variables.
  The class std::condition_variable_any is a StandardLayoutType. It is not CopyConstructible, MoveConstructible, CopyAssignable, or MoveAssignable.
  If the lock is std::unique_lock, std::condition_variable may provide better performance.

.SH Member functions


                constructs the object
  constructor   \fI(public member function)\fP
                destructs the object
  destructor    \fI(public member function)\fP

  operator=     not copy-assignable
                \fI(public member function)\fP
  [deleted]

.SH Notification

                notifies one waiting thread
  notify_one    \fI(public member function)\fP
                notifies all waiting threads
  notify_all    \fI(public member function)\fP

.SH Waiting

                blocks the current thread until the condition variable is woken up
  wait          \fI(public member function)\fP
                blocks the current thread until the condition variable is woken up or after the specified timeout duration
  wait_for      \fI(public member function)\fP
                blocks the current thread until the condition variable is woken up or until specified time point has been reached
  wait_until    \fI(public member function)\fP


.SH Notes

  std::condition_variable_any can be used with std::shared_lock in order to wait on a std::shared_mutex in shared ownership mode.
  A possible use for std::condition_variable_any with custom Lockable types is to provide convenient interruptible waits: the custom lock operation would both lock the associated mutex as expected, and also perform the necessary setup to notify this condition variable when the interrupting signal is received.[1]

.SH References


    1. â†‘ A. Williams (2012), "C++ concurrency in action" 9.2.4 Interrupting a wait on std::condition_variable_any




