.TH std::map<Key,T,Compare,Allocator>::insert 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::map<Key,T,Compare,Allocator>::insert \- std::map<Key,T,Compare,Allocator>::insert

.SH Synopsis

std::pair<iterator,bool> insert( const value_type& value );      \fB(1)\fP
template< class P >                                              \fB(2)\fP \fI(since C++11)\fP
std::pair<iterator,bool> insert( P&& value );
std::pair<iterator,bool> insert( value_type&& value );           \fB(3)\fP \fI(since C++17)\fP
iterator insert( iterator hint, const value_type& value );                         \fI(until C++11)\fP
iterator insert( const_iterator hint, const value_type& value );                   \fI(since C++11)\fP
template< class P >                                                  \fB(5)\fP           \fI(since C++11)\fP
iterator insert( const_iterator hint, P&& value );
iterator insert( const_iterator hint, value_type&& value );      \fB(4)\fP \fB(6)\fP           \fI(since C++17)\fP
template< class InputIt >                                            \fB(7)\fP
void insert( InputIt first, InputIt last );
void insert( std::initializer_list<value_type> ilist );              \fB(8)\fP           \fI(since C++11)\fP
insert_return_type insert(node_type&& nh);                           \fB(9)\fP           \fI(since C++17)\fP
iterator insert(const_iterator hint, node_type&& nh);                \fB(10)\fP          \fI(since C++17)\fP

Inserts element(s) into the container, if the container doesn't already contain an element with an equivalent key.
1-3) Inserts value. The overload \fB(2)\fP is equivalent to emplace(std::forward<P>(value)) and only participates in overload resolution if std::is_constructible<value_type, P&&>::value == true.
4-6) Inserts value in the position as close as possible, just prior\fI(since C++11)\fP, to hint. The overload \fB(5)\fP is equivalent to emplace_hint(hint, std::forward<P>(value)) and only participates in overload resolution if std::is_constructible<value_type, P&&>::value == true.
7) Inserts elements from range [first, last). If multiple elements in the range have keys that compare equivalent, it is unspecified which element is inserted (pending LWG2844).
8) Inserts elements from initializer list ilist. If multiple elements in the range have keys that compare equivalent, it is unspecified which element is inserted (pending LWG2844).
9) If nh is an empty node_handle, does nothing. Otherwise, inserts the element owned by nh into the container , if the container doesn't already contain an element with a key equivalent to nh.key(). The behavior is undefined if nh is not empty and get_allocator() != nh.get_allocator().
10) If nh is an empty node_handle, does nothing and returns the end iterator. Otherwise, inserts the element owned by nh into the container, if the container doesn't already contain an element with a key equivalent to nh.key(), and returns the iterator pointing to the element with key equivalent to nh.key() (regardless of whether the insert succeeded or failed). If the insertion succeeds, nh is moved from, otherwise it retains ownership of the element. The element is inserted as close as possible to the position just prior to hint. The behavior is undefined if nh is not empty and get_allocator() != nh.get_allocator().
No iterators or references are invalidated.
If the insertion is successful, pointers and references to the element obtained while it is held in the node handle are invalidated, and pointers and references obtained to that element before it was extracted become valid.
\fI(since C++17)\fP

.SH Parameters



hint        - iterator, used as a suggestion as to where to start the search         \fI(until C++11)\fP
              iterator to the position before which the new element will be inserted \fI(since C++11)\fP

value       - element value to insert
first, last - range of elements to insert
ilist       - initializer list to insert the values from
nh          - a compatible node_handle
.SH Type requirements
-
InputIt must meet the requirements of LegacyInputIterator.


.SH Return value

1-3) Returns a pair consisting of an iterator to the inserted element (or to the element that prevented the insertion) and a bool denoting whether the insertion took place.
4-6) Returns an iterator to the inserted element, or to the element that prevented the insertion.
7-8) \fI(none)\fP
9) Returns an insert_return_type with the members initialized as follows: if nh is empty, inserted is false, position is end(), and node is empty. Otherwise if the insertion took place, inserted is true, position points to the inserted element, and node is empty. If the insertion failed, inserted is false, node has the previous value of nh, and position points to an element with a key equivalent to nh.key().
10) End iterator if nh was empty, iterator pointing to the inserted element if insertion took place, and iterator pointing to an element with a key equivalent to nh.key() if it failed.

.SH Exceptions

1-6) If an exception is thrown by any operation, the insertion has no effect.

 This section is incomplete
 Reason: cases 7-10


.SH Complexity

1-3) Logarithmic in the size of the container, O(log(size())).

4-6) Amortized constant if the insertion happens in the position just after the hint, logarithmic in the size of the container otherwise.  \fI(until C++11)\fP
4-6) Amortized constant if the insertion happens in the position just before the hint, logarithmic in the size of the container otherwise. \fI(since C++11)\fP

7-8) O(N*log(size() + N)), where N is the number of elements to insert.
9) Logarithmic in the size of the container, O(log(size())).
10) Amortized constant if the insertion happens in the position just before the hint, logarithmic in the size of the container otherwise.

.SH Notes

The hinted insert (4-6) does not return a boolean in order to be signature-compatible with positional insert on sequential containers, such as std::vector::insert. This makes it possible to create generic inserters such as std::inserter. One way to check success of a hinted insert is to compare size() before and after.

.SH See also



emplace          constructs element in-place
                 \fI(public member function)\fP
\fI(C++11)\fP

emplace_hint     constructs elements in-place using a hint
                 \fI(public member function)\fP
\fI(C++11)\fP

insert_or_assign inserts an element or assigns to the current element if the key already exists
                 \fI(public member function)\fP
\fI(C++17)\fP




