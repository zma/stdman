.TH std::uniform_real_distribution 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::uniform_real_distribution \- std::uniform_real_distribution

.SH Synopsis

  Defined in header <random>
  template< class RealType = double >  \fI(since C++11)\fP
  class uniform_real_distribution;

  Produces random floating-point values i, uniformly distributed on the interval [a, b), that is, distributed according to the probability density function:

        P(i|a,b) =

        1
        b âˆ’ a

        .

  std::uniform_real_distribution satisfies all requirements of RandomNumberDistribution

.SH Template parameters


  RealType - The result type generated by the generator. The effect is undefined if this is not one of float, double, or long double.



.SH Member types


  Member type Definition
  result_type RealType
  param_type  the type of the parameter set, see RandomNumberDistribution.


.SH Member functions


                constructs new distribution
  constructor   \fI(public member function)\fP
                resets the internal state of the distribution
  reset         \fI(public member function)\fP

.SH Generation

                generates the next random number in the distribution
  operator()    \fI(public member function)\fP

.SH Characteristics

                returns the distribution parameters
  a             \fI(public member function)\fP
  b
                gets or sets the distribution parameter object
  param         \fI(public member function)\fP
                returns the minimum potentially generated value
  min           \fI(public member function)\fP
                returns the maximum potentially generated value
  max           \fI(public member function)\fP


.SH Non-member functions


             compares two distribution objects
  operator== \fI(function)\fP
  operator!=
             performs stream input and output on pseudo-random number distribution
  operator<< \fI(function template)\fP
  operator>>


.SH Notes

  To create a distribution over the closed interval [a,b], std::nextafter(b, std::numeric_limits<RealType>::max()) may be used as the second parameter.
  Some existing implementations have a bug where they may occasionally return b if RealType is float GCC_#63176 LLVM_#18767. This is caused by LWG_issue_2524

.SH Example

  print 10 random numbers between 1 and 2
  
// Run this code

    #include <random>
    #include <iostream>

    int main()
    {
        std::random_device rd;  //Will be used to obtain a seed for the random number engine
        std::mt19937 gen(rd()); //Standard mersenne_twister_engine seeded with rd()
        std::uniform_real_distribution<> dis(1.0, 2.0);
        for (int n = 0; n < 10; ++n) {
            // Use dis to transform the random unsigned int generated by gen into a
            // double in [1, 2). Each call to dis(gen) generates a new random double
            std::cout << dis(gen) << ' ';
        }
        std::cout << '\\n';
    }

.SH Possible output:

    1.80829 1.15391 1.18483 1.38969 1.36094 1.0648 1.97798 1.27984 1.68261 1.57326




