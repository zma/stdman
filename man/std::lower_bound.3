.TH std::lower_bound 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::lower_bound \- std::lower_bound

.SH Synopsis

Defined in header <algorithm>
template< class ForwardIt, class T >                                                                      \fI(until C++20)\fP
ForwardIt lower_bound( ForwardIt first, ForwardIt last, const T& value );
template< class ForwardIt, class T >                                                                      \fI(since C++20)\fP
constexpr ForwardIt lower_bound( ForwardIt first, ForwardIt last, const T& value );               \fB(1)\fP
template< class ForwardIt, class T, class Compare >                                                                     \fI(until C++20)\fP
ForwardIt lower_bound( ForwardIt first, ForwardIt last, const T& value, Compare comp );               \fB(2)\fP
template< class ForwardIt, class T, class Compare >                                                                     \fI(since C++20)\fP
constexpr ForwardIt lower_bound( ForwardIt first, ForwardIt last, const T& value, Compare comp );

Returns an iterator pointing to the first element in the range [first, last) that is not less than (i.e. greater or equal to) value, or last if no such element is found.
The range [first, last) must be partitioned with respect to the expression element < value or comp(element, value), i.e., all elements for which the expression is true must precede all elements for which the expression is false. A fully-sorted range meets this criterion.
The first version uses operator< to compare the elements, the second version uses the given comparison function comp.

.SH Parameters


first, last - iterators defining the partially-ordered range to examine
value       - value to compare the elements to
              binary predicate which returns true if the first argument is less than (i.e. is ordered before) the second.
              The signature of the predicate function should be equivalent to the following:
              bool pred(const Type1 &a, const Type2 &b);
comp        - While the signature does not need to have const &, the function must not modify the objects passed to it and must be able to accept all values of type (possibly const) Type1 and Type2 regardless of value_category (thus, Type1 & is not allowed
              , nor is Type1 unless for Type1 a move is equivalent to a copy
              \fI(since C++11)\fP).
              The type Type1 must be such that an object of type ForwardIt can be dereferenced and then implicitly converted to Type1. The type Type2 must be such that an object of type T can be implicitly converted to Type2. 
.SH Type requirements
-
ForwardIt must meet the requirements of LegacyForwardIterator.
-
Compare must meet the requirements of BinaryPredicate. it is not required to satisfy Compare


.SH Return value

Iterator pointing to the first element that is not less than value, or last if no such element is found.

.SH Complexity

The number of comparisons performed is logarithmic in the distance between first and last (At most log
2(last - first) + O(1) comparisons). However, for non-LegacyRandomAccessIterators, the number of iterator increments is linear.

.SH Possible implementation


.SH First version

  template<class ForwardIt, class T>
  ForwardIt lower_bound(ForwardIt first, ForwardIt last, const T& value)
  {
      ForwardIt it;
      typename std::iterator_traits<ForwardIt>::difference_type count, step;
      count = std::distance(first, last);

      while (count > 0) {
          it = first;
          step = count / 2;
          std::advance(it, step);
          if (*it < value) {
              first = ++it;
              count -= step + 1;
          }
          else
              count = step;
      }
      return first;
  }

.SH Second version

  template<class ForwardIt, class T, class Compare>
  ForwardIt lower_bound(ForwardIt first, ForwardIt last, const T& value, Compare comp)
  {
      ForwardIt it;
      typename std::iterator_traits<ForwardIt>::difference_type count, step;
      count = std::distance(first, last);

      while (count > 0) {
          it = first;
          step = count / 2;
          std::advance(it, step);
          if (comp(*it, value)) {
              first = ++it;
              count -= step + 1;
          }
          else
              count = step;
      }
      return first;
  }



.SH Example


// Run this code

  #include <algorithm>
  #include <iostream>
  #include <iterator>
  #include <vector>

  template<class ForwardIt, class T, class Compare=std::less<>>
  ForwardIt binary_find(ForwardIt first, ForwardIt last, const T& value, Compare comp={})
  {
      // Note: BOTH type T and the type after ForwardIt is dereferenced
      // must be implicitly convertible to BOTH Type1 and Type2, used in Compare.
      // This is stricter than lower_bound requirement (see above)

      first = std::lower_bound(first, last, value, comp);
      return first != last && !comp(value, *first) ? first : last;
  }

  int main()
  {
      std::vector<int> data = { 1, 1, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 6 };

      auto lower = std::lower_bound(data.begin(), data.end(), 4);
      auto upper = std::upper_bound(data.begin(), data.end(), 4);

      std::copy(lower, upper, std::ostream_iterator<int>(std::cout, " "));

      std::cout << '\\n';

      // classic binary search, returning a value only if it is present

      data = { 1, 2, 4, 6, 9, 10 };

      auto it = binary_find(data.cbegin(), data.cend(), 4); //< choosing '5' will return end()

      if(it != data.cend())
        std::cout << *it << " found at index "<< std::distance(data.cbegin(), it);

      return 0;
  }

.SH Output:

  4 4 4
  4 found at index 2


Defect reports

The following behavior-changing defect reports were applied retroactively to previously published C++ standards.

DR      Applied to Behavior as published                             Correct behavior
LWG_270 C++98      Compare was required to be a strict weak ordering only a partitioning is needed; heterogeneous comparisons permitted


.SH See also


            returns range of elements matching a specific key
equal_range \fI(function template)\fP
            divides a range of elements into two groups
partition   \fI(function template)\fP
            returns an iterator to the first element greater than a certain value
upper_bound \fI(function template)\fP




