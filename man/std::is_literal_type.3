.TH std::is_literal_type 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_literal_type \- std::is_literal_type

.SH Synopsis

  Defined in header <type_traits>
  template< class T >              \fI(since C++11)\fP
  struct is_literal_type;          (deprecated in C++17)
                                   (removed in C++20)

  If T satisfies all requirements of LiteralType, provides the member constant value equal true. For any other type, value is false.
  The behavior is undefined if std::remove_all_extents_t<T> is an incomplete type and not (possibly cv-qualified) void.

.SH Template parameters


  T - a type to check


  Helper variable template


  template< class T >                                                   \fI(since C++17)\fP
  inline constexpr bool is_literal_type_v = is_literal_type<T>::value;  \fB(deprecated)\fP
                                                                        (removed in C++20)


  Inherited from std::integral_constant


.SH Member constants



  value    true if T is a literal type , false otherwise
           \fI(public static member constant)\fP
  \fB[static]\fP


.SH Member functions


                converts the object to bool, returns value
  operator bool \fI(public member function)\fP

  operator()    returns value
                \fI(public member function)\fP
  \fI(C++14)\fP


.SH Member types


  Type       Definition
  value_type bool
  type       std::integral_constant<bool, value>


.SH Notes

  Only literal types may be used as parameters to or returned from constexpr_functions. Only literal classes may have constexpr member functions.

.SH Example

  
// Run this code

    #include <iostream>
    #include <type_traits>

    struct A {
        int m;
    };

    struct B {
        virtual ~B();
    };

    int main()
    {
        std::cout << std::boolalpha;
        std::cout << std::is_literal_type<A>::value << '\\n';
        std::cout << std::is_literal_type<B>::value << '\\n';
    }

.SH Output:

    true
    false


.SH See also






