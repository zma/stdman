.TH std::vector<bool> 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::vector<bool> \- std::vector<bool>

.SH Synopsis

  Defined in header <vector>
  template<class Allocator>
  class vector<bool, Allocator>;

  std::vector<bool> is a possibly space-efficient specialization of std::vector for the type bool.
  The manner in which std::vector<bool> is made space efficient (as well as whether it is optimized at all) is implementation defined. One potential optimization involves coalescing vector elements such that each element occupies a single bit instead of sizeof(bool) bytes.
  std::vector<bool> behaves similarly to std::vector, but in order to be space efficient, it:

  * Does not necessarily store its elements as a contiguous array (so &v[0] + n != &v[n])
  * Exposes class std::vector<bool>::reference as a method of accessing individual bits. In particular, objects of this class are returned by operator[] by value.
  * Does not use std::allocator_traits::construct to construct bit values.
  * Does not guarantee that different elements in the same container can be modified concurrently by different threads.


.SH Member types


  Member type            Definition
  value_type             bool
  allocator_type         Allocator
  size_type              implementation-defined
  difference_type        implementation-defined
                         proxy class representing a reference to a single bool
  reference              \fI(class)\fP
  const_reference        bool
  pointer                implementation-defined
  const_pointer          implementation-defined
  iterator               implementation-defined
  const_iterator         implementation-defined
  reverse_iterator       std::reverse_iterator<iterator>
  const_reverse_iterator std::reverse_iterator<const_iterator>


.SH Member functions


                constructs the vector
  constructor   \fI(public member function of std::vector<T,Allocator>)\fP
                destructs the vector
  destructor    \fI(public member function of std::vector<T,Allocator>)\fP
                assigns values to the container
  operator=     \fI(public member function of std::vector<T,Allocator>)\fP
                assigns values to the container
  assign        \fI(public member function of std::vector<T,Allocator>)\fP
                returns the associated allocator
  get_allocator \fI(public member function of std::vector<T,Allocator>)\fP

.SH Element access

                access specified element with bounds checking
  at            \fI(public member function of std::vector<T,Allocator>)\fP
                access specified element
  operator[]    \fI(public member function of std::vector<T,Allocator>)\fP
                access the first element
  front         \fI(public member function of std::vector<T,Allocator>)\fP
                access the last element
  back          \fI(public member function of std::vector<T,Allocator>)\fP

.SH Iterators


  begin         returns an iterator to the beginning
  cbegin        \fI(public member function of std::vector<T,Allocator>)\fP



  end_          returns an iterator to the end
  cend          \fI(public member function of std::vector<T,Allocator>)\fP



  rbegin        returns a reverse iterator to the beginning
  crbegin       \fI(public member function of std::vector<T,Allocator>)\fP



  rend          returns a reverse iterator to the end
  crend         \fI(public member function of std::vector<T,Allocator>)\fP



.SH Capacity

                checks whether the container is empty
  empty         \fI(public member function of std::vector<T,Allocator>)\fP
                returns the number of elements
  size          \fI(public member function of std::vector<T,Allocator>)\fP
                returns the maximum possible number of elements
  max_size      \fI(public member function of std::vector<T,Allocator>)\fP
                reserves storage
  reserve       \fI(public member function of std::vector<T,Allocator>)\fP
                returns the number of elements that can be held in currently allocated storage
  capacity      \fI(public member function of std::vector<T,Allocator>)\fP

.SH Modifiers

                clears the contents
  clear         \fI(public member function of std::vector<T,Allocator>)\fP
                inserts elements
  insert        \fI(public member function of std::vector<T,Allocator>)\fP

  emplace       constructs element in-place
                \fI(public member function of std::vector<T,Allocator>)\fP
  \fI(C++14)\fP
                erases elements
  erase         \fI(public member function of std::vector<T,Allocator>)\fP
                adds an element to the end
  push_back     \fI(public member function of std::vector<T,Allocator>)\fP

  emplace_back  constructs elements in-place at the end
                \fI(public member function of std::vector<T,Allocator>)\fP
  \fI(C++14)\fP
                removes the last element
  pop_back      \fI(public member function of std::vector<T,Allocator>)\fP
                changes the number of elements stored
  resize        \fI(public member function of std::vector<T,Allocator>)\fP
                swaps the contents
  swap          \fI(public member function of std::vector<T,Allocator>)\fP

.SH vector<bool> specific modifiers

                flips all the bits
  flip          \fI(public member function)\fP

  swap          swaps two std::vector<bool>::references
                \fI(public static member function)\fP
  \fB[static]\fP


.SH Non-member functions



  operator==
  operator!=             lexicographically compares the values in the vector
  operator<              \fI(function template)\fP
  operator<=
  operator>
  operator>=
                         specializes the std::swap algorithm
  std::swap(std::vector) \fI(function template)\fP


.SH Helper classes



  std::hash<std::vector<bool>> hash support for std::vector<bool>
                               \fI(class template specialization)\fP
  \fI(C++11)\fP


.SH Notes

  If the size of the bitset is known at compile time, std::bitset may be used, which offers a richer set of member functions. In addition, boost::dynamic_bitset exists as an alternative to std::vector<bool>.
  Since its representation may by optimized, std::vector<bool> does not necessarily meet all Container or SequenceContainer requirements. For example, because std::vector<bool>::iterator is implementation-defined, it may not satisfy the LegacyForwardIterator requirement. Use of algorithms such as std::search that require LegacyForwardIterators may result in either_compile-time_or_run-time_errors.
  The Boost.Container_version_of_vector does not specialize for bool.



