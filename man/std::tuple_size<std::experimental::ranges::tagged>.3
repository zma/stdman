.TH std::tuple_size<std::experimental::ranges::tagged> 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::tuple_size<std::experimental::ranges::tagged> \- std::tuple_size<std::experimental::ranges::tagged>

.SH Synopsis

template< class Base, class... Tags >
struct tuple_size<std::experimental::ranges::tagged<Base, Tags...>>  (ranges TS)
: std::tuple_size<Base> { };

The partial specialization of std::tuple_size for tagged provides the ability to obtain the number of elements in a tagged object using tuple-like syntax. It simply forwards to std::tuple_size<Base>.

Inherited from std::integral_constant


.SH Member constants



value    std::tuple_size<Base>::value
         \fI(public static member constant)\fP
\fB[static]\fP


.SH Member functions


                     converts the object to std::size_t, returns value
operator std::size_t \fI(public member function)\fP

operator()           returns value
                     \fI(public member function)\fP
\fI(C++14)\fP


.SH Member types


Type       Definition
value_type std::size_t
type       std::integral_constant<std::size_t, value>


.SH See also


                                                      obtains the size of tuple at compile time
tuple_size                                            \fI(class template specialization)\fP
                                                      obtains the size of an array
std::tuple_size<std::array>                           \fI(class template specialization)\fP

std::tuple_size<std::pair>                            obtains the size of a pair
                                                      \fI(class template specialization)\fP
\fI(C++11)\fP
                                                      obtains the types of the elements of a tagged
std::tuple_element<std::experimental::ranges::tagged> \fI(class template specialization)\fP




