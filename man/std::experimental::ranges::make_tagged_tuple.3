.TH std::experimental::ranges::make_tagged_tuple 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::ranges::make_tagged_tuple \- std::experimental::ranges::make_tagged_tuple

.SH Synopsis

  Defined in header <experimental/ranges/tuple>
  template< TagSpecifier... Tags, class... Types>
  requires sizeof...(Tags) == sizeof...(Types)                                       (ranges TS)
  constexpr ranges::tagged</*see below*/, Tags...> make_tagged_tuple(Types&&... t);

  Convenience function for creating a tagged tuple, deducing the element types from the arguments (the tag specifiers must be explicitly specified).
  The see below portion of the return type is decltype(std::make_tuple(std::forward<Types>(t)...)).

.SH Return value

  R(std::forward<Types>(t)...), where R is the return type.

.SH See also


                   specifies that a type represents a tag specifier and its element type
  TaggedType       (concept)
                   augument a tuple-like type with named accessors
  tagged           \fI(class template)\fP
                   alias template for a tagged std::pair
  tagged_pair      (alias template)
                   convenience function for creating a tagged_pair
  make_tagged_pair \fI(function template)\fP
                   alias template for a tagged std::tuple
  tagged_tuple     (alias template)

  in
  in1
  in2
  out
  out1             tag specifiers for use with ranges::tagged
  out2             \fI(class)\fP
  fun
  min
  max
  begin
  end




