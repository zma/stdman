.TH std::basic_osyncstream<CharT,Traits,Allocator>::emit 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_osyncstream<CharT,Traits,Allocator>::emit \- std::basic_osyncstream<CharT,Traits,Allocator>::emit

.SH Synopsis

void emit();

Emits all buffered output and executes any pending flushes, by calling emit() on the underlying std::basic_syncbuf.

.SH Parameters

\fI(none)\fP

.SH Example


// Run this code

  #include <syncstream>
  #include <iostream>
  int main()
  {
    {
      std::osyncstream bout(std::cout);
      std::bout << "Hello," << '\\n'; // no flush
      std::bout.emit(); // characters transferred; cout not flushed
      std::bout << "World!" << std::endl; // flush noted; cout not flushed
      std::bout.emit(); // characters transferred; cout flushed
      std::bout << "Greetings." << '\\n'; // no flush
    } // destructor calls emit(): characters transferred; cout not flushed

    // emit can be used for local exception-handling on the wrapped stream
    std::osyncstream bout(std::cout);
    bout << "Hello, " << "World!" << '\\n';
    try {
      bout.emit();
    } catch (...) {
      // handle exceptions
    }
  }

.SH Output:

  Hello,
  World!
  Greetings.
  Hello, World!


.SH See also


             destroys the basic_osyncstream and emits its internal buffer
destructor   \fI(public member function)\fP
             atomically transmits the entire internal buffer to the wrapped streambuf
emit         \fI(public member function of std::basic_syncbuf<CharT,Traits,Allocator>)\fP




