.TH std::allocator_traits<Alloc>::construct 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::allocator_traits<Alloc>::construct \- std::allocator_traits<Alloc>::construct

.SH Synopsis

  Defined in header <memory>
  template< class T, class... Args >                        \fI(since C++11)\fP
  static void construct( Alloc& a, T* p, Args&&... args );

  If possible, constructs an object of type T in allocated uninitialized storage pointed to by p, by calling
  a.construct(p, std::forward<Args>(args)...)
  If the above is not possible (e.g. a does not have the member function construct(),), then calls placement-new as
  ::new (static_cast<void*>(p)) T(std::forward<Args>(args)...)

.SH Parameters


  a       - allocator to use for construction
  args... - the constructor arguments to pass to a.construct() or to placement-new


.SH Return value

  \fI(none)\fP

.SH Notes

  This function is used by the standard library containers when inserting, copying, or moving elements.
  Because this function provides the automatic fall back to placement new, the member function construct() is an optional Allocator requirement since C++11.

.SH See also


                        allocation functions
  operator_new          \fI(function)\fP
  operator_new[]

  construct             constructs an object in allocated storage
                        \fI(public member function of std::allocator<T>)\fP
  (deprecated in C++17)
  (removed in C++20)




