.TH std::deque<T,Allocator>::push_back 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::deque<T,Allocator>::push_back \- std::deque<T,Allocator>::push_back

.SH Synopsis

  void push_back( const T& value ); \fB(1)\fP
  void push_back( T&& value );      \fB(2)\fP \fI(since C++11)\fP

  Appends the given element value to the end of the container.
  1) The new element is initialized as a copy of value.
  2) value is moved into the new element.
  All iterators, including the past-the-end iterator, are invalidated. No references are invalidated.

.SH Parameters


  value - the value of the element to append
.SH Type requirements
  -
  T must meet the requirements of CopyInsertable in order to use overload \fB(1)\fP.
  -
  T must meet the requirements of MoveInsertable in order to use overload \fB(2)\fP.


.SH Return value

  \fI(none)\fP

.SH Complexity

  Constant.

.SH Exceptions

  If an exception is thrown (which can be due to Allocator::allocate() or element copy/move constructor/assignment), this function has no effect \fI(strong exception guarantee)\fP.


.SH Example

  
// Run this code

    #include <deque>
    #include <iostream>
    #include <iomanip>

    int main()
    {
        std::deque<std::string> numbers;

        numbers.push_back("abc");
        std::string s = "def";
        numbers.push_back(std::move(s));

        std::cout << "deque holds: ";
        for (auto&& i : numbers) std::cout << std::quoted(i) << ' ';
        std::cout << "\\nMoved-from string holds " << std::quoted(s) << '\\n';
    }

.SH Output:

    deque holds: "abc" "def"
    Moved-from string holds ""


.SH See also



  emplace_back constructs an element in-place at the end
               \fI(public member function)\fP
  \fI(C++11)\fP
               inserts an element to the beginning
  push_front   \fI(public member function)\fP
               removes the last element
  pop_back     \fI(public member function)\fP




