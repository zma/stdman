.TH std::experimental::filesystem::directory_iterator 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::filesystem::directory_iterator \- std::experimental::filesystem::directory_iterator

.SH Synopsis

Defined in header <experimental/filesystem>
class directory_iterator;                    (filesystem TS)

directory_iterator is an LegacyInputIterator that iterates over the directory_entry elements of a directory (but does not visit the subdirectories). The iteration order is unspecified, except that each directory entry is visited only once. The special pathnames dot and dot-dot are skipped.
If the directory_iterator is advanced past the last directory entry, it becomes equal to the default-constructed iterator, also known as the end iterator. Two end iterators are always equal, dereferencing or incrementing the end iterator is undefined behavior.
If a file or a directory is deleted or added to the directory tree after the directory iterator has been created, it is unspecified whether the change would be observed through the iterator.

.SH Member types


Member type       Definition
value_type        filesystem::directory_entry
difference_type   std::ptrdiff_t
pointer           const filesystem::directory_entry*
reference         const filesystem::directory_entry&
iterator_category std::input_iterator_tag


.SH Member functions


              constructs a directory iterator
constructor   \fI(public member function)\fP
              default destructor
destructor    \fI(public member function)\fP
              assigns contents
operator=     \fI(public member function)\fP
              accesses the pointed-to entry
operator*     \fI(public member function)\fP
operator->
              advances to the next entry
increment     \fI(public member function)\fP
operator++


.SH Non-member functions


                                                  range-based for loop support
filesystem::begin(filesystem::directory_iterator) \fI(function)\fP
filesystem::end(filesystem::directory_iterator)

Additionally, operator== and operator!= are provided, either as members or as non-members, as required by LegacyInputIterator

.SH Example


// Run this code

  #include <fstream>
  #include <iostream>
  #include <experimental/filesystem>
  namespace fs = std::experimental::filesystem;

  int main()
  {
      fs::create_directories("sandbox/a/b");
      std::ofstream("sandbox/file1.txt");
      std::ofstream("sandbox/file2.txt");
      for(auto& p: fs::directory_iterator("sandbox"))
          std::cout << p << '\\n';
      fs::remove_all("sandbox");
  }

.SH Possible output:

  "sandbox/a"
  "sandbox/file1.txt"
  "sandbox/file2.txt"


.SH See also


                             an iterator to the contents of a directory and its subdirectories
recursive_directory_iterator \fI(class)\fP
                             options for iterating directory contents
directory_options            \fI(enum)\fP
                             a directory entry
directory_entry              \fI(class)\fP




