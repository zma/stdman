.TH std::basic_string<CharT,Traits,Allocator>::operator= 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string<CharT,Traits,Allocator>::operator= \- std::basic_string<CharT,Traits,Allocator>::operator=

.SH Synopsis

basic_string& operator=( const basic_string& str );                      \fB(1)\fP
basic_string& operator=( basic_string&& str );                                   \fI(since C++11)\fP
                                                                                 \fI(until C++17)\fP
basic_string& operator=( basic_string&& str ) noexcept(/* see below */);         \fI(since C++17)\fP
basic_string& operator=( const CharT* s );                               \fB(2)\fP \fB(3)\fP
basic_string& operator=( CharT ch );                                         \fB(4)\fP
basic_string& operator=( std::initializer_list<CharT> ilist );               \fB(5)\fP \fI(since C++11)\fP
template<class T>                                                            \fB(6)\fP \fI(since C++17)\fP
basic_string& operator=( const T& t );

Replaces the contents of the string.
1) Replaces the contents with a copy of str. If *this and str are the same object, this function has no effect.
2) Replaces the contents with those of str using move semantics. str is in a valid but unspecified state afterwards. If std::allocator_traits<Allocator>::propagate_on_container_move_assignment() is true, the target allocator is replaced by a copy of the source allocator. If it is false and the source and the target allocators do not compare equal, the target cannot take ownership of the source memory and must assign each character individually, allocating additional memory using its own allocator as needed. Unlike other container move assignments, references, pointers, and iterators to str may be invalidated.
3) Replaces the contents with those of null-terminated character string pointed to by s as if by assign(s, Traits::length(s)).
4) Replaces the contents with character ch as if by assign(std::addressof(ch), 1)
5) Replaces the contents with those of the initializer list ilist as if by assign(ilist.begin(), ilist.size())
6) Implicitly converts t to a string view sv as if by std::basic_string_view<CharT, Traits> sv = t;, then replaces the contents with those of the sv as if by assign(sv). This overload only participates in overload resolution if std::is_convertible_v<const T&, std::basic_string_view<CharT, Traits>> is true and std::is_convertible_v<const T&, const CharT*> is false.

.SH Parameters


ch    - value to initialize characters of the string with
str   - string to be used as source to initialize the string with
s     - pointer to a null-terminated character string to use as source to initialize the string with
ilist - std::initializer_list to initialize the string with
t     - object convertible to std::basic_string_view to initialize the string with


.SH Return value

*this

.SH Complexity

1) linear in size of str
2) linear in the size of this (formally, each CharT has to be destroyed). If allocators do not compare equal and do not propagate, then also linear in the size of str (copy must be made)
3) linear in size of s
4) constant.
5) linear in size of ilist

.SH Exceptions


2)
noexcept specification:                                                                  \fI(since C++17)\fP
noexcept(std::allocator_traits<Allocator>::propagate_on_container_move_assignment::value
|| std::allocator_traits<Allocator>::is_always_equal::value)

If the operation would result in size() > max_size(), throws std::length_error.

If an exception is thrown for any reason, this function has no effect \fI(strong exception guarantee)\fP. \fI(since C++11)\fP


Defect reports

The following behavior-changing defect reports were applied retroactively to previously published C++ standards.

DR       Applied to Behavior as published                                                            Correct behavior
LWG_2063 C++11      non-normative note stated that swap is a valid implementation of move assignment corrected to support allocators
LWG_2946 C++17      string_view overload causes ambiguity in some cases                              avoided by making it a template


.SH Example


 This section is incomplete
 Reason: no example


.SH See also


              constructs a basic_string
constructor   \fI(public member function)\fP
              assign characters to a string
assign        \fI(public member function)\fP




