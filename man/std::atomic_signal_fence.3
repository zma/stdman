.TH std::atomic_signal_fence 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::atomic_signal_fence \- std::atomic_signal_fence

.SH Synopsis

Defined in header <atomic>
extern "C" void atomic_signal_fence( std::memory_order order ) noexcept;  \fI(since C++11)\fP

Establishes memory synchronization ordering of non-atomic and relaxed atomic accesses, as instructed by order, between a thread and a signal handler executed on the same thread. This is equivalent to std::atomic_thread_fence, except no CPU instructions for memory ordering are issued. Only reordering of the instructions by the compiler is suppressed as order instructs. For example, a fence with release semantics prevents reads or writes from being moved past subsequent writes and a fence with acquire semantics prevents reads or writes from being moved ahead of preceding reads.

.SH Parameters


order - the memory ordering executed by this fence


.SH Return value

\fI(none)\fP


.SH Example


 This section is incomplete
 Reason: no example


.SH See also



memory_order        defines memory ordering constraints for the given atomic operation
                    \fI(enum)\fP
\fI(C++11)\fP

atomic_thread_fence generic memory order-dependent fence synchronization primitive
                    \fI(function)\fP
\fI(C++11)\fP




