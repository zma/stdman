.TH std::is_integral 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_integral \- std::is_integral

.SH Synopsis

  Defined in header <type_traits>
  template< class T >              \fI(since C++11)\fP
  struct is_integral;

  Checks whether T is an integral type. Provides the member constant value which is equal to true, if T is the type bool, char, char8_t, char16_t, char32_t, wchar_t, short, int, long, long long, or any implementation-defined extended integer types, including any signed, unsigned, and cv-qualified variants. Otherwise, value is equal to false.

.SH Template parameters


  T - a type to check


  Helper variable template


  template< class T >                                           \fI(since C++17)\fP
  inline constexpr bool is_integral_v = is_integral<T>::value;


  Inherited from std::integral_constant


.SH Member constants



  value    true if T is an integral type , false otherwise
           \fI(public static member constant)\fP
  \fB[static]\fP


.SH Member functions


                converts the object to bool, returns value
  operator bool \fI(public member function)\fP

  operator()    returns value
                \fI(public member function)\fP
  \fI(C++14)\fP


.SH Member types


  Type       Definition
  value_type bool
  type       std::integral_constant<bool, value>


.SH Example

  
// Run this code

    #include <iostream>
    #include <type_traits>

    class A {};

    enum E : int {};

    template <class T>
    T f(T i)
    {
        static_assert(std::is_integral<T>::value, "Integral required.");
        return i;
    }

    int main()
    {
        std::cout << std::boolalpha;
        std::cout << std::is_integral<A>::value << '\\n';
        std::cout << std::is_integral<E>::value << '\\n';
        std::cout << std::is_integral<float>::value << '\\n';
        std::cout << std::is_integral<int>::value << '\\n';
        std::cout << std::is_integral<bool>::value << '\\n';
        std::cout << f(123) << '\\n';
    }

.SH Output:

    false
    false
    false
    true
    true
    123


.SH See also



  is_integer        identifies integer types
                    \fI(public static member constant of std::numeric_limits<T>)\fP
  \fB[static]\fP

  is_floating_point checks if a type is a floating-point type
                    \fI(class template)\fP
  \fI(C++11)\fP

  is_arithmetic     checks if a type is an arithmetic type
                    \fI(class template)\fP
  \fI(C++11)\fP

  is_enum           checks if a type is an enumeration type
                    \fI(class template)\fP
  \fI(C++11)\fP




