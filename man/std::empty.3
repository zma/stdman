.TH std::empty 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::empty \- std::empty

.SH Synopsis

Defined in header <iterator>
template <class C>                                                                \fI(since C++17)\fP
constexpr auto empty(const C& c) -> decltype(c.empty());                          \fI(until C++20)\fP
template <class C>                                                                \fI(since C++20)\fP
[[nodiscard]] constexpr auto empty(const C& c) -> decltype(c.empty());
template <class T, std::size_t N>                                                                \fI(since C++17)\fP
constexpr bool empty(const T (&array)[N]) noexcept;                       \fB(1)\fP                    \fI(until C++20)\fP
template <class T, std::size_t N>                                                                \fI(since C++20)\fP
[[nodiscard]] constexpr bool empty(const T (&array)[N]) noexcept;             \fB(2)\fP
template <class E>                                                                                              \fI(since C++17)\fP
constexpr bool empty(std::initializer_list<E> il) noexcept;                       \fB(3)\fP                           \fI(until C++20)\fP
template <class E>                                                                                              \fI(since C++20)\fP
[[nodiscard]] constexpr bool empty(std::initializer_list<E> il) noexcept;

Returns whether the given container is empty.
1) returns c.empty()
2) returns false
3) returns il.size() == 0

.SH Parameters


c     - a container with an empty method
array - an array of arbitrary type
il    - an initializer list


.SH Return value

true if the container doesn't have any element.

.SH Notes

In addition to being included in <iterator>, std::empty is guaranteed to become available if any of the following headers are included: <array>, <deque>, <forward_list>, <list>, <map>, <regex>, <set>
, <span>
\fI(since C++20)\fP, <string>, <string_view>, <unordered_map>, <unordered_set>, and <vector>.

.SH Possible implementation


.SH First version

  template <class C>
  constexpr auto empty(const C& c) -> decltype(c.empty())
  {
      return c.empty();
  }

.SH Second version

  template <class T, std::size_t N>
  constexpr bool empty(const T (&array)[N]) noexcept
  {
      return false;
  }

Third version

  template <class E>
  constexpr bool empty(std::initializer_list<E> il) noexcept
  {
      return il.size() == 0;
  }



.SH Example


// Run this code

  #include <iostream>
  #include <vector>

  template <class T>
  void print(const T& container)
  {
      if ( !std::empty(container) )
      {
           std::cout << "Elements:\\n";
           for ( const auto& element : container )
               std::cout << element << '\\n';
      }
      else
      {
          std::cout << "Empty\\n";
      }
  }

  int main()
  {
      std::vector<int> c = { 1, 2, 3 };
      print(c);
      c.clear();
      print(c);

      int array[] = { 4, 5, 6 };
      print(array);

      auto il = { 7, 8, 9 };
      print(il);
  }

.SH Output:

  Elements:
  1
  2
  3
  Empty
  Elements:
  4
  5
  6
  Elements:
  7
  8
  9




