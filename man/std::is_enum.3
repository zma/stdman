.TH std::is_enum 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_enum \- std::is_enum

.SH Synopsis

  Defined in header <type_traits>
  template< class T >              \fI(since C++11)\fP
  struct is_enum;

  Checks whether T is an enumeration_type. Provides the member constant value which is equal to true, if T is an enumeration type . Otherwise, value is equal to false.

.SH Template parameters


  T - a type to check


  Helper variable template


  template< class T >                                   \fI(since C++17)\fP
  inline constexpr bool is_enum_v = is_enum<T>::value;


  Inherited from std::integral_constant


.SH Member constants



  value    true if T is an enumeration type , false otherwise
           \fI(public static member constant)\fP
  \fB[static]\fP


.SH Member functions


                converts the object to bool, returns value
  operator bool \fI(public member function)\fP

  operator()    returns value
                \fI(public member function)\fP
  \fI(C++14)\fP


.SH Member types


  Type       Definition
  value_type bool
  type       std::integral_constant<bool, value>


.SH Example

  
// Run this code

    #include <iostream>
    #include <type_traits>

    class A {};

    enum E {};

    enum class Ec : int {};

    int main()
    {
        std::cout << std::boolalpha;
        std::cout << std::is_enum<A>::value << '\\n';
        std::cout << std::is_enum<E>::value << '\\n';
        std::cout << std::is_enum<Ec>::value << '\\n';
        std::cout << std::is_enum<int>::value << '\\n';
    }

.SH Output:

    false
    true
    true
    false


.SH See also



  is_integral   checks if a type is an integral type
                \fI(class template)\fP
  \fI(C++11)\fP

  is_arithmetic checks if a type is an arithmetic type
                \fI(class template)\fP
  \fI(C++11)\fP




