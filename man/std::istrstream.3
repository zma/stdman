.TH std::istrstream 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::istrstream \- std::istrstream

.SH Synopsis

Defined in header <strstream>
class istrstream : public std::istream  (deprecated in C++98)

The class istrstream implements input operations on array-backed streams. It essentially wraps a raw array I/O device implementation (std::strstreambuf) into the higher-level interface of std::basic_istream.
The typical implementation of istrstream holds only one non-derived data member: an object of type std::strstreambuf.

.SH Notes

istrstream has been deprecated since C++98, std::istringstream and boost::iostreams::array_source are the recommended replacements.

.SH Member functions


              constructs an strstream, optionally allocating the buffer
constructor   \fI(public member function)\fP

destructor    destructs a strstream, optionally deallocating the buffer
              \fI(virtual public member function)\fP
\fB[virtual]\fP
              obtains a pointer to the associated strstreambuf
rdbuf         \fI(public member function)\fP
              accesses the output buffer
str           \fI(public member function)\fP


Inherited from std::basic_istream


.SH Member functions



.SH Formatted input

           extracts formatted data
operator>> \fI(public member function of std::basic_istream<CharT,Traits>)\fP

.SH Unformatted input

           extracts characters
get        \fI(public member function of std::basic_istream<CharT,Traits>)\fP
           reads the next character without extracting it
peek       \fI(public member function of std::basic_istream<CharT,Traits>)\fP
           unextracts a character
unget      \fI(public member function of std::basic_istream<CharT,Traits>)\fP
           puts character into input stream
putback    \fI(public member function of std::basic_istream<CharT,Traits>)\fP
           extracts characters until the given character is found
getline    \fI(public member function of std::basic_istream<CharT,Traits>)\fP
           extracts and discards characters until the given character is found
ignore     \fI(public member function of std::basic_istream<CharT,Traits>)\fP
           extracts blocks of characters
read       \fI(public member function of std::basic_istream<CharT,Traits>)\fP
           extracts already available blocks of characters
readsome   \fI(public member function of std::basic_istream<CharT,Traits>)\fP
           returns number of characters extracted by last unformatted input operation
gcount     \fI(public member function of std::basic_istream<CharT,Traits>)\fP

.SH Positioning

           returns the input position indicator
tellg      \fI(public member function of std::basic_istream<CharT,Traits>)\fP
           sets the input position indicator
seekg      \fI(public member function of std::basic_istream<CharT,Traits>)\fP

.SH Miscellaneous

           synchronizes with the underlying storage device
sync       \fI(public member function of std::basic_istream<CharT,Traits>)\fP


.SH Member classes


       implements basic logic for preparation of the stream for input operations
sentry \fI(public member class of std::basic_istream<CharT,Traits>)\fP


Inherited from std::basic_ios


.SH Member types


Member type Definition
char_type   CharT
traits_type Traits
int_type    Traits::int_type
pos_type    Traits::pos_type
off_type    Traits::off_type


.SH Member functions



.SH State functions

               checks if no error has occurred i.e. I/O operations are available
good           \fI(public member function of std::basic_ios<CharT,Traits>)\fP
               checks if end-of-file has been reached
eof            \fI(public member function of std::basic_ios<CharT,Traits>)\fP
               checks if an error has occurred
fail           \fI(public member function of std::basic_ios<CharT,Traits>)\fP
               checks if a non-recoverable error has occurred
bad            \fI(public member function of std::basic_ios<CharT,Traits>)\fP
               checks if an error has occurred (synonym of fail())
operator!      \fI(public member function of std::basic_ios<CharT,Traits>)\fP

operator_void*
operator_bool  checks if no error has occurred (synonym of !fail())
               \fI(public member function of std::basic_ios<CharT,Traits>)\fP
\fI(until C++11)\fP
\fI(since C++11)\fP
               returns state flags
rdstate        \fI(public member function of std::basic_ios<CharT,Traits>)\fP
               sets state flags
setstate       \fI(public member function of std::basic_ios<CharT,Traits>)\fP
               modifies state flags
clear          \fI(public member function of std::basic_ios<CharT,Traits>)\fP

.SH Formatting

               copies formatting information
copyfmt        \fI(public member function of std::basic_ios<CharT,Traits>)\fP
               manages the fill character
fill           \fI(public member function of std::basic_ios<CharT,Traits>)\fP

.SH Miscellaneous

               manages exception mask
exceptions     \fI(public member function of std::basic_ios<CharT,Traits>)\fP
               sets the locale
imbue          \fI(public member function of std::basic_ios<CharT,Traits>)\fP
               manages associated stream buffer
rdbuf          \fI(public member function of std::basic_ios<CharT,Traits>)\fP
               manages tied stream
tie            \fI(public member function of std::basic_ios<CharT,Traits>)\fP
               narrows characters
narrow         \fI(public member function of std::basic_ios<CharT,Traits>)\fP
               widens characters
widen          \fI(public member function of std::basic_ios<CharT,Traits>)\fP


Inherited from std::ios_base


.SH Member functions



.SH Formatting

                  manages format flags
flags             \fI(public member function of std::ios_base)\fP
                  sets specific format flag
setf              \fI(public member function of std::ios_base)\fP
                  clears specific format flag
unsetf            \fI(public member function of std::ios_base)\fP
                  manages decimal precision of floating point operations
precision         \fI(public member function of std::ios_base)\fP
                  manages field width
width             \fI(public member function of std::ios_base)\fP

.SH Locales

                  sets locale
imbue             \fI(public member function of std::ios_base)\fP
                  returns current locale
getloc            \fI(public member function of std::ios_base)\fP

.SH Internal extensible array


xalloc            returns a program-wide unique integer that is safe to use as index to pword() and iword()
                  \fI(public static member function of std::ios_base)\fP
\fB[static]\fP
                  resizes the private storage if necessary and access to the long element at the given index
iword             \fI(public member function of std::ios_base)\fP
                  resizes the private storage if necessary and access to the void* element at the given index
pword             \fI(public member function of std::ios_base)\fP

.SH Miscellaneous

                  registers event callback function
register_callback \fI(public member function of std::ios_base)\fP

sync_with_stdio   sets whether C++ and C IO libraries are interoperable
                  \fI(public static member function of std::ios_base)\fP
\fB[static]\fP

.SH Member classes

                  stream exception
failure           \fI(public member class of std::ios_base)\fP
                  initializes standard stream objects
Init              \fI(public member class of std::ios_base)\fP



.SH Member types and constants

Type           Explanation
               stream open mode type
               The following constants are also defined:

               Constant Explanation
               app      seek to the end of stream before each write
               binary   open in binary_mode
openmode       in       open for reading
               out      open for writing
               trunc    discard the contents of the stream when opening
               ate      seek to the end of stream immediately after open


               \fI(typedef)\fP
               formatting flags type
               The following constants are also defined:

               Constant    Explanation
               dec         use decimal base for integer I/O: see std::dec
               oct         use octal base for integer I/O: see std::oct
               hex         use hexadecimal base for integer I/O: see std::hex
               basefield   dec|oct|hex. Useful for masking operations
               left        left adjustment (adds fill characters to the right): see std::left
               right       right adjustment (adds fill characters to the left): see std::right
               internal    internal adjustment (adds fill characters to the internal designated point): see std::internal
               adjustfield left|right|internal. Useful for masking operations
               scientific  generate floating point types using scientific notation, or hex notation if combined with fixed: see std::scientific
fmtflags       fixed       generate floating point types using fixed notation, or hex notation if combined with scientific: see std::fixed
               floatfield  scientific|fixed. Useful for masking operations
               boolalpha   insert and extract bool type in alphanumeric format: see std::boolalpha
               showbase    generate a prefix indicating the numeric base for integer output, require the currency indicator in monetary I/O: see std::showbase
               showpoint   generate a decimal-point character unconditionally for floating-point number output: see std::showpoint
               showpos     generate a + character for non-negative numeric output: see std::showpos
               skipws      skip leading whitespace before certain input operations: see std::skipws
               unitbuf     flush the output after each output operation: see std::unitbuf
               uppercase   replace certain lowercase letters with their uppercase
                           equivalents in certain output operations: see std::uppercase


               \fI(typedef)\fP
               state of the stream type
               The following constants are also defined:

               Constant Explanation
               goodbit  no error
iostate        badbit   irrecoverable stream error
               failbit  input/output operation failed (formatting or extraction error)
               eofbit   associated input sequence has reached end-of-file


               \fI(typedef)\fP
               seeking direction type
               The following constants are also defined:

               Constant Explanation
               beg      the beginning of a stream
seekdir        end      the ending of a stream
               cur      the current position of stream position indicator


               \fI(typedef)\fP
               specifies event type
event          \fI(enum)\fP
               callback function type
event_callback \fI(typedef)\fP




