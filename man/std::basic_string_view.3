.TH std::basic_string_view 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string_view \- std::basic_string_view

.SH Synopsis

  Defined in header <string_view>
  template<
  class CharT,                             \fI(since C++17)\fP
  class Traits = std::char_traits<CharT>
  > class basic_string_view;

  The class template basic_string_view describes an object that can refer to a constant contiguous sequence of char-like objects with the first element of the sequence at position zero.
  A typical implementation holds only two members: a pointer to constant CharT and a size.
  Several typedefs for common character types are provided:

  Defined in header <string_view>
  Type                Definition
  std::string_view    std::basic_string_view<char>
  std::wstring_view   std::basic_string_view<wchar_t>
  std::u8string_view  std::basic_string_view<char8_t> (C++20)
  std::u16string_view std::basic_string_view<char16_t>
  std::u32string_view std::basic_string_view<char32_t>


.SH Template parameters


  CharT  - character type
  Traits - CharTraits class specifying the operations on the character type. Like for basic_string, Traits::char_type must name the same type as CharT or the program is ill-formed.


.SH Member types


  Member type            Definition
  traits_type            Traits
  value_type             CharT
  pointer                CharT*
  const_pointer          const CharT*
  reference              CharT&
  const_reference        const CharT&
                         implementation-defined constant LegacyRandomAccessIterator
  const_iterator         , ConstexprIterator
                         \fI(since C++20)\fP and LegacyContiguousIterator whose value_type is CharT
  iterator               const_iterator
  reverse_iterator       const_reverse_iterator
  const_reverse_iterator std::reverse_iterator<const_iterator>
  size_type              std::size_t
  difference_type        std::ptrdiff_t

  Note: iterator and const_iterator are the same type because string views are views into constant character sequences.
  All requirements on the iterator types of a Container applies to the iterator and const_iterator types of basic_string_view as well.

.SH Member functions


                    constructs a basic_string_view
  constructor       \fI(public member function)\fP
                    assigns a view
  operator=         \fI(public member function)\fP

.SH Iterators

                    returns an iterator to the beginning
  begin             \fI(public member function)\fP
  cbegin
                    returns an iterator to the end
  end               \fI(public member function)\fP
  cend
                    returns a reverse iterator to the beginning
  rbegin            \fI(public member function)\fP
  crbegin
                    returns a reverse iterator to the end
  rend              \fI(public member function)\fP
  crend

.SH Element access

                    accesses the specified character
  operator[]        \fI(public member function)\fP
                    accesses the specified character with bounds checking
  at                \fI(public member function)\fP
                    accesses the first character
  front             \fI(public member function)\fP
                    accesses the last character
  back              \fI(public member function)\fP
                    returns a pointer to the first character of a view
  data              \fI(public member function)\fP

.SH Capacity

                    returns the number of characters
  size              \fI(public member function)\fP
  length
                    returns the maximum number of characters
  max_size          \fI(public member function)\fP
                    checks whether the view is empty
  empty             \fI(public member function)\fP

.SH Modifiers

                    shrinks the view by moving its start forward
  remove_prefix     \fI(public member function)\fP
                    shrinks the view by moving its end backward
  remove_suffix     \fI(public member function)\fP
                    swaps the contents
  swap              \fI(public member function)\fP

.SH Operations

                    copies characters
  copy              \fI(public member function)\fP
                    returns a substring
  substr            \fI(public member function)\fP
                    compares two views
  compare           \fI(public member function)\fP

  starts_with       checks if the string view starts with the given prefix
                    \fI(public member function)\fP
  (C++20)

  ends_with         checks if the string view ends with the given suffix
                    \fI(public member function)\fP
  (C++20)
                    find characters in the view
  find              \fI(public member function)\fP
                    find the last occurrence of a substring
  rfind             \fI(public member function)\fP
                    find first occurrence of characters
  find_first_of     \fI(public member function)\fP
                    find last occurrence of characters
  find_last_of      \fI(public member function)\fP
                    find first absence of characters
  find_first_not_of \fI(public member function)\fP
                    find last absence of characters
  find_last_not_of  \fI(public member function)\fP

.SH Constants


  npos              special value. The exact meaning depends on the context
                    \fI(public static member constant)\fP
  \fB[static]\fP


.SH Non-member functions



  operator==
  operator!= lexicographically compares two string views
  operator<  \fI(function template)\fP
  operator>
  operator<=
  operator>=

  begin      returns iterators to the beginning and the end of the string view
  end        \fI(function)\fP

  (C++20)

.SH Input/output

             performs stream output on string views
  operator<< \fI(function template)\fP


.SH Literals


  Defined in inline namespace std::literals::string_view_literals

  operator""sv Creates a string view of a character array literal
               \fI(function)\fP
  \fI(C++17)\fP


.SH Helper classes



  std::hash<std::string_view>
  std::hash<std::wstring_view>
  std::hash<std::u8string_view>
  std::hash<std::u16string_view>
  std::hash<std::u32string_view> hash support for string views
                                 \fI(class template specialization)\fP
  \fI(C++17)\fP
  \fI(C++17)\fP
  (C++20)
  \fI(C++17)\fP
  \fI(C++17)\fP


.SH Notes

  It is the programmer's responsibility to ensure that std::string_view does not outlive the pointed-to character array:

    std::string_view good("a string literal");   // OK: "good" points to a static array
    std::string_view bad("a temporary string"s); // "bad" holds a dangling pointer




