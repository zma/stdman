.TH std::deque<T,Allocator>::swap 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::deque<T,Allocator>::swap \- std::deque<T,Allocator>::swap

.SH Synopsis

void swap( deque& other );                            \fI(until C++17)\fP
void swap( deque& other ) noexcept(/* see below */);  \fI(since C++17)\fP

Exchanges the contents of the container with those of other. Does not invoke any move, copy, or swap operations on individual elements.
All iterators and references remain valid. The past-the-end iterator is invalidated.


If std::allocator_traits<allocator_type>::propagate_on_container_swap::value is true, then the allocators are exchanged using an unqualified call to non-member swap. Otherwise, they are not swapped (and if get_allocator() != other.get_allocator(), the behavior is undefined). \fI(since C++11)\fP


.SH Parameters


other - container to exchange the contents with


.SH Return value

\fI(none)\fP

.SH Exceptions


\fI(none)\fP                                                             \fI(until C++17)\fP
noexcept specification:                                            \fI(since C++17)\fP
noexcept(std::allocator_traits<Allocator>::is_always_equal::value)


.SH Complexity

Constant.

.SH See also


                      specializes the std::swap algorithm
std::swap(std::deque) \fI(function template)\fP




