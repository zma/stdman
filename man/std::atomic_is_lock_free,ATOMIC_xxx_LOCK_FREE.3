.TH std::atomic_is_lock_free,ATOMIC_xxx_LOCK_FREE 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::atomic_is_lock_free,ATOMIC_xxx_LOCK_FREE \- std::atomic_is_lock_free,ATOMIC_xxx_LOCK_FREE

.SH Synopsis

  Defined in header <atomic>
  template< class T >
  bool atomic_is_lock_free( const volatile std::atomic<T>* obj ) noexcept;
  template< class T >
  bool atomic_is_lock_free( const std::atomic<T>* obj ) noexcept;
  #define ATOMIC_BOOL_LOCK_FREE /* unspecified */
  #define ATOMIC_CHAR_LOCK_FREE /* unspecified */
  #define ATOMIC_CHAR16_T_LOCK_FREE /* unspecified */
  #define ATOMIC_CHAR32_T_LOCK_FREE /* unspecified */                      \fB(1)\fP \fI(since C++11)\fP
  #define ATOMIC_WCHAR_T_LOCK_FREE /* unspecified */                                         \fB(2)\fP \fI(since C++11)\fP
  #define ATOMIC_SHORT_LOCK_FREE /* unspecified */
  #define ATOMIC_INT_LOCK_FREE /* unspecified */
  #define ATOMIC_LONG_LOCK_FREE /* unspecified */
  #define ATOMIC_LLONG_LOCK_FREE /* unspecified */
  #define ATOMIC_POINTER_LOCK_FREE /* unspecified */
  #define ATOMIC_CHAR8_T_LOCK_FREE /* unspecified */                                         \fB(3)\fP \fI(since C++20)\fP

  1) Determines if the atomic object pointed to by obj is implemented lock-free, as if by calling obj->is_lock_free(). In any given program execution, the result of the lock-free query is the same for all pointers of the same type.
  2,3) Expands to an integer constant expression with value

  * 0 for the built-in atomic types that are never lock-free
  * 1 for the built-in atomic types that are sometimes lock-free
  * 2 for the built-in atomic types that are always lock-free.


.SH Parameters


  obj - pointer to the atomic object to examine


.SH Return value

  true if *obj is a lock-free atomic, false otherwise.


.SH Notes

  All atomic types except for std::atomic_flag may be implemented using mutexes or other locking operations, rather than using the lock-free atomic CPU instructions. Atomic types are also allowed to be sometimes lock-free: for example, if only some subarchitectures support lock-free atomic access for a given type (such as the CMPXCHG16B instruction on x86-64), whether atomics are lock-free may not be known until runtime.
  The C++ standard recommends (but does not require) that lock-free atomic operations are also address-free, that is, suitable for communication between processes using shared memory.

.SH Example

  
// Run this code

    #include <iostream>
    #include <utility>
    #include <atomic>

    struct A { int a[100]; };
    struct B { int x, y; };
    int main()
    {
        std::atomic<A> a;
        std::atomic<B> b;
        std::cout << std::boolalpha
                  << "std::atomic<A> is lock free? "
                  << std::atomic_is_lock_free(&a) << '\\n'
                  << "std::atomic<B> is lock free? "
                  << std::atomic_is_lock_free(&b) << '\\n';
    }

.SH Possible output:

    std::atomic<A> is lock free? false
    std::atomic<B> is lock free? true


.SH See also


                                            checks if the atomic object is lock-free
  is_lock_free                              \fI(public member function of std::atomic<T>)\fP
                                            specializes atomic operations for std::shared_ptr
  std::atomic_is_lock_free(std::shared_ptr) \fI(function template)\fP

  atomic_flag                               the lock-free boolean atomic type
                                            \fI(class)\fP
  \fI(C++11)\fP

  is_always_lock_free                       indicates that the type is always lock-free
                                            \fI(public static member constant of std::atomic<T>)\fP
  \fB[static]\fP \fI(C++17)\fP




