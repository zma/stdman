.TH std::experimental::apply 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::apply \- std::experimental::apply

.SH Synopsis

Defined in header <experimental/tuple>
template <class F, class Tuple>                    (library fundamentals TS)
constexpr decltype(auto) apply(F&& f, Tuple&& t);

Invoke the Callable object f with a tuple of arguments.

.SH Parameters


f - Callable object to be invoked
t - tuple whose elements to be used as arguments to f


.SH Return value

What returned by f.

.SH Possible implementation



  namespace detail {
  template <class F, class Tuple, std::size_t... I>
  constexpr decltype(auto) apply_impl( F&& f, Tuple&& t, std::index_sequence<I...> )
  {
    return std::invoke(std::forward<F>(f), std::get<I>(std::forward<Tuple>(t))...);
    // Note: std::invoke is a C++17 feature
  }
  } // namespace detail

  template <class F, class Tuple>
  constexpr decltype(auto) apply(F&& f, Tuple&& t)
  {
      return detail::apply_impl(std::forward<F>(f), std::forward<Tuple>(t),
          std::make_index_sequence<std::tuple_size_v<std::decay_t<Tuple>>>{});
  }



.SH Example


// Run this code

  #include <iostream>
  #include <tuple>

  template<typename... Ts>
  void print_tuple (const std::tuple<Ts...> &tuple)
  {
      std::apply ([] (const auto &... elem)
                  {
                      ((std::cout << elem << '\\n'), ...);
                  },
                  tuple);
  }

  int main() {
      const std::tuple<int, char> t = std::make_tuple(5, 'a');
      print_tuple(t);
  }

.SH Output:

  5
  a


.SH See also


                 creates a tuple object of the type defined by the argument types
make_tuple       \fI(function template)\fP
                 creates a tuple of rvalue references
forward_as_tuple \fI(function template)\fP




