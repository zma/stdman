.TH std::experimental::simd_mask 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::simd_mask \- std::experimental::simd_mask

.SH Synopsis
   Defined in header <experimental/simd>
   template< class T, class Abi = simd_abi::compatible<T> >
   class simd_mask;

   The class template simd_mask is a data-parallel type with the element type bool. The width of a given simd_mask instantiation is a constant expression, determined by the template parameters. Specifically, simd_mask<T, Abi>::size() is always simd<T, Abi>::size().

.SH Template parameters

   T   - the element type simd_mask applies on
   Abi - the ABI type simd_mask applies on

  Helper alias templates

   Template                                             Definition
   template <class T, int N> using fixed_size_simd_mask simd_mask<T, simd_abi::fixed_size<N>>
   template <class T> using native_simd_mask            simd_mask<T, simd_abi::native>

.SH Member types

   Member type Definition
   value_type  bool
   reference   implementation-defined
   simd_type   simd<T, Abi>
   abi_type    Abi

.SH Member functions

   constructor   constructs a simd_mask object
                 \fI(public member function)\fP
   copy_from     loads from address
                 \fI(public member function)\fP
   copy_to       stores to address
                 \fI(public member function)\fP
   operator[]    accesses specified element
                 \fI(public member function)\fP
   operator!     negates each element
                 \fI(public member function)\fP
   size          returns the number of elements
   \fB[static]\fP      \fI(public static member function)\fP

.SH Non-member functions

   operator&& element-wise logic operators
   operator|| \fI(function)\fP
   operator&  element-wise bitwise operators
   operator|  \fI(function)\fP
   operator^
   operator&= element-wise compound operators
   operator|= \fI(function)\fP
   operator^=
   operator== element-wise relation operators
   operator!= \fI(function)\fP

.SH Example
