.TH std::basic_string<CharT,Traits,Allocator>::erase 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string<CharT,Traits,Allocator>::erase \- std::basic_string<CharT,Traits,Allocator>::erase

.SH Synopsis

  basic_string& erase( size_type index = 0, size_type count = npos ); \fB(1)\fP
  iterator erase( iterator position );                                        \fI(until C++11)\fP
  iterator erase( const_iterator position );                          \fB(2)\fP     \fI(since C++11)\fP
  iterator erase( iterator first, iterator last );                        \fB(3)\fP               \fI(until C++11)\fP
  iterator erase( const_iterator first, const_iterator last );                              \fI(since C++11)\fP

  Removes specified characters from the string.
  1) Removes min(count, size()- index) characters starting at index.
  2) Removes the character at position.
  3) Removes the characters in the range [first, last).

.SH Parameters


  index       - first character to remove
  count       - number of characters to remove
  position    - iterator to the character to remove
  first, last - range of the characters to remove


.SH Return value

  1) *this
  2) iterator pointing to the character immediately following the character erased, or end() if no such character exists
  3) iterator pointing to the character last pointed to before the erase, or end() if no such character exists

.SH Exceptions

  1) std::out_of_range if index > size().
  2-3) \fI(none)\fP

  In any case, if an exception is thrown for any reason, this function has no effect \fI(strong exception guarantee)\fP.
  \fI(since C++11)\fP

.SH Example

  
// Run this code

    #include <iostream>
    #include <algorithm>
    #include <string>

    int main()
    {
        std::string s = "This is an example";
        std::cout << s << '\\n';

        s.erase(0, 5); // Erase "This "
        std::cout << s << '\\n';

        s.erase(std::find(s.begin(), s.end(), ' ')); // Erase ' '
        std::cout << s << '\\n';

        s.erase(s.find(' ')); // Trim from ' ' to the end of the string
        std::cout << s << '\\n';
    }

.SH Output:

    This is an example
    is an example
    isan example
    isan


.SH See also


        clears the contents
  clear \fI(public member function)\fP




