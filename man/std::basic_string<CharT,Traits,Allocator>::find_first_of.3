.TH std::basic_string<CharT,Traits,Allocator>::find_first_of 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string<CharT,Traits,Allocator>::find_first_of \- std::basic_string<CharT,Traits,Allocator>::find_first_of

.SH Synopsis

size_type find_first_of( const basic_string& str, size_type pos = 0 ) const;                      \fI(until C++11)\fP
size_type find_first_of( const basic_string& str, size_type pos = 0 ) const noexcept;             \fI(since C++11)\fP
size_type find_first_of( const CharT* s, size_type pos, size_type count ) const;              \fB(2)\fP
size_type find_first_of( const CharT* s, size_type pos = 0 ) const;                       \fB(1)\fP \fB(3)\fP
size_type find_first_of( CharT ch, size_type pos = 0 ) const;                                                   \fI(until C++11)\fP
size_type find_first_of( CharT ch, size_type pos = 0 ) const noexcept;                        \fB(4)\fP               \fI(since C++11)\fP
template < class T >                                                                              \fB(5)\fP           \fI(since C++17)\fP
size_type find_first_of( const T& t, size_type pos = 0 ) const noexcept(/* see below */);

Finds the first character equal to one of the characters in the given character sequence. The search considers only the interval [pos, size()). If the character is not present in the interval, npos will be returned.
1) Finds the first character equal to one of the characters in str.
2) Finds the first character equal to one of the characters in the range [s, s+count). This range can include null characters.
3) Finds the first character equal to one of the characters in character string pointed to by s. The length of the string is determined by the first null character using Traits::length(s).
4) Finds the first character equal to ch.
5) Implicitly converts t to a string view sv as if by std::basic_string_view<CharT, Traits> sv = t;, then finds the first character equal to one of the characters in sv. This overload only participates in overload resolution if std::is_convertible_v<const T&, std::basic_string_view<CharT, Traits>> is true and std::is_convertible_v<const T&, const CharT*> is false.

.SH Parameters


str   - string identifying characters to search for
pos   - position at which to begin searching
count - length of character string identifying characters to search for
s     - pointer to a character string identifying characters to search for
ch    - character to search for
t     - object (convertible to std::basic_string_view) identifying characters to search for


.SH Return value

Position of the found character or npos if no such character is found.

.SH Exceptions

5)
noexcept specification:
noexcept(std::is_nothrow_convertible_v<const T&, std::basic_string_view<CharT, Traits>>)

.SH Notes

Traits::eq() is used to perform the comparison.

Defect reports

The following behavior-changing defect reports were applied retroactively to previously published C++ standards.

DR       Applied to Behavior as published                               Correct behavior
LWG_2946 C++17      string_view overload causes ambiguity in some cases avoided by making it a template


.SH Example


// Run this code

  #include <iostream>
  #include <string>

  int main()
  {
      // the test string
      std::string str = std::string("Hello World!");

      // strings and chars to search for
      std::string search_str = std::string("o");
      const char* search_cstr = "Good Bye!";

      std::cout << str.find_first_of(search_str) << '\\n';
      std::cout << str.find_first_of(search_str, 5) << '\\n';
      std::cout << str.find_first_of(search_cstr) << '\\n';
      std::cout << str.find_first_of(search_cstr, 0, 4) << '\\n';
      // 'x' is not in "Hello World', thus it will return std::string::npos
      std::cout << str.find_first_of('x') << '\\n';
  }

.SH Possible output:

  4
  7
  1
  4
  18446744073709551615


.SH See also


                  find characters in the string
find              \fI(public member function)\fP
                  find the last occurrence of a substring
rfind             \fI(public member function)\fP
                  find first absence of characters
find_first_not_of \fI(public member function)\fP
                  find last occurrence of characters
find_last_of      \fI(public member function)\fP
                  find last absence of characters
find_last_not_of  \fI(public member function)\fP
                  returns the length of the maximum initial segment that consists
strspn            of only the characters found in another byte string
                  \fI(function)\fP




