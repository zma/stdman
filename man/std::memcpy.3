.TH std::memcpy 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::memcpy \- std::memcpy

.SH Synopsis

  Defined in header <cstring>
  void* memcpy( void* dest, const void* src, std::size_t count );

  Copies count bytes from the object pointed to by src to the object pointed to by dest. Both objects are reinterpreted as arrays of unsigned char.
  If the objects overlap, the behavior is undefined.
  If either dest or src is a null pointer, the behavior is undefined, even if count is zero.
  If the objects are potentially-overlapping or not TriviallyCopyable, the behavior of memcpy is not specified and may_be_undefined.

.SH Parameters


  dest  - pointer to the memory location to copy to
  src   - pointer to the memory location to copy from
  count - number of bytes to copy


.SH Return value

  dest

.SH Notes

  std::memcpy is meant to be the fastest library routine for memory-to-memory copy. It is usually more efficient than std::strcpy, which must scan the data it copies or std::memmove, which must take precautions to handle overlapping inputs.
  Several C++ compilers transform suitable memory-copying loops to std::memcpy calls.
  Where strict_aliasing prohibits examining the same memory as values of two different types, std::memcpy may be used to convert the values.

.SH Example

  
// Run this code

    #include <iostream>
    #include <cstdint>
    #include <cstring>

    int main()
    {
        // simple usage
        char source[] = "once upon a midnight dreary...", dest[4];
        std::memcpy(dest, source, sizeof dest);
        for (char c : dest)
            std::cout << c << '\\n';

        // reinterpreting
        double d = 0.1;
    //  std::int64_t n = *reinterpret_cast<std::int64_t*>(&d); // aliasing violation
        std::int64_t n;
        std::memcpy(&n, &d, sizeof d); // OK

        std::cout << std::hexfloat << d << " is " << std::hex << n
                  << " as an std::int64_t\\n";
    }

.SH Output:

    o
    n
    c
    e
    0x1.999999999999ap-4 is 3fb999999999999a as an std::int64_t


.SH See also


                        moves one buffer to another
  memmove               \fI(function)\fP
                        fills a buffer with a character
  memset                \fI(function)\fP
                        copies a certain amount of wide characters between two non-overlapping arrays
  wmemcpy               \fI(function)\fP

  copy
  copy_if               copies a range of elements to a new location
                        \fI(function template)\fP

  \fI(C++11)\fP
                        copies a range of elements in backwards order
  copy_backward         \fI(function template)\fP

  is_trivially_copyable checks if a type is trivially copyable
                        \fI(class template)\fP
  \fI(C++11)\fP




