.TH std::Common 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::Common \- std::Common

.SH Synopsis

Defined in header <concepts>
template <class T, class U>
concept Common =
std::Same<std::common_type_t<T, U>, std::common_type_t<U, T>> &&
requires {
static_cast<std::common_type_t<T, U>>(std::declval<T>());
static_cast<std::common_type_t<T, U>>(std::declval<U>());
} &&
std::CommonReference<                                             \fI(since C++20)\fP
std::add_lvalue_reference_t<const T>,
std::add_lvalue_reference_t<const U>> &&
std::CommonReference<
std::add_lvalue_reference_t<std::common_type_t<T, U>>,
std::common_reference_t<
std::add_lvalue_reference_t<const T>,
std::add_lvalue_reference_t<const U>>>;

The concept Common<T, U> specifies that two types T and U share a common type (as computed by std::common_type_t) to which both can be converted.
T and U model Common<T, U> only if, given equality-preserving expressions t1, t2, u1 and u2 such that decltype((t1)) and decltype((t2)) are both T and decltype((u1)) and decltype((u2)) are both U,

* std::common_type_t<T, U>(t1) equals std::common_type_t<T, U>(t2) if and only if t1 equals t2; and
* std::common_type_t<T, U>(u1) equals std::common_type_t<T, U>(u2) if and only if u1 equals u2.

In other words, the conversion to the common type must preserve equality.

Equality preservation

An expression is equality preserving if it results in equal outputs given equal inputs.

* The inputs to an expression consist of its operands.
* The outputs of an expression consist of its result and all operands modified by the expression (if any).

Every expression required to be equality preserving is further required to be stable: two evaluations of such an expression with the same input objects must have equal outputs absent any explicit intervening modification of those input objects.

.SH See also



common_type            determines the common type of a group of types
                       \fI(class template)\fP
\fI(C++11)\fP

common_reference       determines the common reference type of a group of types
basic_common_reference \fI(class template)\fP

(C++20)

CommonReference        specifies that two types share a common reference type
                       (concept)
(C++20)




