.TH std::basic_string<CharT,Traits,Allocator>::rfind 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string<CharT,Traits,Allocator>::rfind \- std::basic_string<CharT,Traits,Allocator>::rfind

.SH Synopsis

size_type rfind( const basic_string& str, size_type pos = npos ) const;
size_type rfind( const basic_string& str, size_type pos = npos ) const noexcept;
size_type rfind( const CharT* s, size_type pos, size_type count ) const;                 \fB(2)\fP
size_type rfind( const CharT* s, size_type pos = npos ) const;                       \fB(1)\fP \fB(3)\fP
size_type rfind( CharT ch, size_type pos = npos ) const;
size_type rfind( CharT ch, size_type pos = npos ) const noexcept;                        \fB(4)\fP
template < class T >                                                                         \fB(5)\fP \fI(since C++17)\fP
size_type rfind( const T& t, size_type pos = npos ) const noexcept(/* see below */);

Finds the last substring equal to the given character sequence. Search begins at pos, i.e. the found substring must not begin in a position following pos. If npos or any value not smaller than size()-1 is passed as pos, whole string will be searched.
1) Finds the last substring equal to str.
2) Finds the last substring equal to the range [s, s+count). This range can include null characters.
3) Finds the last substring equal to the character string pointed to by s. The length of the string is determined by the first null character using Traits::length(s).
4) Finds the last character equal to ch.
5) Implicitly converts t to a string view sv as if by std::basic_string_view<CharT, Traits> sv = t;, then finds the last substring equal to the contents of sv. This overload only participates in overload resolution if std::is_convertible_v<const T&, std::basic_string_view<CharT, Traits>> is true and std::is_convertible_v<const T&, const CharT*> is false.
In all cases, equality is checked by calling Traits::eq.

.SH Parameters


str   - string to search for
pos   - position at which to begin searching
count - length of substring to search for
s     - pointer to a character string to search for
ch    - character to search for
t     - object (convertible to std::basic_string_view) to search for


.SH Return value

Position of the first character of the found substring or npos if no such substring is found. Note that this is an offset from the start of the string, not the end.
If searching for an empty string (str.size(), count, or Traits::length(s) is zero) returns pos (the empty string is found immediately) unless pos > size() (including the case where pos == npos), in which case returns size().
Otherwise, if size() is zero, npos is always returned.

.SH Exceptions

5)
noexcept specification:
noexcept(std::is_nothrow_convertible_v<const T&, std::basic_string_view<CharT, Traits>>)

Defect reports

The following behavior-changing defect reports were applied retroactively to previously published C++ standards.

DR       Applied to Behavior as published                               Correct behavior
LWG_2946 C++17      string_view overload causes ambiguity in some cases avoided by making it a template


.SH Example


// Run this code

  #include <string>
  #include <iostream>

  void print(std::string::size_type n, std::string const &s)
  {
      if (n == std::string::npos) {
          std::cout << "not found\\n";
      } else {
          std::cout << "found: \\"" << s.substr(n) << "\\" at " << n << '\\n';
      }
  }

  int main()
  {
      std::string::size_type n;
      std::string const s = "This is a string";

      // search backwards from end of string
      n = s.rfind("is");
      print(n, s);
      // search backwards from position 4
      n = s.rfind("is", 4);
      print(n, s);
      // find a single character
      n = s.rfind('s');
      print(n, s);
      // find a single character
      n = s.rfind('q');
      print(n, s);
  }

.SH Output:

  found: "is a string" at 5
  found: "is is a string" at 2
  found: "string" at 10
  not found


.SH See also


                  find characters in the string
find              \fI(public member function)\fP
                  find first occurrence of characters
find_first_of     \fI(public member function)\fP
                  find first absence of characters
find_first_not_of \fI(public member function)\fP
                  find last occurrence of characters
find_last_of      \fI(public member function)\fP
                  find last absence of characters
find_last_not_of  \fI(public member function)\fP




