.TH std::list<T,Allocator>::remove,remove_if 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::list<T,Allocator>::remove,remove_if \- std::list<T,Allocator>::remove,remove_if

.SH Synopsis

void remove( const T& value );            \fI(until C++20)\fP
size_type remove( const T& value );       \fI(since C++20)\fP
template< class UnaryPredicate >          \fI(until C++20)\fP
void remove_if( UnaryPredicate p );
template< class UnaryPredicate >          \fI(since C++20)\fP
size_type remove_if( UnaryPredicate p );

Removes all elements satisfying specific criteria. The first version removes all elements that are equal to value, the second version removes all elements for which predicate p returns true.

.SH Parameters


value - value of the elements to remove
        unary predicate which returns true if the element should be removed.
p     - The expression p(v) must be convertible to bool for every argument v of type (possibly const) T, regardless of value_category, and must not modify v. Thus, a parameter type of T&is not allowed
        , nor is T unless for T a move is equivalent to a copy
        \fI(since C++11)\fP. 


.SH Return value


\fI(none)\fP                          \fI(until C++20)\fP
The number of elements removed. \fI(since C++20)\fP


.SH Complexity

Linear in the size of the container

.SH Example


// Run this code

  #include <list>
  #include <iostream>

  int main()
  {
      std::list<int> l = { 1,100,2,3,10,1,11,-1,12 };

      l.remove(1); // remove both elements equal to 1
      l.remove_if([](int n){ return n > 10; }); // remove all elements greater than 10

      for (int n : l) {
          std::cout << n << ' ';
      }
      std::cout << '\\n';
  }

.SH Output:

  2 3 10 -1


.SH See also


          removes elements satisfying specific criteria
remove    \fI(function template)\fP
remove_if




