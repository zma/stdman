.TH std::filesystem::recursive_directory_iterator::recursive_directory_iterator 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::filesystem::recursive_directory_iterator::recursive_directory_iterator \- std::filesystem::recursive_directory_iterator::recursive_directory_iterator

.SH Synopsis
   recursive_directory_iterator() noexcept;                                             \fB(1)\fP \fI(since C++17)\fP
   recursive_directory_iterator( const recursive_directory_iterator& rhs );             \fB(2)\fP \fI(since C++17)\fP
   recursive_directory_iterator( recursive_directory_iterator&& rhs ) noexcept;         \fB(3)\fP \fI(since C++17)\fP
   explicit recursive_directory_iterator( const std::filesystem::path& p );             \fB(4)\fP \fI(since C++17)\fP
   recursive_directory_iterator(

   const std::filesystem::path& p,                                                      \fB(4)\fP \fI(since C++17)\fP

   std::filesystem::directory_options options );
   recursive_directory_iterator(

   const std::filesystem::path& p,                                                      \fB(5)\fP \fI(since C++17)\fP
   std::filesystem::directory_options options,

   std::error_code& ec );
   recursive_directory_iterator( const std::filesystem::path& p, std::error_code& ec ); \fB(6)\fP \fI(since C++17)\fP

   Contructs new recursive directory iterator.

   1) Default constructor. Constructs an end iterator.
   2) Copy constructor.
   3) Move constructor.
   4-6) Constructs a iterator that refers to the first entry in the directory that p resolves to.

    This section is incomplete
    Reason: errors

.SH Parameters

    This section is incomplete

.SH Exceptions

   The overload that does not take a std::error_code& parameter throws filesystem_error on underlying OS API errors, constructed with p as the first path argument and the OS error code as the error code argument. The overload taking a std::error_code& parameter sets it to the OS API error code if an OS API call fails, and executes ec.clear() if no errors occur. Any overload not marked noexcept may throw std::bad_alloc if memory allocation fails.

.SH Notes

   Recursive directory iterators do not follow directory symlinks by default. To enable this behavior, specify directory_options::follow_directory_symlink among the options option set.

  Defect reports

   The following behavior-changing defect reports were applied retroactively to previously published C++ standards.

      DR    Applied to                    Behavior as published                    Correct behavior
   LWG 3013 C++17      error_code overload marked noexcept but can allocate memory noexcept removed
