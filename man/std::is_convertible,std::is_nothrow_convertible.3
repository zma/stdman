.TH std::is_convertible,std::is_nothrow_convertible 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_convertible,std::is_nothrow_convertible \- std::is_convertible,std::is_nothrow_convertible

.SH Synopsis
   Defined in header <type_traits>
   template< class From, class To > \fB(1)\fP \fI(since C++11)\fP
   struct is_convertible;
   template< class From, class To > \fB(2)\fP \fI(since C++20)\fP
   struct is_nothrow_convertible;

   1) If the imaginary function definition To test() { return std::declval<From>(); } is well-formed, (that is, either std::declval<From>() can be converted to To using implicit conversions, or both From and To are possibly cv-qualified void), provides the member constant value equal to true. Otherwise value is false. For the purposes of this check, the use of std::declval in the return statement is not considered an odr-use.
   Access checks are performed as if from a context unrelated to either type. Only the validity of the immediate context of the expression in the return statement (including conversions to the return type) is considered.
   2) Same as \fB(1)\fP, but the conversion is also noexcept.

   From and To shall each be a complete type, (possibly cv-qualified) void, or an array of unknown bound. Otherwise, the behavior is undefined.

   If an instantiation of a template above depends, directly or indirectly, on an incomplete type, and that instantiation could yield a different result if that type were hypothetically completed, the behavior is undefined.

  Helper variable template

   template< class From, class To >                                                           \fI(since C++17)\fP
   inline constexpr bool is_convertible_v = is_convertible<From, To>::value;
   template< class From, class To >                                                           \fI(since C++20)\fP
   inline constexpr bool is_nothrow_convertible_v = is_nothrow_convertible<From, To>::value;

Inherited from std::integral_constant

.SH Member constants

   value    true if From is convertible to To , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Notes

   Gives well-defined results for reference types, void types, array types, and function types.

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>

 class E { public: template<class T> E(T&&) { } };

 int main()
 {
     class A {};
     class B : public A {};
     class C {};
     class D { public: operator C() { return c; }  C c; };


     bool b2a = std::is_convertible<B*, A*>::value;
     bool a2b = std::is_convertible<A*, B*>::value;
     bool b2c = std::is_convertible<B*, C*>::value;
     bool d2c = std::is_convertible<D, C>::value;

     // A Perfect Forwarding constructor make the class 'convert' from everything

     bool everything2e = std::is_convertible<A, E>::value; //< B, C, D, etc

     std::cout << std::boolalpha;

     std::cout << b2a << '\\n';
     std::cout << a2b << '\\n';
     std::cout << b2c << '\\n';
     std::cout << d2c << '\\n';
     std::cout << '\\n';
     std::cout << everything2e << '\\n';
 }

.SH Output:

 true
 false
 false
 true

 true

.SH See also
