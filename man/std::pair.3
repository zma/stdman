.TH std::pair 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::pair \- std::pair

.SH Synopsis

Defined in header <utility>
template<
class T1,
class T2
> struct pair;

std::pair is a struct template that provides a way to store two heterogeneous objects as a single unit. A pair is a specific case of a std::tuple with two elements.

If std::is_trivially_destructible_v<T1> && std::is_trivially_destructible_v<T2> is true, the destructor of pair is trivial. \fI(since C++17)\fP


.SH Template parameters


T1, T2 - the types of the elements that the pair stores.


.SH Member types


Member type Definition
first_type  T1
second_type T2


.SH Member objects


Member name Type
first       T1
second      T2


.SH Member functions


              constructs new pair
constructor   \fI(public member function)\fP
              assigns the contents
operator=     \fI(public member function)\fP

swap          swaps the contents
              \fI(public member function)\fP
\fI(C++11)\fP


.SH Non-member functions


                     creates a pair object of type, defined by the argument types
make_pair            \fI(function template)\fP

operator==
operator!=           lexicographically compares the values in the pair
operator<            \fI(function template)\fP
operator<=
operator>
operator>=

std::swap(std::pair) specializes the std::swap algorithm
                     \fI(function template)\fP
\fI(C++11)\fP

std::get(std::pair)  accesses an element of a pair
                     \fI(function template)\fP
\fI(C++11)\fP


.SH Helper classes



std::tuple_size<std::pair>    obtains the size of a pair
                              \fI(class template specialization)\fP
\fI(C++11)\fP

std::tuple_element<std::pair> obtains the type of the elements of pair
                              \fI(class template specialization)\fP
\fI(C++11)\fP


Deduction_guides\fI(since C++17)\fP


.SH See also



tuple   implements fixed size container, which holds elements of possibly different types
        \fI(class template)\fP
\fI(C++11)\fP
        creates a tuple of lvalue references or unpacks a tuple into individual objects
tie     \fI(function template)\fP




