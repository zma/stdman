.TH std::ctype<char> 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ctype<char> \- std::ctype<char>

.SH Synopsis

  Defined in header <locale>
  template<>
  class ctype<char>;

  This specialization of std::ctype encapsulates character classification features for type char. Unlike general-purpose std::ctype, which uses virtual functions, this specialization uses table lookup to classify characters (which is generally faster).
  The base class std::ctype<char> implements character classification equivalent to the minimal "C" locale. The classification rules can be extended or modified if constructed with a non-default classification table argument, if constructed as std::ctype_byname<char> or as a user-defined derived facet. All std::istream formatted input functions are required to use std::ctype<char> for character classing during input parsing.
   std-ctype char-inheritance.svg
  Inheritance diagram

.SH Member types


  Member type Definition
  char_type   char


.SH Member functions


                constructs a new std::ctype<char> facet
  constructor   \fI(public member function)\fP
                destructs a std::ctype<char> facet
  destructor    \fI(protected member function)\fP
                obtains the character classification table
  table         \fI(public member function)\fP

  classic_table obtains the "C" locale character classification table
                \fI(public static member function)\fP
  \fB[static]\fP
                classifies a character or a character sequence, using the classification table
  is            \fI(public member function)\fP
                locates the first character in a sequence that conforms to given classification, using the classification table
  scan_is       \fI(public member function)\fP
                locates the first character in a sequence that fails given classification, using the classification table
  scan_not      \fI(public member function)\fP
                invokes do_toupper
  toupper       \fI(public member function of std::ctype<CharT>)\fP
                invokes do_tolower
  tolower       \fI(public member function of std::ctype<CharT>)\fP
                invokes do_widen
  widen         \fI(public member function of std::ctype<CharT>)\fP
                invokes do_narrow
  narrow        \fI(public member function of std::ctype<CharT>)\fP


.SH Protected member functions



  do_toupper converts a character or characters to uppercase
             \fI(virtual protected member function of std::ctype<CharT>)\fP
  \fB[virtual]\fP

  do_tolower converts a character or characters to lowercase
             \fI(virtual protected member function of std::ctype<CharT>)\fP
  \fB[virtual]\fP

  do_widen   converts a character or characters from char to charT
             \fI(virtual protected member function of std::ctype<CharT>)\fP
  \fB[virtual]\fP

  do_narrow  converts a character or characters from charT to char
             \fI(virtual protected member function of std::ctype<CharT>)\fP
  \fB[virtual]\fP


.SH Member objects



  static std::locale::id id            id of the locale
                                       \fI(public static member constant)\fP
  \fB[static]\fP

  static const std::size_t  table_size size of the classification table, at least 256
                                       \fI(public static member constant)\fP
  \fB[static]\fP


  Inherited from std::ctype_base


.SH Member types


  Type Definition
  mask unspecified bitmask type (enumeration, integer type, or bitset)


.SH Member constants



  space            the value of mask identifying whitespace character classification
                   \fI(public static member constant)\fP
  \fB[static]\fP

  print            the value of mask identifying printable character classification
                   \fI(public static member constant)\fP
  \fB[static]\fP

  cntrl            the value of mask identifying control character classification
                   \fI(public static member constant)\fP
  \fB[static]\fP

  upper            the value of mask identifying uppercase character classification
                   \fI(public static member constant)\fP
  \fB[static]\fP

  lower            the value of mask identifying lowercase character classification
                   \fI(public static member constant)\fP
  \fB[static]\fP

  alpha            the value of mask identifying alphabetic character classification
                   \fI(public static member constant)\fP
  \fB[static]\fP

  digit            the value of mask identifying digit character classification
                   \fI(public static member constant)\fP
  \fB[static]\fP

  punct            the value of mask identifying punctuation character classification
                   \fI(public static member constant)\fP
  \fB[static]\fP

  xdigit           the value of mask identifying hexadecimal digit character classification
                   \fI(public static member constant)\fP
  \fB[static]\fP

  blank            the value of mask identifying blank character classification
                   \fI(public static member constant)\fP
  \fB[static]\fP \fI(C++11)\fP

  alnum            alpha | digit
                   \fI(public static member constant)\fP
  \fB[static]\fP

  graph            alnum | punct
                   \fI(public static member constant)\fP
  \fB[static]\fP


.SH Example

  The following example demonstrates modification of ctype<char> to tokenize comma-separated values
  
// Run this code

    #include <iostream>
    #include <vector>
    #include <locale>
    #include <sstream>

    // This ctype facet classifies commas and endlines as whitespace
    struct csv_whitespace : std::ctype<char> {
        static const mask* make_table()
        {
            // make a copy of the "C" locale table
            static std::vector<mask> v(classic_table(), classic_table() + table_size);
            v[','] |=  space;  // comma will be classified as whitespace
            v[' '] &= ~space;      // space will not be classified as whitespace
            return &v[0];
        }
        csv_whitespace(std::size_t refs = 0) : ctype(make_table(), false, refs) {}
    };

    int main()
    {
        std::string in = "Column 1,Column 2,Column 3\\n123,456,789";
        std::string token;

        std::cout << "default locale:\\n";
        std::istringstream s1(in);
        while(s1 >> token)
                std::cout << "  " << token << '\\n';

        std::cout << "locale with modified ctype:\\n";
        std::istringstream s2(in);
        s2.imbue(std::locale(s2.getloc(), new csv_whitespace));
        while(s2 >> token)
                std::cout << "  " << token<< '\\n';
    }

.SH Output:

    default locale:
      Column
      1,Column
      2,Column
      3
      123,456,789
    locale with modified ctype:
      Column 1
      Column 2
      Column 3
      123
      456
      789


.SH See also


               defines character classification tables
  ctype        \fI(class template)\fP
               defines character classification categories
  ctype_base   \fI(class template)\fP
               creates a ctype facet for the named locale
  ctype_byname \fI(class template)\fP




