.TH std::minus 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::minus \- std::minus

.SH Synopsis

  Defined in header <functional>
  template< class T >             \fI(until C++14)\fP
  struct minus;
  template< class T = void >      \fI(since C++14)\fP
  struct minus;

  Function object for performing subtraction. Effectively calls operator- on two instances of type T.

.SH Specializations


  The standard library provides a specialization of std::minus when T is not specified, which leaves the parameter types and return type to be deduced.

              function object implementing x - y deducing argument and return types                                                                     \fI(since C++14)\fP
  minus<void> \fI(class template specialization)\fP




.SH Member types


  Type                                      Definition \fI(until C++20)\fP
  result_type(deprecated in C++17)          T
  first_argument_type(deprecated in C++17)  T
  second_argument_type(deprecated in C++17) T



.SH Member functions


             returns the difference between two arguments
  operator() \fI(public member function)\fP


   std::minus::operator()


  T operator()( const T& lhs, const T& rhs ) const;            \fI(until C++14)\fP
  constexpr T operator()( const T& lhs, const T& rhs ) const;  \fI(since C++14)\fP

  Returns the difference between lhs and rhs.

.SH Parameters


  lhs, rhs - values to subtract from one another


.SH Return value

  The result of lhs - rhs.

.SH Exceptions

  \fI(none)\fP

.SH Possible implementation



    constexpr T operator()(const T &lhs, const T &rhs) const
    {
        return lhs - rhs;
    }





