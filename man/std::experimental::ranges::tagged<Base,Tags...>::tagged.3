.TH std::experimental::ranges::tagged<Base,Tags...>::tagged 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::ranges::tagged<Base,Tags...>::tagged \- std::experimental::ranges::tagged<Base,Tags...>::tagged

.SH Synopsis

using Base::Base;                                                                  \fB(1)\fP
tagged() = default;                                                                \fB(2)\fP
tagged(tagged&& that) = default;                                                   \fB(3)\fP
tagged(const tagged& that) = default;                                              \fB(4)\fP
tagged(Base&& that) noexcept(std::is_nothrow_move_constructible<Base>::value)      \fB(5)\fP
requires MoveConstructible<Base>;
tagged(const Base& that) noexcept(std::is_nothrow_copy_constructible<Base>::value) \fB(6)\fP
requires CopyConstructible<Base>;
template <class Other>
requires Constructible<Base, Other>                                                \fB(7)\fP
constexpr tagged(ranges::tagged<Other, Tags...> && that)
noexcept(std::is_nothrow_constructible<Base, Other>::value);
template <class Other>
requires Constructible<Base, const Other&>                                         \fB(8)\fP
constexpr tagged(const ranges::tagged<Other, Tags...> &that);

Constructs a tagged object.
1) tagged<Base, Tags...> inherits the constructors of Base.
2-4) tagged has defaulted default, copy, and move constructors that invoke the corresponding constructor of Base.
5) Converting move constructor from Base. Initializes the Base subobject with std::move(that).
6) Converting copy constructor from Base. Initializes the Base subobject with that.
7) Converting move constructor from a different tagged specialization with matching tags. Initializes the Base subobject with static_cast<Other&&>(that).
8) Converting copy constructor from a different tagged specialization with matching tags. Initializes the Base subobject with static_cast<const Other&>(that).



