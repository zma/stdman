.TH std::basic_string<CharT,Traits,Allocator>::size,std::basic_string<CharT,Traits,Allocator>::length 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string<CharT,Traits,Allocator>::size,std::basic_string<CharT,Traits,Allocator>::length \- std::basic_string<CharT,Traits,Allocator>::size,std::basic_string<CharT,Traits,Allocator>::length

.SH Synopsis

  size_type size() const;             \fI(until C++11)\fP
  size_type size() const noexcept;    \fI(since C++11)\fP
  size_type length() const;           \fI(until C++11)\fP
  size_type length() const noexcept;  \fI(since C++11)\fP

  Returns the number of CharT elements in the string, i.e. std::distance(begin(), end()).

.SH Parameters

  \fI(none)\fP

.SH Return value

  The number of CharT elements in the string.

.SH Complexity


  Unspecified \fI(until C++11)\fP
  Constant    \fI(since C++11)\fP


.SH Notes

  For std::string, the elements are bytes (objects of type char), which are not the same as characters if a multibyte encoding such as UTF-8 is used.

.SH Example

  
// Run this code

    #include <cassert>
    #include <iterator>
    #include <string>

    int main()
    {
        std::string s("Exemplar");
        assert(8 == s.size());
        assert(s.size() == s.length());
        assert(s.size() == static_cast<std::string::size_type>(
            std::distance(s.begin(), s.end())));

        std::u32string a(U"ハロー・ワールド"); // 8 code points
        assert(8 == a.size()); // 8 code units in UTF-32

        std::u16string b(u"ハロー・ワールド"); // 8 code points
        assert(8 == b.size()); // 8 code units in UTF-16

        std::string c(u8"ハロー・ワールド"); // 8 code points
        assert(24 == c.size()); // 24 code units in UTF-8
    }



.SH See also


           checks whether the string is empty
  empty    \fI(public member function)\fP
           returns the maximum number of characters
  max_size \fI(public member function)\fP




