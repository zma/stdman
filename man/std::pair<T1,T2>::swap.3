.TH std::pair<T1,T2>::swap 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::pair<T1,T2>::swap \- std::pair<T1,T2>::swap

.SH Synopsis

void swap(pair& other) noexcept(/* see below */);            \fI(since C++11)\fP
                                                             \fI(until C++20)\fP
constexpr void swap(pair& other) noexcept(/* see below */);  \fI(since C++20)\fP

Swaps first with other.first and second with other.second.

.SH Parameters


other - pair of values to swap


.SH Return value

\fI(none)\fP

.SH Exceptions


noexcept specification:
noexcept(
noexcept(swap(first, other.first)) &&                                                                                                      \fI(until C++17)\fP
noexcept(swap(second, other.second))
)
In the expression above, the identifier swap is looked up in the same manner as the one used by the C++17 std::is_nothrow_swappable trait.
noexcept specification:
noexcept(
std::is_nothrow_swappable_v<first_type> &&                                                                                                 \fI(since C++17)\fP
std::is_nothrow_swappable_v<second_type>
)


.SH Example


// Run this code

  #include <iostream>
  #include <utility>
  #include <string>
  int main()
  {
      std::pair<int, std::string> p1, p2;
      p1 = std::make_pair(10, "test");
      p2.swap(p1);
      std::cout << "(" << p2.first << ", " << p2.second << ")\\n";
  }

.SH Output:

  (10, test)


Defect reports

The following behavior-changing defect reports were applied retroactively to previously published C++ standards.

DR       Applied to Behavior as published                    Correct behavior
LWG_2456 C++11      the noexcept specification is ill-formed made to work


.SH See also


     swaps the values of two objects
swap \fI(function template)\fP




