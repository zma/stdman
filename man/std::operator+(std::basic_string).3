.TH std::operator+(std::basic_string) 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::operator+(std::basic_string) \- std::operator+(std::basic_string)

.SH Synopsis

template< class CharT, class Traits, class Alloc >
basic_string<CharT,Traits,Alloc>                        \fB(1)\fP
operator+( const basic_string<CharT,Traits,Alloc>& lhs,
const basic_string<CharT,Traits,Alloc>& rhs );
template< class CharT, class Traits, class Alloc >
basic_string<CharT,Traits,Alloc>                        \fB(2)\fP
operator+( const basic_string<CharT,Traits,Alloc>& lhs,
const CharT* rhs );
template<class CharT, class Traits, class Alloc>
basic_string<CharT,Traits,Alloc>                        \fB(3)\fP
operator+( const basic_string<CharT,Traits,Alloc>& lhs,
CharT rhs );
template< class CharT, class Traits, class Alloc >
basic_string<CharT,Traits,Alloc>                        \fB(4)\fP
operator+( const CharT* lhs,
const basic_string<CharT,Traits,Alloc>& rhs );
template< class CharT, class Traits, class Alloc >
basic_string<CharT,Traits,Alloc>                        \fB(5)\fP
operator+( CharT lhs,
const basic_string<CharT,Traits,Alloc>& rhs );
template< class CharT, class Traits, class Alloc >
basic_string<CharT,Traits,Alloc>                        \fB(6)\fP  \fI(since C++11)\fP
operator+( basic_string<CharT,Traits,Alloc>&& lhs,
basic_string<CharT,Traits,Alloc>&& rhs );
template< class CharT, class Traits, class Alloc >
basic_string<CharT,Traits,Alloc>                        \fB(7)\fP  \fI(since C++11)\fP
operator+( basic_string<CharT,Traits,Alloc>&& lhs,
const basic_string<CharT,Traits,Alloc>& rhs );
template< class CharT, class Traits, class Alloc >
basic_string<CharT,Traits,Alloc>                        \fB(8)\fP  \fI(since C++11)\fP
operator+( basic_string<CharT,Traits,Alloc>&& lhs,
const CharT* rhs );
template< class CharT, class Traits, class Alloc >
basic_string<CharT,Traits,Alloc>                        \fB(9)\fP  \fI(since C++11)\fP
operator+( basic_string<CharT,Traits,Alloc>&& lhs,
CharT rhs );
template< class CharT, class Traits, class Alloc >
basic_string<CharT,Traits,Alloc>                        \fB(10)\fP \fI(since C++11)\fP
operator+( const basic_string<CharT,Traits,Alloc>& lhs,
basic_string<CharT,Traits,Alloc>&& rhs );
template< class CharT, class Traits, class Alloc >
basic_string<CharT,Traits,Alloc>                        \fB(11)\fP \fI(since C++11)\fP
operator+(const CharT* lhs,
basic_string<CharT,Traits,Alloc>&& rhs );
template< class CharT, class Traits, class Alloc >
basic_string<CharT,Traits,Alloc>                        \fB(12)\fP \fI(since C++11)\fP
operator+( CharT lhs,
basic_string<CharT,Traits,Alloc>&& rhs );

Returns a string containing characters from lhs followed by the characters from rhs.

The allocator used for the result is:
1-3) std::allocator_traits<Alloc>::select_on_container_copy_construction(lhs.get_allocator())
4-5) std::allocator_traits<Alloc>::select_on_container_copy_construction(rhs.get_allocator())
6-9) lhs.get_allocator()                                                                                                                                                                                                                                                                          \fI(since C++11)\fP
10-12) rhs.get_allocator()
In other words, if one operand is a basic_string rvalue, its allocator is used; otherwise, select_on_container_copy_construction is used on the allocator of the lvalue basic_string operand. In each case, the left operand is preferred when both are basic_strings of the same value category.
For (6-12), all rvalue basic_string operands are left in valid but unspecified states.


.SH Parameters


lhs - string, character, or pointer to the first character in a null-terminated array
rhs - string, character, or pointer to the first character in a null-terminated array


.SH Return value

A string containing characters from lhs followed by the characters from rhs
, using the allocator determined as above
\fI(since C++11)\fP.


.SH Notes

operator+ should be used with great caution when stateful allocators are involved
(such as when std::pmr::string is used)
\fI(since C++17)\fP. Prior to P1165R1, the allocator used for the result was determined by historical accident and can vary from overload to overload for no apparent reason. Moreover, for (1-5), the allocator propagation behavior varies across major standard library implementations and differs from the behavior depicted in the standard.
Because the allocator used by the result of operator+ is sensitive to value category, operator+ is not associative with respect to allocator propagation:

  using my_string = std::basic_string<char, std::char_traits<char>, my_allocator<char>>;
  my_string cat();
  const my_string& dog();

  my_string meow = /* ... */, woof = /* ... */;                                                                                                                                                                                                                                                                                              \fI(since C++11)\fP
  meow + cat() + /*...*/; // uses SOCCC on meow's allocator
  woof + dog() + /*...*/; // uses allocator of dog()'s return value instead

  meow + woof + meow; // uses SOCCC on meow's allocator
  meow + (woof + meow); // uses SOCCC on woof's allocator instead

For a chain of operator+ invocations, the allocator used for the ultimate result may be controlled by prepending an rvalue basic_string with the desired allocator:

  // use my_favorite_allocator for the final result
  my_string(my_favorite_allocator) + meow + woof + cat() + dog();

For better and portable control over allocators, member functions like append(), insert(), and operator+=() should be used on a result string constructed with the desired allocator.


.SH Example


// Run this code

  #include <iostream>
  #include <string>

  int main()
  {
      std::string s1 = "Hello";
      std::string s2 = "world";
      std::cout << s1 + ' ' + s2 + "!\\n";
  }

.SH Output:

  Hello world!


Defect reports

The following behavior-changing defect reports were applied retroactively to previously published C++ standards.

DR      Applied to Behavior as published                               Correct behavior
P1165R1 C++11      allocator propagation is haphazard and inconsistent made more consistent


.SH See also


           appends characters to the end
operator+= \fI(public member function)\fP
           appends characters to the end
append     \fI(public member function)\fP
           inserts characters
insert     \fI(public member function)\fP




