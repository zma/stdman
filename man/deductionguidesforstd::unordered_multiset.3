.TH deductionguidesforstd::unordered_multiset 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
deductionguidesforstd::unordered_multiset \- deductionguidesforstd::unordered_multiset

.SH Synopsis

  Defined in header <unordered_set>
  template<class InputIt,
  class Hash = std::hash<typename std::iterator_traits<InputIt>::value_type>,
  class Pred = std::equal_to<typename std::iterator_traits<InputIt>::value_type>,
  class Alloc = std::allocator<typename std::iterator_traits<InputIt>::value_type>>             \fB(1)\fP \fI(since C++17)\fP
  unordered_multiset(InputIt, InputIt,
  typename /*see below*/::size_type = /*see below*/,
  Hash = Hash(), Pred = Pred(), Alloc = Alloc())
  -> unordered_multiset<typename std::iterator_traits<InputIt>::value_type, Hash, Pred, Alloc>;
  template<class T,
  class Hash = std::hash<T>,
  class Pred = std::equal_to<T>,
  class Alloc = std::allocator<T>>                                                              \fB(2)\fP \fI(since C++17)\fP
  unordered_multiset(std::initializer_list<T>,
  typename /*see below*/::size_type = /*see below*/,
  Hash = Hash(), Pred = Pred(), Alloc = Alloc())
  -> unordered_multiset<T, Hash, Pred, Alloc>;
  template<class InputIt, class Alloc>
  unordered_multiset(InputIt, InputIt, typename /*see below*/::size_type, Alloc)
  -> unordered_multiset<typename std::iterator_traits<InputIt>::value_type,                     \fB(3)\fP \fI(since C++17)\fP
  std::hash<typename std::iterator_traits<InputIt>::value_type>,
  std::equal_to<typename std::iterator_traits<InputIt>::value_type>,
  Alloc>;
  template<class InputIt, class Hash, class Alloc>
  unordered_multiset(InputIt, InputIt, typename /*see below*/::size_type, Hash, Alloc)          \fB(4)\fP \fI(since C++17)\fP
  -> unordered_multiset<typename std::iterator_traits<InputIt>::value_type, Hash,
  std::equal_to<typename std::iterator_traits<InputIt>::value_type>, Allocator>;
  template<class T, class Allocator>
  unordered_multiset(std::initializer_list<T>, typename /*see below*/::size_type, Allocator)    \fB(5)\fP \fI(since C++17)\fP
  -> unordered_multiset<T, std::hash<T>, std::equal_to<T>, Alloc>;
  template<class T, class Hash, class Alloc>
  unordered_multiset(std::initializer_list<T>, typename /*see below*/::size_type, Hash, Alloc)  \fB(6)\fP \fI(since C++17)\fP
  -> unordered_multiset<T, Hash, std::equal_to<T>, Alloc>;

  These deduction_guides are provided for unordered_multiset to allow deduction from an iterator range (overloads (1,3,4)) and std::initializer_list (overloads (2,5.6)). This overload only participates in overload resolution if InputIt satisfies LegacyInputIterator, Alloc satisfies Allocator, neither Hash nor Pred satisfy Allocator, Hash is not an integral type
  Note: the extent to which the library determines that a type does not satisfy LegacyInputIterator is unspecified, except that as a minimum integral types do not qualify as input iterators. Likewise, the extent to which it determines that a type does not satisfy Allocator is unspecified, except that as a minimum the member type Alloc::value_type must exist and the expression std::declval<Alloc&>().allocate(std::size_t{}) must be well-formed when treated as an unevaluated operand.
  The size_type parameter type in these guides refers to the size_type member type of the type deduced by the deduction guide.

.SH Example

  
// Run this code

    #include <unordered_set>
    int main() {
       std::unordered_multiset s = {1,2,3,4};            // guide #2 deduces std::unordered_multiset<int>
       std::unordered_multiset s2(s.begin(), s.end());   // guide #1 deduces std::unordered_multiset<int>
    }





