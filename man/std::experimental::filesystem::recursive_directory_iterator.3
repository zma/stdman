.TH std::experimental::filesystem::recursive_directory_iterator 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::filesystem::recursive_directory_iterator \- std::experimental::filesystem::recursive_directory_iterator

.SH Synopsis

  Defined in header <experimental/filesystem>
  class recursive_directory_iterator;          (filesystem TS)

  recursive_directory_iterator is an LegacyInputIterator that iterates over the directory_entry elements of a directory, and, recursively, over the entries of all subdirectories. The iteration order is unspecified, except that each directory entry is visited only once.
  By default, symlinks are not followed, but this can be enabled by specifying the directory option follow_directory_symlink at construction time.
  The special pathnames dot and dot-dot are skipped.
  If the recursive_directory_iterator is advanced past the last directory entry of the top-level directory, it becomes equal to the default-constructed iterator, also known as the end iterator. Two end iterators are always equal, dereferencing or incrementing the end iterator is undefined behavior.
  If a file or a directory is deleted or added to the directory tree after the recursive directory iterator has been created, it is unspecified whether the change would be observed through the iterator.
  If the directory structure contains cycles, the end iterator may be unreachable.

.SH Member types


  Member type       Definition
  value_type        filesystem::directory_entry
  difference_type   std::ptrdiff_t
  pointer           const filesystem::directory_entry*
  reference         const filesystem::directory_entry&
  iterator_category std::input_iterator_tag


.SH Member functions


                            constructs a recursive directory iterator
  constructor               \fI(public member function)\fP
                            default destructor
  destructor                \fI(public member function)\fP

.SH Observers

                            accesses the pointed-to entry
  operator*                 \fI(public member function)\fP
  operator->
                            returns the currently active options that affect the iteration
  options                   \fI(public member function)\fP
                            returns the current recursion depth
  depth                     \fI(public member function)\fP
                            checks whether the recursion is disabled for the current directory
  recursion_pending         \fI(public member function)\fP

.SH Modifiers

                            assigns contents
  operator=                 \fI(public member function)\fP
                            advances to the next entry
  increment                 \fI(public member function)\fP
  operator++
                            moves the iterator one level up in the directory hierarchy
  pop                       \fI(public member function)\fP
                            disables recursion until the next increment
  disable_recursion_pending \fI(public member function)\fP


.SH Non-member functions


                                                              range-based for loop support
  filesystem::begin(filesystem::recursive_directory_iterator) \fI(function)\fP
  filesystem::end(filesystem::recursive_directory_iterator)

  Additionally, operator== and operator!= are provided, either as members or as non-members, as required by LegacyInputIterator

.SH Notes

  A recursive_directory_iterator typically holds a reference-counted pointer (to satisfy shallow-copy semantics of LegacyInputIterator) to an implementation object, which holds:

  * a container (such as std::vector) of non-recursive directory_iterators that forms the recursion stack
  * the recursion depth counter (accessible with depth())
  * the directory options used at construction (accessible with options())
  * the pending recursion flag (accessible with recursion_pending(), may be combined with the directory options to save space)


.SH Example

  
// Run this code

    #include <fstream>
    #include <iostream>
    #include <experimental/filesystem>
    namespace fs = std::experimental::filesystem;

    int main()
    {
        fs::create_directories("sandbox/a/b");
        std::ofstream("sandbox/file1.txt");
        fs::create_symlink("a", "sandbox/syma");
        for(auto& p: fs::recursive_directory_iterator("sandbox"))
            std::cout << p << '\\n';
        fs::remove_all("sandbox");
    }

.SH Possible output:

    "sandbox/a"
    "sandbox/a/b"
    "sandbox/file1.txt"
    "sandbox/syma"


.SH See also


                     an iterator to the contents of the directory
  directory_iterator \fI(class)\fP
                     a directory entry
  directory_entry    \fI(class)\fP
                     options for iterating directory contents
  directory_options  \fI(enum)\fP




