.TH std::sinh(std::valarray) 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::sinh(std::valarray) \- std::sinh(std::valarray)

.SH Synopsis

Defined in header <valarray>
template< class T >
valarray<T> sinh( const valarray<T>& va );

For each element in va computes hyperbolic sine of the value of the element.

.SH Parameters


va - value array to apply the operation to


.SH Return value

Value array containing hyperbolic sine of the values in va.

.SH Notes

Unqualified function (sinh) is used to perform the computation. If such function is not available, std::sinh is used due to argument dependent lookup.
The function can be implemented with the return type different from std::valarray. In this case, the replacement type has the following properties:


      * All const member functions of std::valarray are provided.
      * std::valarray, std::slice_array, std::gslice_array, std::mask_array and std::indirect_array can be constructed from the replacement type.
      * All functions accepting an argument of type const std::valarray&
        except begin() and end()
        \fI(since C++11)\fP should also accept the replacement type.
      * All functions accepting two arguments of type const std::valarray& should accept every combination of const std::valarray& and the replacement type.
      * The return type does not add more than two levels of template nesting over the most deeply-nested argument type.



.SH Possible implementation



  template<class T>
  valarray<T> sinh(const valarray<T>& va)
  {
      valarray<T> other = va;
      for (T &i : other) {
          i = sinh(i);
      }
      return other;
  }



.SH Example


 This section is incomplete
 Reason: no example


.SH See also


                    applies the function std::cosh to each element of valarray
cosh(std::valarray) \fI(function template)\fP
                    applies the function std::tanh to each element of valarray
tanh(std::valarray) \fI(function template)\fP

sinh
sinhf
sinhl               computes hyperbolic sine (sh(x))
                    \fI(function)\fP

\fI(C++11)\fP
\fI(C++11)\fP
                    computes hyperbolic sine of a complex number (sh(z))
sinh(std::complex)  \fI(function template)\fP




