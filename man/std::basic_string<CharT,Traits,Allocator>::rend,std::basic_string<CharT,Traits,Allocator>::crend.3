.TH std::basic_string<CharT,Traits,Allocator>::rend,std::basic_string<CharT,Traits,Allocator>::crend 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string<CharT,Traits,Allocator>::rend,std::basic_string<CharT,Traits,Allocator>::crend \- std::basic_string<CharT,Traits,Allocator>::rend,std::basic_string<CharT,Traits,Allocator>::crend

.SH Synopsis
   reverse_iterator rend();                               \fI(until C++11)\fP
   reverse_iterator rend() noexcept;                      \fI(since C++11)\fP
   const_reverse_iterator rend() const;           \fB(1)\fP                   \fI(until C++11)\fP
   const_reverse_iterator rend() const noexcept;      \fB(2)\fP               \fI(since C++11)\fP
   const_reverse_iterator crend() const noexcept;         \fB(3)\fP           \fI(since C++11)\fP

   Returns a reverse iterator to the character following the last character of the reversed string. It corresponds to the character preceding the first character of the non-reversed string. This character acts as a placeholder, attempting to access it results in undefined behavior.

   range-rbegin-rend.svg

.SH Parameters

   \fI(none)\fP

.SH Return value

   reverse iterator to the character following the last character

.SH Complexity

   Constant

.SH Example

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <iterator>
 #include <string>

 int main()
 {
   std::string s("A man, a plan, a canal: Panama");
   {
     std::string c;
     std::copy(s.rbegin(), s.rend(), std::back_inserter(c));
     std::cout << c <<'\\n'; // "amanaP :lanac a ,nalp a ,nam A"
   }

   {
     std::string c;
     std::copy(s.crbegin(), s.crend(), std::back_inserter(c));
     std::cout << c <<'\\n'; // "amanaP :lanac a ,nalp a ,nam A"
   }
 }

.SH Output:

 amanaP :lanac a ,nalp a ,nam A
 amanaP :lanac a ,nalp a ,nam A

.SH See also

   rbegin  returns a reverse iterator to the beginning
   crbegin \fI(public member function)\fP
   \fI(C++11)\fP
