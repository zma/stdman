.TH std::is_bounded_array 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_bounded_array \- std::is_bounded_array

.SH Synopsis

  Defined in header <type_traits>
  template< class T >              \fI(since C++20)\fP
  struct is_bounded_array;

  Checks whether T is an array type of known bound. Provides the member constant value which is equal to true, if T is an array type of known bound. Otherwise, value is equal to false.

.SH Template parameters


  T - a type to check


  Helper variable template


  template< class T >                                                     \fI(since C++20)\fP
  inline constexpr bool is_bounded_array_v = is_bounded_array<T>::value;


  Inherited from std::integral_constant


.SH Member constants



  value    true if T is an array type of known bound , false otherwise
           \fI(public static member constant)\fP
  \fB[static]\fP


.SH Member functions


                converts the object to bool, returns value
  operator bool \fI(public member function)\fP

  operator()    returns value
                \fI(public member function)\fP
  \fI(C++14)\fP


.SH Member types


  Type       Definition
  value_type bool
  type       std::integral_constant<bool, value>


.SH Possible implementation



    template<class T>
    struct is_bounded_array: std::false_type {};

    template<class T, std::size_t N>
    struct is_bounded_array<T[N]> : std::true_type {};



.SH Example

  
// Run this code

    #include <iostream>
    #include <type_traits>

    class A {};

    int main()
    {
        std::cout << std::boolalpha;
        std::cout << std::is_bounded_array_v<A> << '\\n';
        std::cout << std::is_bounded_array_v<A[]> << '\\n';
        std::cout << std::is_bounded_array_v<A[3]> << '\\n';
        std::cout << std::is_bounded_array_v<float> << '\\n';
        std::cout << std::is_bounded_array_v<int> << '\\n';
        std::cout << std::is_bounded_array_v<int[]> << '\\n';
        std::cout << std::is_bounded_array_v<int[3]> << '\\n';
    }

.SH Output:

    false
    false
    true
    false
    false
    false
    true


.SH See also



  is_array           checks if a type is an array type
                     \fI(class template)\fP
  \fI(C++11)\fP

  is_unbounded_array checks if a type is an array type of unknown bound
                     \fI(class template)\fP
  (C++20)

  extent             obtains the size of an array type along a specified dimension
                     \fI(class template)\fP
  \fI(C++11)\fP




