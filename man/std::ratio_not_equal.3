.TH std::ratio_not_equal 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ratio_not_equal \- std::ratio_not_equal

.SH Synopsis

  Defined in header <ratio>
  template< class R1, class R2 >                    \fI(since C++11)\fP
  struct ratio_not_equal : std::integral_constant;

  If the ratios R1 and R2 are not equal, provides the member constant value equal true. Otherwise, value is false.

  Helper variable template


  template< class R1, class R2 >                                             \fI(since C++17)\fP
  inline constexpr bool ratio_not_equal_v = ratio_not_equal<R1, R2>::value;


  Inherited from std::integral_constant


.SH Member constants



  value    true if R1::num != R2::num || R1::den != R2::den , false otherwise
           \fI(public static member constant)\fP
  \fB[static]\fP


.SH Member functions


                converts the object to bool, returns value
  operator bool \fI(public member function)\fP

  operator()    returns value
                \fI(public member function)\fP
  \fI(C++14)\fP


.SH Member types


  Type       Definition
  value_type bool
  type       std::integral_constant<bool, value>


.SH Possible implementation



    template< class R1, class R2 >
    struct ratio_not_equal : std::integral_constant <
                                  bool,
                                  !std::ratio_equal<R1, R2>
                             > {};



.SH Example

  
// Run this code

    #include <iostream>
    #include <ratio>

    int main()
    {
        if(std::ratio_not_equal<std::ratio<2,3>, std::ratio<1,3>>::value) {
            std::cout << "2/3 != 1/3\\n";
        } else {
            std::cout << "2/3 == 1/3\\n";
        }
    }

.SH Output:

    2/3 != 1/3


.SH See also






