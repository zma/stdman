.TH std::ranges::less_equal 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::less_equal \- std::ranges::less_equal

.SH Synopsis

  Defined in header <functional>
  struct less_equal;              \fI(since C++20)\fP

  Function object for performing comparisons. Deduces the parameter types of the function call operator from the arguments (but not the return type).

.SH Member types


  Member type    Definition
  is_transparent /* unspecified */


.SH Member functions


             checks if the first argument is less than or equal to the second
  operator() \fI(public member function)\fP


  std::ranges::less_equal::operator()


  template< class T, class U >
  requires StrictTotallyOrderedWith<T, U> ||
  /* std::declval<T>() < std::declval<U>() resolves to
  a built-in operator comparing pointers */
  constexpr bool operator()(T&& t, U&& u) const;

  Compares t and u. Equivalent to return !ranges::less{}(std::forward<U>(u), std::forward<T>(t));.

.SH Notes

  Unlike std::less_equal, std::ranges::less_equal requires all six comparison operators <, <=, >, >=, == and != to be valid (via the StrictTotallyOrderedWith constraint) and is entirely defined in terms of std::ranges::less. However, the implementation is free to use operator<= directly, because those concepts require the results of the comparison operators to be consistent.

.SH Example


   This section is incomplete
   Reason: no example


.SH See also


             function object implementing x <= y
  less_equal \fI(class template)\fP




