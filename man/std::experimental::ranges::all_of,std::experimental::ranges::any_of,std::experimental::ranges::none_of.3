.TH std::experimental::ranges::all_of,std::experimental::ranges::any_of,std::experimental::ranges::none_of 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::ranges::all_of,std::experimental::ranges::any_of,std::experimental::ranges::none_of \- std::experimental::ranges::all_of,std::experimental::ranges::any_of,std::experimental::ranges::none_of

.SH Synopsis

Defined in header <experimental/ranges/algorithm>
template< InputIterator I, Sentinel<I> S, class Proj = ranges::identity,
IndirectUnaryPredicate<projected<I, Proj>> Pred >                        \fB(1)\fP (ranges TS)
bool all_of( I first, S last, Pred pred, Proj proj = Proj{} );
template< InputRange R, class Proj = ranges::identity,
IndirectUnaryPredicate<projected<ranges::iterator_t<R>, Proj>> Pred >    \fB(2)\fP (ranges TS)
bool all_of( R&& r, Pred pred, Proj proj = Proj{} );
template< InputIterator I, Sentinel<I> S, class Proj = ranges::identity,
IndirectUnaryPredicate<projected<I, Proj>> Pred >                        \fB(3)\fP (ranges TS)
bool any_of( I first, S last, Pred pred, Proj proj = Proj{} );
template< InputRange R, class Proj = ranges::identity,
IndirectUnaryPredicate<projected<ranges::iterator_t<R>, Proj>> Pred >    \fB(4)\fP (ranges TS)
bool any_of( R&& r, Pred pred, Proj proj = Proj{} );
template< InputIterator I, Sentinel<I> S, class Proj = identity,
IndirectUnaryPredicate<projected<I, Proj>> Pred >                        \fB(5)\fP (ranges TS)
bool none_of( I first, S last, Pred pred, Proj proj = Proj{} );
template< InputRange R, class Proj = ranges::identity,
IndirectUnaryPredicate<projected<ranges::iterator_t<R>, Proj>> Pred >    \fB(6)\fP (ranges TS)
bool none_of( R&& r, Pred pred, Proj proj = Proj{} );

1) Checks if unary predicate pred returns true for all elements in the range [first, last).
3) Checks if unary predicate pred returns true for at least one element in the range [first, last).
5) Checks if unary predicate pred returns true for no elements in the range [first, last).
2,4,6) Same as (1,3,5), but uses r as the source range, as if using ranges::begin(r) as first and ranges::end(r) as last.
Notwithstanding the declarations depicted above, the actual number and order of template parameters for algorithm declarations is unspecified. Thus, if explicit template arguments are used when calling an algorithm, the program is probably non-portable.

.SH Parameters


first, last - the range of the elements to examine
r           - the range of the elements to examine
pred        - predicate to apply to the projected elements
proj        - projection to apply to the elements


.SH Return value

1-2) true if pred returns true for all elements in the range, false otherwise. Returns true if the range is empty.
3-4) true if pred returns true for at least one element in the range, false otherwise. Returns false if the range is empty.
5-6) true if pred returns true for no elements in the range, false otherwise. Returns true if the range is empty.

.SH Complexity

1-6) At most last - first applications of the predicate and last - first applications of the projection.

.SH Possible implementation


.SH First version

  template< InputIterator I, Sentinel<I> S, class Proj = ranges::identity,
            IndirectUnaryPredicate<projected<I, Proj>> Pred >
  bool all_of( I first, S last, Pred pred, Proj proj = Proj{} )
  {
     return ranges::find_if_not(first, last, std::ref(pred), std::ref(proj)) == last;
  }

  template< InputRange R, class Proj = ranges::identity,
            IndirectUnaryPredicate<projected<ranges::iterator_t<R>, Proj>> Pred >
  bool all_of( R&& r, Pred pred, Proj proj = Proj{} )
  {
     return ranges::all_of(ranges::begin(r), ranges::end(r), std::ref(pred), std::ref(proj));
  }

.SH Second version

  template< InputIterator I, Sentinel<I> S, class Proj = ranges::identity,
            IndirectUnaryPredicate<projected<I, Proj>> Pred >
  bool any_of( I first, S last, Pred pred, Proj proj = Proj{} )
  {
     return ranges::find_if(first, last, std::ref(pred), std::ref(proj)) != last;
  }

  template< InputRange R, class Proj = ranges::identity,
           IndirectUnaryPredicate<projected<ranges::iterator_t<R>, Proj>> Pred >
  bool any_of( R&& r, Pred pred, Proj proj = Proj{} )
  {
     return ranges::any_of(ranges::begin(r), ranges::end(r), std::ref(pred), std::ref(proj));
  }

Third version

  template< InputIterator I, Sentinel<I> S, class Proj = identity,
            IndirectUnaryPredicate<projected<I, Proj>> Pred >
  bool none_of( I first, S last, Pred pred, Proj proj = Proj{} )
  {
     return ranges::find_if(first, last, std::ref(pred), std::ref(proj)) == last;
  }

  template< InputRange R, class Proj = ranges::identity,
            IndirectUnaryPredicate<projected<ranges::iterator_t<R>, Proj>> Pred >
  bool none_of( R&& r, Pred pred, Proj proj = Proj{} )
  {
     return ranges::none_of(ranges::begin(r), ranges::end(r), std::ref(pred), std::ref(proj));
  }



.SH Example


// Run this code

  #include <vector>
  #include <numeric>
  #include <experimental/ranges/algorithm>
  #include <experimental/ranges/iterator>
  #include <iterator>
  #include <iostream>
  #include <functional>

  namespace ranges = std::experimental::ranges;

  int main()
  {
      std::vector<int> v(10, 2);
      std::partial_sum(v.cbegin(), v.cend(), v.begin());
      std::cout << "Among the numbers: ";
      ranges::copy(v, ranges::ostream_iterator<int>(std::cout, " "));
      std::cout << '\\n';

      if (ranges::all_of(v.cbegin(), v.cend(), [](int i){ return i % 2 == 0; })) {
          std::cout << "All numbers are even\\n";
      }
      if (ranges::none_of(v, std::bind(std::modulus<int>(), std::placeholders::_1, 2))) {
          std::cout << "None of them are odd\\n";
      }
      struct DivisibleBy
      {
          const int d;
          DivisibleBy(int n) : d(n) {}
          bool operator()(int n) const { return n % d == 0; }
      };

      if (ranges::any_of(v, DivisibleBy(7))) {
          std::cout << "At least one number is divisible by 7\\n";
      }
  }

.SH Output:

  Among the numbers: 2 4 6 8 10 12 14 16 18 20
  All numbers are even
  None of them are odd
  At least one number is divisible by 7


.SH See also



all_of
any_of
none_of checks if a predicate is true for all, any or none of the elements in a range
        \fI(function template)\fP
\fI(C++11)\fP
\fI(C++11)\fP
\fI(C++11)\fP




