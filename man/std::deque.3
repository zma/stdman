.TH std::deque 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::deque \- std::deque

.SH Synopsis

Defined in header <deque>
template<
class T,                                                         \fB(1)\fP
class Allocator = std::allocator<T>
> class deque;
namespace pmr {
template <class T>                                               \fB(2)\fP \fI(since C++17)\fP
using deque = std::deque<T, std::pmr::polymorphic_allocator<T>>;
}

std::deque (double-ended queue) is an indexed sequence container that allows fast insertion and deletion at both its beginning and its end. In addition, insertion and deletion at either end of a deque never invalidates pointers or references to the rest of the elements.
As opposed to std::vector, the elements of a deque are not stored contiguously: typical implementations use a sequence of individually allocated fixed-size arrays, with additional bookkeeping, which means indexed access to deque must perform two pointer dereferences, compared to vector's indexed access which performs only one.
The storage of a deque is automatically expanded and contracted as needed. Expansion of a deque is cheaper than the expansion of a std::vector because it does not involve copying of the existing elements to a new memory location. On the other hand, deques typically have large minimal memory cost; a deque holding just one element has to allocate its full internal array (e.g. 8 times the object size on 64-bit libstdc++; 16 times the object size or 4096 bytes, whichever is larger, on 64-bit libc++).
The complexity (efficiency) of common operations on deques is as follows:

* Random access - constant O(1)
* Insertion or removal of elements at the end or beginning - constant O(1)
* Insertion or removal of elements - linear O(n)

std::deque meets the requirements of Container, AllocatorAwareContainer, SequenceContainer and ReversibleContainer.

.SH Template parameters


            The type of the elements.

T         - T must meet the requirements of CopyAssignable and CopyConstructible.                                                                                                                                                                                                        \fI(until C++11)\fP
            The requirements that are imposed on the elements depend on the actual operations performed on the container. Generally, it is required that element type is a complete type and meets the requirements of Erasable, but many member functions impose stricter requirements. \fI(since C++11)\fP

Allocator - An allocator that is used to acquire/release memory and to construct/destroy the elements in that memory. The type must meet the requirements of Allocator. The behavior is undefined if Allocator::value_type is not the same as T.


Iterator invalidation


 This section is incomplete

There are still a few inaccuracies in this section, refer to individual member function pages for more detail

Operations                                                                                Invalidated
All read only operations                                                                  Never
swap, std::swap                                                                           The past-the-end iterator may be invalidated (implementation defined)
shrink_to_fit, clear, insert, emplace, push_front, push_back, emplace_front, emplace_back Always
                                                                                          If erasing at begin - only erased elements
erase                                                                                     If erasing at end - only erased elements and the past-the-end iterator
                                                                                          Otherwise - all iterators are invalidated (including the past-the-end iterator).
                                                                                          If the new size is smaller than the old one : only erased elements and the past-the-end iterator
resize                                                                                    If the new size is bigger than the old one : all iterators are invalidated
                                                                                          Otherwise - none iterators are invalidated.
pop_front                                                                                 Only to the element erased
pop_back                                                                                  Only to the element erased and the past-the-end iterator


Invalidation notes


* When inserting at either end of the deque, references are not invalidated by insert and emplace.
* push_front, push_back, emplace_front and emplace_back do not invalidate any references to elements of the deque.
* When erasing at either end of the deque, references to non-erased elements are not invalidated by erase, pop_front and pop_back.
* A call to resize with a smaller size does not invalidate any references to non-erased elements.
* A call to resize with a bigger size does not invalidate any references to elements of the deque.


.SH Member types


Member type            Definition
value_type             T
allocator_type         Allocator
size_type              Unsigned integer type (usually std::size_t)
difference_type        Signed integer type (usually std::ptrdiff_t)

reference              Allocator::reference \fI(until C++11)\fP
                       value_type&          \fI(since C++11)\fP


const_reference        Allocator::const_reference \fI(until C++11)\fP
                       const value_type&          \fI(since C++11)\fP


pointer                Allocator::pointer                        \fI(until C++11)\fP
                       std::allocator_traits<Allocator>::pointer \fI(since C++11)\fP


const_pointer          Allocator::const_pointer                        \fI(until C++11)\fP
                       std::allocator_traits<Allocator>::const_pointer \fI(since C++11)\fP

iterator               LegacyRandomAccessIterator
const_iterator         Constant LegacyRandomAccessIterator
reverse_iterator       std::reverse_iterator<iterator>
const_reverse_iterator std::reverse_iterator<const_iterator>


.SH Member functions


              constructs the deque
constructor   \fI(public member function)\fP
              destructs the deque
destructor    \fI(public member function)\fP
              assigns values to the container
operator=     \fI(public member function)\fP
              assigns values to the container
assign        \fI(public member function)\fP
              returns the associated allocator
get_allocator \fI(public member function)\fP

.SH Element access

              access specified element with bounds checking
at            \fI(public member function)\fP
              access specified element
operator[]    \fI(public member function)\fP
              access the first element
front         \fI(public member function)\fP
              access the last element
back          \fI(public member function)\fP

.SH Iterators


begin         returns an iterator to the beginning
cbegin        \fI(public member function)\fP



end_          returns an iterator to the end
cend          \fI(public member function)\fP



rbegin        returns a reverse iterator to the beginning
crbegin       \fI(public member function)\fP



rend          returns a reverse iterator to the end
crend         \fI(public member function)\fP



.SH Capacity

              checks whether the container is empty
empty         \fI(public member function)\fP
              returns the number of elements
size          \fI(public member function)\fP
              returns the maximum possible number of elements
max_size      \fI(public member function)\fP

shrink_to_fit reduces memory usage by freeing unused memory
              \fI(public member function)\fP
\fI(C++11)\fP

.SH Modifiers

              clears the contents
clear         \fI(public member function)\fP
              inserts elements
insert        \fI(public member function)\fP

emplace       constructs element in-place
              \fI(public member function)\fP
\fI(C++11)\fP
              erases elements
erase         \fI(public member function)\fP
              adds an element to the end
push_back     \fI(public member function)\fP

emplace_back  constructs an element in-place at the end
              \fI(public member function)\fP
\fI(C++11)\fP
              removes the last element
pop_back      \fI(public member function)\fP
              inserts an element to the beginning
push_front    \fI(public member function)\fP

emplace_front constructs an element in-place at the beginning
              \fI(public member function)\fP
\fI(C++11)\fP
              removes the first element
pop_front     \fI(public member function)\fP
              changes the number of elements stored
resize        \fI(public member function)\fP
              swaps the contents
swap          \fI(public member function)\fP


.SH Non-member functions



operator==
operator!=            lexicographically compares the values in the deque
operator<             \fI(function template)\fP
operator<=
operator>
operator>=
                      specializes the std::swap algorithm
std::swap(std::deque) \fI(function template)\fP

erase(std::deque)     Erases all elements satisfying specific criteria
erase_if(std::deque)  \fI(function template)\fP

(C++20)


Deduction_guides\fI(since C++17)\fP


.SH Example


// Run this code

  #include <iostream>
  #include <deque>

  int main()
  {
      // Create a deque containing integers
      std::deque<int> d = {7, 5, 16, 8};

      // Add an integer to the beginning and end of the deque
      d.push_front(13);
      d.push_back(25);

      // Iterate and print values of deque
      for(int n : d) {
          std::cout << n << '\\n';
      }
  }

.SH Output:

  13
  7
  5
  16
  8
  25




