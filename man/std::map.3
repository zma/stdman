.TH std::map 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::map \- std::map

.SH Synopsis

  Defined in header <map>
  template<
  class Key,
  class T,                                                      \fB(1)\fP
  class Compare = std::less<Key>,
  class Allocator = std::allocator<std::pair<const Key, T> >
  > class map;
  namespace pmr {
  template <class Key, class T, class Compare = std::less<Key>>
  using map = std::map<Key, T, Compare,                         \fB(2)\fP \fI(since C++17)\fP
  std::pmr::polymorphic_allocator<std::pair<const Key,T>>>
  }

  std::map is a sorted associative container that contains key-value pairs with unique keys. Keys are sorted by using the comparison function Compare. Search, removal, and insertion operations have logarithmic complexity. Maps are usually implemented as red-black_trees.
  Everywhere the standard library uses the Compare requirements, uniqueness is determined by using the equivalence relation. In imprecise terms, two objects a and b are considered equivalent (not unique) if neither compares less than the other: !comp(a, b) && !comp(b, a).
  std::map meets the requirements of Container, AllocatorAwareContainer, AssociativeContainer and ReversibleContainer.

.SH Member types


  Member type                     Definition
  key_type                        Key
  mapped_type                     T
  value_type                      std::pair<const Key, T>
  size_type                       Unsigned integer type (usually std::size_t)
  difference_type                 Signed integer type (usually std::ptrdiff_t)
  key_compare                     Compare
  allocator_type                  Allocator

  reference                       Allocator::reference \fI(until C++11)\fP
                                  value_type&          \fI(since C++11)\fP


  const_reference                 Allocator::const_reference \fI(until C++11)\fP
                                  const value_type&          \fI(since C++11)\fP


  pointer                         Allocator::pointer                        \fI(until C++11)\fP
                                  std::allocator_traits<Allocator>::pointer \fI(since C++11)\fP


  const_pointer                   Allocator::const_pointer                        \fI(until C++11)\fP
                                  std::allocator_traits<Allocator>::const_pointer \fI(since C++11)\fP

  iterator                        LegacyBidirectionalIterator
  const_iterator                  Constant LegacyBidirectionalIterator
  reverse_iterator                std::reverse_iterator<iterator>
  const_reverse_iterator          std::reverse_iterator<const_iterator>
  node_type\fI(since C++17)\fP          a specialization of node_handle representing a container node
                                  type describing the result of inserting a node_type, a specialization of

                                    template <class Iter, class NodeType> struct /*unspecified*/ {
                                        Iter     position;
  insert_return_type\fI(since C++17)\fP       bool     inserted;
                                        NodeType node;
                                    };

                                  instantiated with template arguments iterator and node_type.


.SH Member classes


                compares objects of type value_type
  value_compare \fI(class)\fP


.SH Member functions


                   constructs the map
  constructor      \fI(public member function)\fP
                   destructs the map
  destructor       \fI(public member function)\fP
                   assigns values to the container
  operator=        \fI(public member function)\fP
                   returns the associated allocator
  get_allocator    \fI(public member function)\fP

.SH Element access


  at               access specified element with bounds checking
                   \fI(public member function)\fP
  \fI(C++11)\fP
                   access or insert specified element
  operator[]       \fI(public member function)\fP

.SH Iterators


  begin            returns an iterator to the beginning
  cbegin           \fI(public member function)\fP



  end_             returns an iterator to the end
  cend             \fI(public member function)\fP



  rbegin           returns a reverse iterator to the beginning
  crbegin          \fI(public member function)\fP



  rend             returns a reverse iterator to the end
  crend            \fI(public member function)\fP



.SH Capacity

                   checks whether the container is empty
  empty            \fI(public member function)\fP
                   returns the number of elements
  size             \fI(public member function)\fP
                   returns the maximum possible number of elements
  max_size         \fI(public member function)\fP

.SH Modifiers

                   clears the contents
  clear            \fI(public member function)\fP
                   inserts elements
                   or nodes
  insert           \fI(since C++17)\fP
                   \fI(public member function)\fP

  insert_or_assign inserts an element or assigns to the current element if the key already exists
                   \fI(public member function)\fP
  \fI(C++17)\fP

  emplace          constructs element in-place
                   \fI(public member function)\fP
  \fI(C++11)\fP

  emplace_hint     constructs elements in-place using a hint
                   \fI(public member function)\fP
  \fI(C++11)\fP

  try_emplace      inserts in-place if the key does not exist, does nothing if the key exists
                   \fI(public member function)\fP
  \fI(C++17)\fP
                   erases elements
  erase            \fI(public member function)\fP
                   swaps the contents
  swap             \fI(public member function)\fP

  extract          extracts nodes from the container
                   \fI(public member function)\fP
  \fI(C++17)\fP

  merge            splices nodes from another container
                   \fI(public member function)\fP
  \fI(C++17)\fP

.SH Lookup

                   returns the number of elements matching specific key
  count            \fI(public member function)\fP
                   finds element with specific key
  find             \fI(public member function)\fP

  contains         checks if the container contains element with specific key
                   \fI(public member function)\fP
  (C++20)
                   returns range of elements matching a specific key
  equal_range      \fI(public member function)\fP
                   returns an iterator to the first element not less than the given key
  lower_bound      \fI(public member function)\fP
                   returns an iterator to the first element greater than the given key
  upper_bound      \fI(public member function)\fP

.SH Observers

                   returns the function that compares keys
  key_comp         \fI(public member function)\fP
                   returns the function that compares keys in objects of type value_type
  value_comp       \fI(public member function)\fP


.SH Non-member functions



  operator==
  operator!=          lexicographically compares the values in the map
  operator<           \fI(function template)\fP
  operator<=
  operator>
  operator>=
                      specializes the std::swap algorithm
  std::swap(std::map) \fI(function template)\fP

  erase_if(std::map)  Erases all elements satisfying specific criteria
                      \fI(function template)\fP
  (C++20)


  Deduction_guides\fI(since C++17)\fP




