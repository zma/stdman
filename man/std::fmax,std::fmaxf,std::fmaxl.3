.TH std::fmax,std::fmaxf,std::fmaxl 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::fmax,std::fmaxf,std::fmaxl \- std::fmax,std::fmaxf,std::fmaxl

.SH Synopsis

Defined in header <cmath>
float fmax ( float x, float y );                   \fB(1)\fP \fI(since C++11)\fP
float fmaxf( float x, float y );
double fmax ( double x, double y );                \fB(2)\fP \fI(since C++11)\fP
long double fmax ( long double x, long double y ); \fB(3)\fP \fI(since C++11)\fP
long double fmaxl( long double x, long double y );
Promoted fmax ( Arithmetic1 x, Arithmetic2 y );    \fB(4)\fP \fI(since C++11)\fP

1-3) Returns the larger of two floating point arguments, treating NaNs as missing data (between a NaN and a numeric value, the numeric value is chosen)
4) A set of overloads or a function template for all combinations of arguments of arithmetic_type not covered by 1-3). If any argument has integral_type, it is cast to double. If any other argument is long double, then the return type is long double, otherwise it is double.

.SH Parameters


x, y - values of floating-point or integral_types


.SH Return value

If successful, returns the larger of two floating point values. The value returned is exact and does not depend on any rounding modes.

.SH Error handling

This function is not subject to any of the error conditions specified in math_errhandling.
If the implementation supports IEEE floating-point arithmetic (IEC 60559),

* If one of the two arguments is NaN, the value of the other argument is returned
* Only if both arguments are NaN, NaN is returned


.SH Notes

This function is not required to be sensitive to the sign of zero, although some implementations additionally enforce that if one argument is +0 and the other is -0, then +0 is returned.

.SH Example


// Run this code

  #include <iostream>
  #include <cmath>

  int main()
  {
      std::cout << "fmax(2,1)    = " << std::fmax(2,1) << '\\n'
                << "fmax(-Inf,0) = " << std::fmax(-INFINITY,0) << '\\n'
                << "fmax(NaN,-1) = " << std::fmax(NAN,-1) << '\\n';
  }

.SH Output:

  fmax(2,1)    = 2
  fmax(-Inf,0) = 0
  fmax(NaN,-1) = -1


.SH See also



isgreater      checks if the first floating-point argument is greater than the second
               \fI(function)\fP
\fI(C++11)\fP

fmin
fminf
fminl          smaller of two floating point values
               \fI(function)\fP
\fI(C++11)\fP
\fI(C++11)\fP
\fI(C++11)\fP
               returns the greater of the given values
max            \fI(function template)\fP
               returns the largest element in a range
max_element    \fI(function template)\fP

minmax         returns the smaller and larger of two elements
               \fI(function template)\fP
\fI(C++11)\fP

minmax_element returns the smallest and the largest elements in a range
               \fI(function template)\fP
\fI(C++11)\fP




