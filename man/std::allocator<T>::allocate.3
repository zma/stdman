.TH std::allocator<T>::allocate 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::allocator<T>::allocate \- std::allocator<T>::allocate

.SH Synopsis

  pointer allocate( size_type n, const void * hint = 0 ); \fB(1)\fP \fI(until C++17)\fP
                                                              \fI(since C++17)\fP
  T* allocate( std::size_t n, const void * hint);         \fB(1)\fP \fB(deprecated)\fP
                                                              (removed in C++20)
  T* allocate( std::size_t n );                                                  \fI(since C++17)\fP
                                                          \fB(2)\fP                    \fI(until C++20)\fP
  [[nodiscard]] T* allocate( std::size_t n );                                    \fI(since C++20)\fP

  Allocates n * sizeof(T) bytes of uninitialized storage by calling ::operator_new(std::size_t)
  or ::operator_new(std::size_t, std::align_val_t)
  \fI(since C++17)\fP, but it is unspecified when and how this function is called. The pointer hint may be used to provide locality of reference: the allocator, if supported by the implementation, will attempt to allocate the new memory block as close as possible to hint.

.SH Parameters


  n    - the number of objects to allocate storage for
  hint - pointer to a nearby memory location


.SH Return value

  Pointer to the first byte of a memory block suitably aligned and sufficient to hold an array of n objects of type T.

.SH Exceptions

  Throws std::bad_alloc if allocation fails.

.SH Notes

  The "unspecified when and how" wording makes it possible to combine_or_optimize_away_heap_allocations made by the standard library containers, even though such optimizations are disallowed for direct calls to ::operator new. For example, this is implemented by libc++ ([1] and [2])

.SH See also



  allocate allocates uninitialized storage using the allocator
           \fI(public static member function of std::allocator_traits<Alloc>)\fP
  \fB[static]\fP




