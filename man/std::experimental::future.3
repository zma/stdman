.TH std::experimental::future 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::future \- std::experimental::future

.SH Synopsis

Defined in header <experimental/future>
template< class T > class future;       \fB(1)\fP (concurrency TS)
template< class T > class future<T&>;   \fB(2)\fP (concurrency TS)
template<> class future<void>;          \fB(3)\fP (concurrency TS)

The class template std::experimental::future extends std::future with the following operations:

* an unwrapping constructor from future<future<T>>;
* a member function is_ready to query whether the associated shared state is ready; and
* a member function then to attach a continuation to the future.

However, there is no interoperation between std::experimental::future and std::future.

.SH Member functions


              construct a future object
constructor   \fI(public member function)\fP
              checks if the shared state is ready
is_ready      \fI(public member function)\fP
              attaches a continuation to a future
then          \fI(public member function)\fP
              moves the future object
operator=     \fI(public member function)\fP



Members identical to std::future


.SH Member functions

Note that share() returns a std::experimental::shared_future<T>. The behavior is otherwise identical.

             destructs the future object
destructor   \fI(public member function of std::future<T>)\fP
             transfers the shared state from *this to a shared_future and returns it
share        \fI(public member function of std::future<T>)\fP

.SH Getting the result

             returns the result
get          \fI(public member function of std::future<T>)\fP

.SH State

             checks if the future has a shared state
valid        \fI(public member function of std::future<T>)\fP
             waits for the result to become available
wait         \fI(public member function of std::future<T>)\fP
             waits for the result, returns if it is not available for the specified timeout duration
wait_for     \fI(public member function of std::future<T>)\fP
             waits for the result, returns if it is not available until specified time point has been reached
wait_until   \fI(public member function of std::future<T>)\fP


.SH Example


 This section is incomplete
 Reason: no example


.SH See also



shared_future    A version of std::shared_future enhanced with continuations and other features
                 \fI(class template)\fP
(concurrency TS)




