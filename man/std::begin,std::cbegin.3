.TH std::begin,std::cbegin 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::begin,std::cbegin \- std::begin,std::cbegin

.SH Synopsis

Defined in header <iterator>
template< class C >                                                   \fI(since C++11)\fP
auto begin( C& c ) -> decltype(c.begin());                            \fI(until C++17)\fP
template< class C >                                                   \fI(since C++17)\fP
constexpr auto begin( C& c ) -> decltype(c.begin());
template< class C >                                                                  \fI(since C++11)\fP
auto begin( const C& c ) -> decltype(c.begin());                                     \fI(until C++17)\fP
template< class C >                                                                  \fI(since C++17)\fP
constexpr auto begin( const C& c ) -> decltype(c.begin());    \fB(1)\fP
template< class T, std::size_t N >                                                                  \fI(since C++11)\fP
T* begin( T (&array)[N] );                                        \fB(1)\fP                               \fI(until C++14)\fP
template< class T, std::size_t N >                                                                  \fI(since C++14)\fP
constexpr T* begin( T (&array)[N] ) noexcept;                         \fB(2)\fP
template< class C >
constexpr auto cbegin( const C& c ) noexcept(/* see below */)                        \fB(3)\fP            \fI(since C++14)\fP
-> decltype(std::begin(c));

Returns an iterator to the beginning of the given container c or array array. These templates rely on C::begin() having a reasonable implementation.
1) Returns exactly c.begin(), which is typically an iterator to the beginning of the sequence represented by c. If C is a standard Container, this returns C::iterator when c is not const-qualified, and C::const_iterator otherwise.
2) Returns a pointer to the beginning of the array.
3) Returns exactly std::begin(c), with c always treated as const-qualified. If C is a standard Container, this always returns C::const_iterator.
 range-begin-end.svg

 This section is incomplete
 Reason: an explanation why cbegin was introduced


.SH Parameters


c     - a container with a begin method
array - an array of arbitrary type


.SH Return value

An iterator to the beginning of c or array

.SH Exceptions

3)
noexcept specification:
noexcept(noexcept(std::begin(c)))

.SH Notes

In addition to being included in <iterator>, std::begin and std::cbegin are guaranteed to become available if any of the following headers are included: <array>, <deque>, <forward_list>, <list>, <map>, <regex>, <set>
, <span>
\fI(since C++20)\fP, <string>
, <string_view>
\fI(since C++17)\fP, <unordered_map>, <unordered_set>, and <vector>.

User-defined overloads

Custom overloads of begin may be provided for classes that do not expose a suitable begin() member function, yet can be iterated. The following overloads are already provided by the standard library:


std::begin(std::initializer_list)                    specializes std::begin
                                                     \fI(function template)\fP
\fI(C++11)\fP

std::begin(std::valarray)                            specializes std::begin
                                                     \fI(function template)\fP
\fI(C++11)\fP
                                                     range-based for loop support
begin(std::filesystem::directory_iterator)           \fI(function)\fP
end(std::filesystem::directory_iterator)
                                                     range-based for loop support
begin(std::filesystem::recursive_directory_iterator) \fI(function)\fP
end(std::filesystem::recursive_directory_iterator)

Similar to the use of swap (described in Swappable), typical use of the begin function in generic context is an equivalent of using std::begin; begin(arg);, which allows both the ADL-selected overloads for user-defined types and the standard library function templates to appear in the same overload set.

  template<typename Container, typename Function>
  void for_each(Container&& cont, Function f) {
      using std::begin;
      auto it = begin(cont);
      using std::end;
      auto end_it = end(cont);
      while (it != end_it) {
          f(*it);
          ++it;
      }
  }


.SH Example


// Run this code

  #include <iostream>
  #include <vector>
  #include <iterator>

  int main()
  {
      std::vector<int> v = { 3, 1, 4 };
      auto vi = std::begin(v);
      std::cout << *vi << '\\n';

      int a[] = { -5, 10, 15 };
      auto ai = std::begin(a);
      std::cout << *ai << '\\n';
  }

.SH Output:

  3
  -5


.SH See also



end
cend    returns an iterator to the end of a container or array
        \fI(function template)\fP
\fI(C++11)\fP
\fI(C++14)\fP




