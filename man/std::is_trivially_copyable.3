.TH std::is_trivially_copyable 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_trivially_copyable \- std::is_trivially_copyable

.SH Synopsis

  Defined in header <type_traits>
  template< class T >              \fI(since C++11)\fP
  struct is_trivially_copyable;

  If T is a TriviallyCopyable type, provides the member constant value equal true. For any other type, value is false.
  The only trivially copyable types are scalar types, trivially copyable classes, and arrays of such types/classes (possibly const-qualified, but not volatile-qualified).
  The behavior is undefined if std::remove_all_extents_t<T> is an incomplete type and not (possibly cv-qualified) void.

.SH Template parameters


  T - a type to check


  Helper variable template


  template< class T >                                                               \fI(since C++17)\fP
  inline constexpr bool is_trivially_copyable_v = is_trivially_copyable<T>::value;


  Inherited from std::integral_constant


.SH Member constants



  value    true if T is a trivially copyable type , false otherwise
           \fI(public static member constant)\fP
  \fB[static]\fP


.SH Member functions


                converts the object to bool, returns value
  operator bool \fI(public member function)\fP

  operator()    returns value
                \fI(public member function)\fP
  \fI(C++14)\fP


.SH Member types


  Type       Definition
  value_type bool
  type       std::integral_constant<bool, value>


.SH Notes

  Objects of trivially-copyable types are the only C++ objects that may be safely copied with std::memcpy or serialized to/from binary files with std::ofstream::write()/std::ifstream::read().
  In general, for any trivially copyable type T and an object obj1 of T, the underlying bytes of obj1 can be copied (e.g. by means of std::memcpy or std::memmove) into an array of char, unsigned char or std::byte or into obj2, a distinct object of T. Neither obj1 nor obj2 may be a potentially-overlapping subobject.
  If the underlying bytes of obj1 is copied into such an array, and then the resulting content is copied back into obj1, obj1 will hold its original value. If the underlying bytes of obj1 are copied into obj2, obj2 will hold obj1's value.

.SH Example

  
// Run this code

    #include <iostream>
    #include <type_traits>

    struct A {
        int m;
    };

    struct B {
        B(B const&) {}
    };

    struct C {
        virtual void foo();
    };

    struct D {
        int m;

        D(D const&) = default; // -> trivially copyable
        D(int x): m(x+1) {}
    };

    int main()
    {
        std::cout << std::boolalpha;
        std::cout << std::is_trivially_copyable<A>::value << '\\n';
        std::cout << std::is_trivially_copyable<B>::value << '\\n';
        std::cout << std::is_trivially_copyable<C>::value << '\\n';
        std::cout << std::is_trivially_copyable<D>::value << '\\n';
    }

.SH Output:

    true
    false
    false
    true


.SH See also



  is_trivial checks if a type is trivial
             \fI(class template)\fP
  \fI(C++11)\fP




