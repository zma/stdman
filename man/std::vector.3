.TH std::vector 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::vector \- std::vector

.SH Synopsis

  Defined in header <vector>
  template<
  class T,                                                           \fB(1)\fP
  class Allocator = std::allocator<T>
  > class vector;
  namespace pmr {
  template <class T>                                                 \fB(2)\fP \fI(since C++17)\fP
  using vector = std::vector<T, std::pmr::polymorphic_allocator<T>>;
  }

  1) std::vector is a sequence container that encapsulates dynamic size arrays.
  2) std::pmr::vector is an alias template that uses a polymorphic_allocator

  The elements are stored contiguously, which means that elements can be accessed not only through iterators, but also using offsets to regular pointers to elements. This means that a pointer to an element of a vector may be passed to any function that expects a pointer to an element of an array. (since C++03)

  The storage of the vector is handled automatically, being expanded and contracted as needed. Vectors usually occupy more space than static arrays, because more memory is allocated to handle future growth. This way a vector does not need to reallocate each time an element is inserted, but only when the additional memory is exhausted. The total amount of allocated memory can be queried using capacity() function.
  Extra memory can be returned to the system via a call to shrink_to_fit().
  \fI(since C++11)\fP
  Reallocations are usually costly operations in terms of performance. The reserve() function can be used to eliminate reallocations if the number of elements is known beforehand.
  The complexity (efficiency) of common operations on vectors is as follows:

  * Random access - constant O(1)
  * Insertion or removal of elements at the end - amortized constant O(1)
  * Insertion or removal of elements - linear in the distance to the end of the vector O(n)

  std::vector (for T other than bool) meets the requirements of Container, AllocatorAwareContainer, SequenceContainer
  , ContiguousContainer
  \fI(since C++17)\fP and ReversibleContainer.

.SH Template parameters


              The type of the elements.

              T must meet the requirements of CopyAssignable and CopyConstructible.                                                                                                                                                                                                                                                                                                                                              \fI(until C++11)\fP
  T         - The requirements that are imposed on the elements depend on the actual operations performed on the container. Generally, it is required that element type is a complete type and meets the requirements of Erasable, but many member functions impose stricter requirements.                                                                                                                                       \fI(since C++11)\fP
                                                                                                                                                                                                                                                                                                                                                                                                                                 \fI(until C++17)\fP
              The requirements that are imposed on the elements depend on the actual operations performed on the container. Generally, it is required that element type meets the requirements of Erasable, but many member functions impose stricter requirements. This container (but not its members) can be instantiated with an incomplete element type if the allocator satisfies the allocator_completeness_requirements. \fI(since C++17)\fP

  Allocator - An allocator that is used to acquire/release memory and to construct/destroy the elements in that memory. The type must meet the requirements of Allocator. The behavior is undefined if Allocator::value_type is not the same as T.


.SH Specializations

  The standard library provides a specialization of std::vector for the type bool, which may be optimized for space efficiency.

               space-efficient dynamic bitset
  vector<bool> \fI(class template specialization)\fP


  Iterator invalidation


   This section is incomplete

  There are still a few inaccuracies in this section. Refer to individual member function pages for more detail.

  Operations                                Invalidated
  All read only operations, swap, std::swap Never
  clear, operator=, assign                  Always
  reserve, shrink_to_fit                    If the vector changed capacity, all of them. If not, none.
  erase                                     Erased elements + all elements after them (including end())
  push_back, emplace_back                   If the vector changed capacity, all of them. If not, only end().
  insert, emplace, resize                   If the vector changed capacity, all of them. If not, only those after the insertion point.
  pop_back                                  The element erased and end().


.SH Member types


  Member type            Definition
  value_type             T
  allocator_type         Allocator
  size_type              Unsigned integer type (usually std::size_t)
  difference_type        Signed integer type (usually std::ptrdiff_t)

  reference              Allocator::reference \fI(until C++11)\fP
                         value_type&          \fI(since C++11)\fP


  const_reference        Allocator::const_reference \fI(until C++11)\fP
                         const value_type&          \fI(since C++11)\fP


  pointer                Allocator::pointer                        \fI(until C++11)\fP
                         std::allocator_traits<Allocator>::pointer \fI(since C++11)\fP


  const_pointer          Allocator::const_pointer                        \fI(until C++11)\fP
                         std::allocator_traits<Allocator>::const_pointer \fI(since C++11)\fP

  iterator               LegacyRandomAccessIterator
  const_iterator         Constant LegacyRandomAccessIterator
  reverse_iterator       std::reverse_iterator<iterator>
  const_reverse_iterator std::reverse_iterator<const_iterator>


.SH Member functions


                constructs the vector
  constructor   \fI(public member function)\fP
                destructs the vector
  destructor    \fI(public member function)\fP
                assigns values to the container
  operator=     \fI(public member function)\fP
                assigns values to the container
  assign        \fI(public member function)\fP
                returns the associated allocator
  get_allocator \fI(public member function)\fP

.SH Element access

                access specified element with bounds checking
  at            \fI(public member function)\fP
                access specified element
  operator[]    \fI(public member function)\fP
                access the first element
  front         \fI(public member function)\fP
                access the last element
  back          \fI(public member function)\fP

  data          direct access to the underlying array
                \fI(public member function)\fP
  \fI(C++11)\fP

.SH Iterators


  begin         returns an iterator to the beginning
  cbegin        \fI(public member function)\fP



  end_          returns an iterator to the end
  cend          \fI(public member function)\fP



  rbegin        returns a reverse iterator to the beginning
  crbegin       \fI(public member function)\fP



  rend          returns a reverse iterator to the end
  crend         \fI(public member function)\fP



.SH Capacity

                checks whether the container is empty
  empty         \fI(public member function)\fP
                returns the number of elements
  size          \fI(public member function)\fP
                returns the maximum possible number of elements
  max_size      \fI(public member function)\fP
                reserves storage
  reserve       \fI(public member function)\fP
                returns the number of elements that can be held in currently allocated storage
  capacity      \fI(public member function)\fP

  shrink_to_fit reduces memory usage by freeing unused memory
                \fI(public member function)\fP
  \fI(C++11)\fP

.SH Modifiers

                clears the contents
  clear         \fI(public member function)\fP
                inserts elements
  insert        \fI(public member function)\fP

  emplace       constructs element in-place
                \fI(public member function)\fP
  \fI(C++11)\fP
                erases elements
  erase         \fI(public member function)\fP
                adds an element to the end
  push_back     \fI(public member function)\fP

  emplace_back  constructs an element in-place at the end
                \fI(public member function)\fP
  \fI(C++11)\fP
                removes the last element
  pop_back      \fI(public member function)\fP
                changes the number of elements stored
  resize        \fI(public member function)\fP
                swaps the contents
  swap          \fI(public member function)\fP


.SH Non-member functions



  operator==
  operator!=             lexicographically compares the values in the vector
  operator<              \fI(function template)\fP
  operator<=
  operator>
  operator>=
                         specializes the std::swap algorithm
  std::swap(std::vector) \fI(function template)\fP

  erase(std::vector)     Erases all elements satisfying specific criteria
  erase_if(std::vector)  \fI(function template)\fP

  (C++20)


  Deduction_guides\fI(since C++17)\fP


.SH Example

  
// Run this code

    #include <iostream>
    #include <vector>

    int main()
    {
        // Create a vector containing integers
        std::vector<int> v = {7, 5, 16, 8};

        // Add two more integers to vector
        v.push_back(25);
        v.push_back(13);

        // Iterate and print values of vector
        for(int n : v) {
            std::cout << n << '\\n';
        }
    }

.SH Output:

    7
    5
    16
    8
    25
    13




