.TH std::filesystem::file_time_type 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::filesystem::file_time_type \- std::filesystem::file_time_type

.SH Synopsis

Defined in header <filesystem>
using file_time_type = std::chrono::time_point</*trivial-clock*/>;        \fI(since C++17)\fP
                                                                          \fI(until C++20)\fP
using file_time_type = std::chrono::time_point<std::chrono::file_clock>;  \fI(since C++20)\fP

Represents file time.

trivial-clock is an implementation-defined type that satisfies TrivialClock and is sufficient to represent the resolution and range of the file time values offered by the filesystem. \fI(until C++20)\fP


.SH Example


// Run this code

  #include <iostream>
  #include <chrono>
  #include <iomanip>
  #include <fstream>
  #include <filesystem>
  namespace fs = std::filesystem;
  using namespace std::chrono_literals;
  int main()
  {
      fs::path p = fs::current_path() / "example.bin";
      std::ofstream(p.c_str()).put('a'); // create file
      auto ftime = fs::last_write_time(p);

      // assuming system_clock for this demo
      // note: not true on MSVC or GCC 9; C++20 will allow portable output
      std::time_t cftime = decltype(ftime)::clock::to_time_t(ftime);
      std::cout << "File write time is " << std::asctime(std::localtime(&cftime)) << '\\n';

      fs::last_write_time(p, ftime + 1h); // move file write time 1 hour to the future
      ftime = fs::last_write_time(p); // read back from the filesystem

      cftime = decltype(ftime)::clock::to_time_t(ftime);
      std::cout << "File write time is " << std::asctime(std::localtime(&cftime)) << '\\n';
      fs::remove(p);
  }

.SH Possible output:

  File write time is Tue Mar 31 19:47:04 2015

  File write time is Tue Mar 31 20:47:04 2015


.SH See also



last_write_time gets or sets the time of the last data modification
                \fI(function)\fP
\fI(C++17)\fP




