.TH std::underlying_type 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::underlying_type \- std::underlying_type

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct underlying_type;

   If T is a complete enumeration type, provides a member typedef type that names the underlying type of T.

   Otherwise, the behavior is undefined.                                                                                                            \fI(until C++20)\fP
   Otherwise, if T is not an enumeration type, there is no member type. Otherwise (T is an incomplete enumeration type), the program is ill-formed. \fI(since C++20)\fP

.SH Member types

   Name Definition
   type the underlying type of T

.SH Helper types

   template< class T >                                           \fI(since C++14)\fP
   using underlying_type_t = typename underlying_type<T>::type;

.SH Notes

   Each enumeration type has an underlying type, which can be

   1. Specified explicitly (both scoped and unscoped enumerations)

   2. Omitted, in which case it is int for scoped enumerations or an implementation-defined integral type capable of representing all values of the enum (for unscoped enumerations)

  Defect reports

   The following behavior-changing defect reports were applied retroactively to previously published C++ standards.

      DR    Applied to           Behavior as published                    Correct behavior
   LWG 2396 C++11      incomplete enumeration types were allowed complete enumeration type required

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>

 enum e1 {};
 enum class e2: int {};

 int main() {
     bool e1_type = std::is_same<
         unsigned
        ,typename std::underlying_type<e1>::type
     >::value;

     bool e2_type = std::is_same<
         int
        ,typename std::underlying_type<e2>::type
     >::value;

     std::cout
     << "underlying type for 'e1' is " << (e1_type?"unsigned":"non-unsigned") << '\\n'
     << "underlying type for 'e2' is " << (e2_type?"int":"non-int") << '\\n';
 }

.SH Output:

 underlying type for 'e1' is unsigned
 underlying type for 'e2' is int
