.TH std::replace_copy,std::replace_copy_if 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::replace_copy,std::replace_copy_if \- std::replace_copy,std::replace_copy_if

.SH Synopsis

  Defined in header <algorithm>
  template< class InputIt, class OutputIt, class T >
  OutputIt replace_copy( InputIt first, InputIt last, OutputIt d_first,                                        \fI(until C++20)\fP
  const T& old_value, const T& new_value );
  template< class InputIt, class OutputIt, class T >
  constexpr OutputIt replace_copy( InputIt first, InputIt last, OutputIt d_first,                              \fI(since C++20)\fP
  const T& old_value, const T& new_value );
  template< class ExecutionPolicy, class ForwardIt1, class ForwardIt2, class T >
  ForwardIt2 replace_copy( ExecutionPolicy&& policy, ForwardIt1 first, ForwardIt1 last,                    \fB(2)\fP \fI(since C++17)\fP
  ForwardIt2 d_first, const T& old_value, const T& new_value );                                        \fB(1)\fP
  template< class InputIt, class OutputIt, class UnaryPredicate, class T >
  OutputIt replace_copy_if( InputIt first, InputIt last, OutputIt d_first,                                                   \fI(until C++20)\fP
  UnaryPredicate p, const T& new_value );
  template< class InputIt, class OutputIt, class UnaryPredicate, class T >
  constexpr OutputIt replace_copy_if( InputIt first, InputIt last, OutputIt d_first,                       \fB(3)\fP               \fI(since C++20)\fP
  UnaryPredicate p, const T& new_value );
  template< class ExecutionPolicy, class ForwardIt1, class ForwardIt2, class UnaryPredicate, class T >
  ForwardIt2 replace_copy_if( ExecutionPolicy&& policy, ForwardIt1 first, ForwardIt1 last,                     \fB(4)\fP           \fI(since C++17)\fP
  ForwardIt2 d_first, UnaryPredicate p, const T& new_value );

  Copies the elements from the range [first, last) to another range beginning at d_first replacing all elements satisfying specific criteria with new_value. The source and destination ranges cannot overlap.
  1) Replaces all elements that are equal to old_value.
  3) Replaces all elements for which predicate p returns true.
  2,4) Same as (1,3), but executed according to policy. This overload only participates in overload resolution if std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true

.SH Parameters


  first, last - the range of elements to copy
  d_first     - the beginning of the destination range
  old_value   - the value of elements to replace
  policy      - the execution policy to use. See execution_policy for details.
                unary predicate which returns true if the element value should be replaced.
  p           - The expression p(v) must be convertible to bool for every argument v of type (possibly const) VT, where VT is the value type of InputIt, regardless of value_category, and must not modify v. Thus, a parameter type of VT&is not allowed
                , nor is VT unless for VT a move is equivalent to a copy
                \fI(since C++11)\fP. 
  new_value   - the value to use as replacement
.SH Type requirements
  -
  InputIt must meet the requirements of LegacyInputIterator.
  -
  OutputIt must meet the requirements of LegacyOutputIterator.
  -
  ForwardIt1, ForwardIt2 must meet the requirements of LegacyForwardIterator.


.SH Return value

  Iterator to the element past the last element copied.

.SH Complexity

  Exactly last - first applications of the predicate.

.SH Exceptions

  The overloads with a template parameter named ExecutionPolicy report errors as follows:

  * If execution of a function invoked as part of the algorithm throws an exception and ExecutionPolicy is one of the standard_policies, std::terminate is called. For any other ExecutionPolicy, the behavior is implementation-defined.
  * If the algorithm fails to allocate memory, std::bad_alloc is thrown.


.SH Possible implementation


.SH First version

    template<class InputIt, class OutputIt, class T>
    OutputIt replace_copy(InputIt first, InputIt last, OutputIt d_first,
                          const T& old_value, const T& new_value)
    {
        for (; first != last; ++first) {
            *d_first++ = (*first == old_value) ? new_value : *first;
        }
        return d_first;
    }

.SH Second version

    template<class InputIt, class OutputIt,
             class UnaryPredicate, class T>
    OutputIt replace_copy_if(InputIt first, InputIt last, OutputIt d_first,
                             UnaryPredicate p, const T& new_value)
    {
        for (; first != last; ++first) {
            *d_first++ = p( *first ) ? new_value : *first;
        }
        return d_first;
    }



.SH Example

  The following copy prints a vector, replacing all values over 5 with 99 on the fly.
  
// Run this code

    #include <algorithm>
    #include <vector>
    #include <iostream>
    #include <iterator>
    #include <functional>

    int main()
    {
        std::vector<int> v{5, 7, 4, 2, 8, 6, 1, 9, 0, 3};
        std::replace_copy_if(v.begin(), v.end(),
                             std::ostream_iterator<int>(std::cout, " "),
                             [](int n){return n > 5;}, 99);
        std::cout << '\\n';
    }

.SH Output:

    5 99 4 2 99 99 1 99 0 3


.SH See also


            removes elements satisfying specific criteria
  remove    \fI(function template)\fP
  remove_if




