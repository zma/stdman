.TH std::malloc 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::malloc \- std::malloc

.SH Synopsis

Defined in header <cstdlib>
void* malloc( std::size_t size );

Allocates size bytes of uninitialized storage.
If allocation succeeds, returns a pointer to the lowest (first) byte in the allocated memory block that is suitably aligned for any scalar type.
If size is zero, the behavior is implementation defined (null pointer may be returned, or some non-null pointer may be returned that may not be used to access storage, but has to be passed to std::free)

The following functions are required to be thread-safe:

* The library versions of operator_new and operator_delete
* User replacement versions of global operator_new and operator_delete
* std::calloc, std::malloc, std::realloc                                                                                                                                                                    \fI(since C++11)\fP
  , std::aligned_alloc
  \fI(since C++17)\fP, std::free

Calls to these functions that allocate or deallocate a particular unit of storage occur in a single total order, and each such deallocation call happens-before the next allocation (if any) in this order.


.SH Parameters


size - number of bytes to allocate


.SH Return value

On success, returns the pointer to the beginning of newly allocated memory. To avoid a memory leak, the returned pointer must be deallocated with std::free() or std::realloc().
On failure, returns a null pointer.

.SH Notes

This function does not call constructors or initialize memory in any way. There are no ready-to-use smart pointers that could guarantee that the matching deallocation function is called. The preferred method of memory allocation in C++ is using RAII-ready functions std::make_unique, std::make_shared, container constructors, etc, and, in low-level library code, new-expression.

.SH Example


// Run this code

  #include <iostream>
  #include <cstdlib>
  #include <string>

  int main()
  {
      // allocates enough for an array of 4 strings
      if(auto p = (std::string*)std::malloc(4 * sizeof(std::string)))
      {
          int i = 0;
          try
          {
              for(; i != 4; ++i) // populate the array
                  new(p + i) std::string(5, 'a' + i);

              for(int j = 0; j != 4; ++j) // print it back out
                  std::cout << "p[" << j << "] == " << p[j] << '\\n';
          }
          catch(...) {}

          for(; i != 0; --i) // clean up
              p[i - 1].~basic_string();

          std::free(p);
      }
  }

.SH Output:

  p[0] == aaaaa
  p[1] == bbbbb
  p[2] == ccccc
  p[3] == ddddd


.SH See also


                      allocation functions
operator_new          \fI(function)\fP
operator_new[]

get_temporary_buffer  obtains uninitialized storage
                      \fI(function template)\fP
(deprecated in C++17)
(removed in C++20)




