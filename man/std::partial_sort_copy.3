.TH std::partial_sort_copy 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::partial_sort_copy \- std::partial_sort_copy

.SH Synopsis

  Defined in header <algorithm>
  template< class InputIt, class RandomIt >
  RandomIt partial_sort_copy( InputIt first, InputIt last,                                       \fI(until C++20)\fP
  RandomIt d_first, RandomIt d_last );
  template< class InputIt, class RandomIt >
  constexpr RandomIt partial_sort_copy( InputIt first, InputIt last,                             \fI(since C++20)\fP
  RandomIt d_first, RandomIt d_last );
  template< class ExecutionPolicy, class ForwardIt, class RandomIt >
  RandomIt partial_sort_copy( ExecutionPolicy&& policy, ForwardIt first, ForwardIt last,     \fB(2)\fP \fI(since C++17)\fP
  RandomIt d_first, RandomIt d_last );
  template< class InputIt, class RandomIt, class Compare >
  RandomIt partial_sort_copy( InputIt first, InputIt last,                               \fB(1)\fP                   \fI(until C++20)\fP
  RandomIt d_first, RandomIt d_last,
  Compare comp );
  template< class InputIt, class RandomIt, class Compare >
  constexpr RandomIt partial_sort_copy( InputIt first, InputIt last,                         \fB(3)\fP               \fI(since C++20)\fP
  RandomIt d_first, RandomIt d_last,
  Compare comp );
  template< class ExecutionPolicy, class ForwardIt, class RandomIt, class Compare >
  RandomIt partial_sort_copy( ExecutionPolicy&& policy, ForwardIt first, ForwardIt last,         \fB(4)\fP           \fI(since C++17)\fP
  RandomIt d_first, RandomIt d_last,
  Compare comp );

  Sorts some of the elements in the range [first, last) in ascending order, storing the result in the range [d_first, d_last).
  At most d_last - d_first of the elements are placed sorted to the range [d_first, d_first + n). n is the number of elements to sort (n = min(last - first, d_last - d_first)). The order of equal elements is not guaranteed to be preserved.
  1) Elements are compared using operator<.
  3) Elements are compared using the given binary comparison function comp.
  2,4) Same as (1,3), but executed according to policy. This overload only participates in overload resolution if std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true

.SH Parameters


  first, last     - the range of elements to sort
  d_first, d_last - random access iterators defining the destination range
  policy          - the execution policy to use. See execution_policy for details.
                    comparison function object (i.e. an object that satisfies the requirements of Compare) which returns true if the first argument is less than (i.e. is ordered before) the second.
                    The signature of the comparison function should be equivalent to the following:
                    bool cmp(const Type1 &a, const Type2 &b);
  comp            - While the signature does not need to have const &, the function must not modify the objects passed to it and must be able to accept all values of type (possibly const) Type1 and Type2 regardless of value_category (thus, Type1 & is not allowed
                    , nor is Type1 unless for Type1 a move is equivalent to a copy
                    \fI(since C++11)\fP).
                    The types Type1 and Type2 must be such that an object of type RandomIt can be dereferenced and then implicitly converted to both of them. 
.SH Type requirements
  -
  InputIt must meet the requirements of LegacyInputIterator.
  -
  ForwardIt must meet the requirements of LegacyForwardIterator.
  -
  RandomIt must meet the requirements of ValueSwappable and LegacyRandomAccessIterator.
  -
  The type of dereferenced RandomIt must meet the requirements of MoveAssignable and MoveConstructible.


.SH Return value

  an iterator to the element defining the upper boundary of the sorted range, i.e. d_first + min(last - first, d_last - d_first).

.SH Complexity

  O(NÂ·log(min(D,N)), where N = std::distance(first, last), D = std::distance(d_first, d_last) applications of cmp.

.SH Exceptions

  The overloads with a template parameter named ExecutionPolicy report errors as follows:

  * If execution of a function invoked as part of the algorithm throws an exception and ExecutionPolicy is one of the standard_policies, std::terminate is called. For any other ExecutionPolicy, the behavior is implementation-defined.
  * If the algorithm fails to allocate memory, std::bad_alloc is thrown.


.SH Example

  The following code sorts a vector of integers and copies them into a smaller and a larger vector.
  
// Run this code

    #include <algorithm>
    #include <vector>
    #include <functional>
    #include <iostream>

    int main()
    {
        std::vector<int> v0{4, 2, 5, 1, 3};
        std::vector<int> v1{10, 11, 12};
        std::vector<int> v2{10, 11, 12, 13, 14, 15, 16};
        std::vector<int>::iterator it;

        it = std::partial_sort_copy(v0.begin(), v0.end(), v1.begin(), v1.end());

        std::cout << "Writing to the smaller vector in ascending order gives: ";
        for (int a : v1) {
            std::cout << a << " ";
        }
        std::cout << '\\n';
        if(it == v1.end())
            std::cout << "The return value is the end iterator\\n";

        it = std::partial_sort_copy(v0.begin(), v0.end(), v2.begin(), v2.end(),
                                    std::greater<int>());

        std::cout << "Writing to the larger vector in descending order gives: ";
        for (int a : v2) {
            std::cout << a << " ";
        }
        std::cout << '\\n' << "The return value is the iterator to " << *it << '\\n';
    }

.SH Output:

    Writing to the smaller vector in ascending order gives: 1 2 3
    The return value is the end iterator
    Writing to the larger vector in descending order gives: 5 4 3 2 1 15 16
    The return value is the iterator to 15


.SH See also


               sorts the first N elements of a range
  partial_sort \fI(function template)\fP
               sorts a range into ascending order
  sort         \fI(function template)\fP
               sorts a range of elements while preserving order between equal elements
  stable_sort  \fI(function template)\fP




