.TH std::basic_stringbuf<CharT,Traits,Allocator>::basic_stringbuf 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_stringbuf<CharT,Traits,Allocator>::basic_stringbuf \- std::basic_stringbuf<CharT,Traits,Allocator>::basic_stringbuf

.SH Synopsis

basic_stringbuf() : basic_stringbuf(std::ios_base::in | std::ios_base::out) { }       \fB(1)\fP
explicit basic_stringbuf( std::ios_base::openmode which = std::ios_base::in                   \fI(until C++11)\fP
| std::ios_base::out );
explicit basic_stringbuf( std::ios_base::openmode which );                                    \fI(since C++11)\fP
explicit basic_stringbuf( const std::basic_string<CharT, traits, Allocator>& new_str, \fB(2)\fP
std::ios_base::openmode which = std::ios_base::in                                         \fB(3)\fP
| std::ios_base::out );
basic_stringbuf( const basic_stringbuf& rhs ) = delete;                                   \fB(4)\fP \fI(since C++11)\fP
basic_stringbuf( basic_stringbuf&& rhs );                                                 \fB(5)\fP \fI(since C++11)\fP

1) Default constructor. It is implementation-defined whether the sequence pointers (eback(), gptr(), egptr(), pbase(), pptr(), epptr()) are initialized to null pointers.
2) Constructs a std::basic_stringbuf object: initializes the base class by calling the default constructor of std::basic_streambuf, initializes the character sequence with an empty string, and sets the mode to which.
3) Constructs a std::basic_stringbuf object by performing the same initialization as 1), followed by initializing the associated character sequence as if by calling str(new_str).
4) The copy constructor is deleted; std::basic_stringbuf is not CopyConstructible
5) Move-constructs a std::basic_stringbuf object by moving all state from another std::basic_stringbuf object rhs, including the associated string, the open mode, the locale, and all other state. After the move, the six pointers of std::basic_streambuf in *this are guaranteed to be different from the corresponding pointers in the moved-from rhs unless null.

.SH Parameters


new_str - a basic_string used to initialize the buffer
rhs     - another basic_stringbuf
          specifies stream open mode. It is bitmask type, the following constants are defined:

          Constant Explanation
          app      seek to the end of stream before each write
which   - binary   open in binary_mode
          in       open for reading
          out      open for writing
          trunc    discard the contents of the stream when opening
          ate      seek to the end of stream immediately after open



.SH Notes

Typically called by the constructor of std::basic_stringstream.
The level of support for the open modes other than std::ios_base::in and std::ios_base::out varies among implementations. C++11 explicitly specifies the support for std::ios_base::ate in str() and in this constructor, but std::ios_base::app, std::ios_base::trunc, and std::ios_base::binary have different effects on different implementations.

Defect reports

The following behavior-changing defect reports were applied retroactively to previously published C++ standards.

DR      Applied to Behavior as published            Correct behavior
P0935R0 C++11      default constructor was explicit made implicit


.SH Example

Demonstrates calling the constructor of basic_stringbuf directly.

// Run this code

  #include <iostream>
  #include <sstream>

  int main()
  {
      // default constructor (mode = in|out)
      std::stringbuf buf1;
      buf1.sputc('1');
      std::cout << &buf1 << '\\n';

      // string constructor in at-end mode \fI(C++11)\fP
      std::stringbuf buf2("test", std::ios_base::in
                                | std::ios_base::out
                                | std::ios_base::ate);
      buf2.sputc('1');
      std::cout << &buf2 << '\\n';

      // append mode test (results differ among compilers)
      std::stringbuf buf3("test", std::ios_base::in
                                | std::ios_base::out
                                | std::ios_base::app);
      buf3.sputc('1');
      buf3.pubseekpos(1);
      buf3.sputc('2');
      std::cout << &buf3 << '\\n';
  }

.SH Output:

  1
  test1
  est12 (Sun Studio) 2st1 (GCC)


.SH See also


              constructs the string stream
constructor   \fI(public member function of std::basic_stringstream<CharT,Traits,Allocator>)\fP




