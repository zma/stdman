.TH std::Destructible 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::Destructible \- std::Destructible

.SH Synopsis
   Defined in header <concepts>
   template < class T >                                       \fI(since C++20)\fP
   concept Destructible = std::is_nothrow_destructible_v<T>;

   The concept Destructible specifies the concept of all types whose instances can safely be destroyed at the end of their lifetime (including reference types).

.SH Notes

   Unlike the Destructible named requirement, std::Destructible requires the destructor to be noexcept(true), not merely non-throwing when invoked, and allows reference types and array types.

.SH See also

   is_destructible
   is_trivially_destructible
   is_nothrow_destructible   checks if a type has a non-deleted destructor
   \fI(C++11)\fP                   \fI(class template)\fP
   \fI(C++11)\fP
   \fI(C++11)\fP
