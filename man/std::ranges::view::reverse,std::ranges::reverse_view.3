.TH std::ranges::view::reverse,std::ranges::reverse_view 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::view::reverse,std::ranges::reverse_view \- std::ranges::view::reverse,std::ranges::reverse_view

.SH Synopsis

template< View V >
requires BidirectionalRange<V>                                      \fB(1)\fP \fI(since C++20)\fP
class reverse_view : public ranges::view_interface<reverse_view<V>>
namespace view {
inline constexpr /*unspecified*/ reverse = /*unspecified*/;         \fB(2)\fP \fI(since C++20)\fP
}

1) A range adaptor that represents a view of underlying View with reversed order.
2) The expression view::reverse(E) is expression-equivalent to (has the same effect as) one of the following expressions, except that E is evaluated only once:

* E.base(), if the type of E is a (possibly cv-qualified) specialization of reverse_view;
* otherwise, if the type of E is (possibly cv-qualified) ranges::subrange<std::reverse_iterator<I>, std::reverse_iterator<I>, K> for some iterator type I and value K of type ranges::subrange_kind:



      * ranges::subrange<I, I, K>(E.end().base(), E.begin().base(), E.size()), if K is ranges::subrange_kind::sized;
      * otherwise ranges::subrange<I, I, K>(E.end().base(), E.begin().base());



* otherwise ranges::reverse_­view{E}.

In other words, view::reverse unwraps reversed views if possible.

Data members


 std::ranges::reverse_view::base_


V base_ = V(); /* exposition-only */

the underlying view

.SH Member functions


 std::ranges::reverse_view::reverse_view


reverse_view() = default;                                       \fB(1)\fP
constexpr reverse_view(V base);                                 \fB(2)\fP
template<ViewableRange R>
requires BidirectionalRange<R> && Constructible<V, all_view<R>> \fB(3)\fP
constexpr reverse_view(R&& r);

1) Value-initializes base_
2) Initializes base_ with std::move(base).
3) Initializes base_ with view::all(std::forward<R>(r)).

.SH Parameters


r - range to reverse


 std::ranges::reverse_view::base


constexpr V base() const;

Equivalent to return base_;

 std::ranges::reverse_view::begin


constexpr std::reverse_iterator<ranges::iterator_t<V>> begin();            \fB(1)\fP
constexpr std::reverse_iterator<ranges::iterator_t<V>> begin()             \fB(2)\fP
requires CommonRange<V>;
constexpr std::reverse_iterator<ranges::iterator_t<const V>> begin() const \fB(2)\fP
requires CommonRange<const V>;

1) Returns std::make_reverse_iterator(ranges::next(ranges::begin(base_), ranges::end(base_))). In order to provide the amortized constant time complexity required by the Range concept, this function caches the result within the reverse_view object for use on subsequent calls.
2) Equivalent to return std::make_­reverse_­iterator(ranges::end(base_­));.

 std::ranges::reverse_view::end


constexpr std::reverse_iterator<ranges::iterator_t<V>> end()
requires CommonRange<V>;
constexpr std::reverse_iterator<ranges::iterator_t<const V>> end() const
requires CommonRange<const V>;

Equivalent to return std::make_­reverse_­iterator(ranges::begin(base_­));.

 std::ranges::reverse_view::size


constexpr auto size() requires SizedRange<V> {
return ranges::size(base_);
}
constexpr auto size() const requires SizedRange<const V> {
return ranges::size(base_);
}

Returns the size of the view if the view is bounded.

Deduction guides


template<class R>
reverse_view(R&&) -> reverse_view<all_view<R>>;


.SH Example


// Run this code

  #include <array>
  #include <ranges>
  #include <iostream>

  int main()
  {
      std::array<int, 6> il {3, 1, 4, 1, 5, 9};
      std::ranges::reverse_view rv {il};
      for (int i : rv)
          std::cout << i << ' ';
  }

.SH Output:

  9 5 1 4 1 3


.SH See also


                 iterator adaptor for reverse-order traversal
reverse_iterator \fI(class template)\fP




