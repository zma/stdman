.TH std::filesystem::path::extension 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::filesystem::path::extension \- std::filesystem::path::extension

.SH Synopsis

path extension() const;  \fI(since C++17)\fP

Returns the extension of the filename component of the generic-format view of *this.
If the filename() component of the generic-format path contains a period (.), and is not one of the special filesystem elements dot or dot-dot, then the extension is the substring beginning at the rightmost period (including the period) and until the end of the pathname.
If the first character in the filename is a period, that period is ignored (a filename like ".profile" is not treated as an extension)
If the pathname is either . or .., or if filename() does not contain the . character, then empty path is returned.
Additional behavior may be defined by the implementations for file systems which append additional elements (such as alternate data streams or partitioned dataset names) to extensions.

.SH Parameters

\fI(none)\fP

.SH Return value

The extension of the current pathname or an empty path if there's no extension.

.SH Exceptions

\fI(none)\fP

.SH Notes

The extension as returned by this function includes a period to make it possible to distinguish the file that ends with a period \fI(function returns ".") from a file with no extension (function returns "")\fP
On a non-POSIX system, it is possible that p.stem()+p.extension() != p.filename() even though generic-format versions are the same.

.SH Example


// Run this code

  #include <iostream>
  #include <filesystem>
  namespace fs = std::filesystem;

  int main()
  {
      std::cout << fs::path("/foo/bar.txt").extension() << '\\n'
                << fs::path("/foo/bar.").extension() << '\\n'
                << fs::path("/foo/bar").extension() << '\\n'
                << fs::path("/foo/bar.txt/bar.cc").extension() << '\\n'
                << fs::path("/foo/bar.txt/bar.").extension() << '\\n'
                << fs::path("/foo/bar.txt/bar").extension() << '\\n'
                << fs::path("/foo/.").extension() << '\\n'
                << fs::path("/foo/..").extension() << '\\n'
                << fs::path("/foo/.hidden").extension() << '\\n'
                << fs::path("/foo/..bar").extension() << '\\n';
  }

.SH Output:

  ".txt"
  "."
  ""
  ".cc"
  "."
  ""
  ""
  ""
  ""
  ".bar"


.SH See also


                  returns the filename path component
filename          \fI(public member function)\fP
                  returns the stem path component
stem              \fI(public member function)\fP
                  replaces the extension
replace_extension \fI(public member function)\fP
                  checks if the corresponding path element is not empty
has_extension     \fI(public member function)\fP




