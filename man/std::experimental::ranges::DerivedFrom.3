.TH std::experimental::ranges::DerivedFrom 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::ranges::DerivedFrom \- std::experimental::ranges::DerivedFrom

.SH Synopsis

  Defined in header <experimental/ranges/concepts>
  template < class T, class U >
  concept bool DerivedFrom =                                               (ranges TS)
  std::is_base_of<U, T>::value &&
  std::is_convertible<std::remove_cv_t<T>*, std::remove_cv_t<U>*>::value;

  The concept DerivedFrom<T, U> is satisfied if and only if U is a class type that is either T or a public and unambiguous base of T.
  Despite the use of std::is_base_of and std::is_convertible in its description above, DerivedFrom is not required to use it in its implementation. Thus, there need not be any subsumption relationship between DerivedFrom<T, U> and std::is_base_of<U,T>::value or std::is_convertible<std::remove_cv_t<T>*, std::remove_cv_t<U>*>::value.

.SH See also



  is_base_of             checks if a type is derived from the other type
                         \fI(class template)\fP
  \fI(C++11)\fP

  is_convertible
  is_nothrow_convertible checks if a type can be converted to the other type
                         \fI(class template)\fP
  \fI(C++11)\fP
  (C++20)




