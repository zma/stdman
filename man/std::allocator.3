.TH std::allocator 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::allocator \- std::allocator

.SH Synopsis

  Defined in header <memory>
  template< class T >        \fB(1)\fP
  struct allocator;
  template<>                 \fB(2)\fP (deprecated in C++17)
  struct allocator<void>;        (removed in C++20)

  The std::allocator class template is the default Allocator used by all standard library containers if no user-specified allocator is provided. The default allocator is stateless, that is, all instances of the given allocator are interchangeable, compare equal and can deallocate memory allocated by any other instance of the same allocator type.

  The explicit specialization for void lacks the member typedefs reference, const_reference, size_type and difference_type. This specialization declares no member functions. \fI(until C++20)\fP


  All custom allocators also must be stateless.                                                                                                                                                        \fI(until C++11)\fP
  Custom allocators may contain state. Each container or another allocator-aware object stores an instance of the supplied allocator and controls allocator replacement through std::allocator_traits. \fI(since C++11)\fP
  The default allocator satisfies allocator_completeness_requirements.                                                                                                                                 \fI(since C++17)\fP


.SH Member types


  Type                                                    Definition
  value_type                                              T
  pointer (deprecated in C++17)(removed in C++20)         T*
  const_pointer (deprecated in C++17)(removed in C++20)   const T*
  reference (deprecated in C++17)(removed in C++20)       T&
  const_reference (deprecated in C++17)(removed in C++20) const T&
  size_type                                               std::size_t
  difference_type                                         std::ptrdiff_t
  propagate_on_container_move_assignment\fI(C++14)\fP           std::true_type
  rebind (deprecated in C++17)(removed in C++20)          template< class U > struct rebind { typedef allocator<U> other; };
  is_always_equal\fI(C++17)\fP                                  std::true_type


.SH Member functions


                        creates a new allocator instance
  constructor           \fI(public member function)\fP
                        destructs an allocator instance
  destructor            \fI(public member function)\fP

  address               obtains the address of an object, even if operator& is overloaded
                        \fI(public member function)\fP
  (deprecated in C++17)
  (removed in C++20)
                        allocates uninitialized storage
  allocate              \fI(public member function)\fP
                        deallocates storage
  deallocate            \fI(public member function)\fP

  max_size              returns the largest supported allocation size
                        \fI(public member function)\fP
  (deprecated in C++17)
  (removed in C++20)

  construct             constructs an object in allocated storage
                        \fI(public member function)\fP
  (deprecated in C++17)
  (removed in C++20)

  destroy               destructs an object in allocated storage
                        \fI(public member function)\fP
  (deprecated in C++17)
  (removed in C++20)


.SH Non-member functions


             compares two allocator instances
  operator== \fI(public member function)\fP
  operator!=


.SH Notes

  The member template class rebind provides a way to obtain an allocator for a different type. For example,

  std::list<T, A> allocates nodes of some internal type Node<T>, using the allocator A::rebind<Node<T>>::other                                                                                                             \fI(until C++11)\fP
  std::list<T, A> allocates nodes of some internal type Node<T>, using the allocator std::allocator_traits<A>::rebind_alloc<Node<T>>, which is implemented in terms of A::rebind<Node<T>>::other if A is an std::allocator \fI(since C++11)\fP


.SH Example

  
// Run this code

    #include <memory>
    #include <iostream>
    #include <string>

    int main()
    {
        std::allocator<int> a1;   // default allocator for ints
        int* a = a1.allocate(1);  // space for one int
        a1.construct(a, 7);       // construct the int
        std::cout << a[0] << '\\n';
        a1.deallocate(a, 1);      // deallocate space for one int

        // default allocator for strings
        std::allocator<std::string> a2;

        // same, but obtained by rebinding from the type of a1
        decltype(a1)::rebind<std::string>::other a2_1;

        // same, but obtained by rebinding from the type of a1 via allocator_traits
        std::allocator_traits<decltype(a1)>::rebind_alloc<std::string> a2_2;

        std::string* s = a2.allocate(2); // space for 2 strings

        a2.construct(s, "foo");
        a2.construct(s + 1, "bar");

        std::cout << s[0] << ' ' << s[1] << '\\n';

        a2.destroy(s);
        a2.destroy(s + 1);
        a2.deallocate(s, 2);
    }

.SH Output:

    7
    foo bar


.SH See also



  allocator_traits         provides information about allocator types
                           \fI(class template)\fP
  \fI(C++11)\fP

  scoped_allocator_adaptor implements multi-level allocator for multi-level containers
                           \fI(class template)\fP
  \fI(C++11)\fP

  uses_allocator           checks if the specified type supports uses-allocator construction
                           \fI(class template)\fP
  \fI(C++11)\fP




