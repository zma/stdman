.TH std::owner_less 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::owner_less \- std::owner_less

.SH Synopsis
   Defined in header <memory>
   template< class T >                            \fI(since C++11)\fP
   struct owner_less; /* undefined */             \fI(until C++17)\fP
   template< class T = void >                     \fI(since C++17)\fP
   struct owner_less; /* undefined */
   template< class T >                    \fB(1)\fP \fB(2)\fP \fI(since C++11)\fP
   struct owner_less<std::shared_ptr<T>>;
   template< class T >                        \fB(3)\fP \fI(since C++11)\fP
   struct owner_less<std::weak_ptr<T>>;
   template<>                                 \fB(4)\fP \fI(since C++17)\fP
   struct owner_less<void>;

   This function object provides owner-based (as opposed to value-based) mixed-type ordering of both std::weak_ptr and std::shared_ptr. The order is such that two smart pointers compare equivalent only if they are both empty or if they share ownership, even if the values of the raw pointers obtained by get() are different (e.g. because they point at different subobjects within the same object)

   This class template is the preferred comparison predicate when building associative containers with std::shared_ptr or std::weak_ptr as keys, that is,

   std::map<std::shared_ptr<T>, U, std::owner_less<std::shared_ptr<T>>>

   or

   std::map<std::weak_ptr<T>, U, std::owner_less<std::weak_ptr<T>>>.

   The default operator< is not defined for weak pointers, and may wrongly consider two shared pointers for the same object non-equivalent (see shared_ptr::owner_before)

.SH Specializations

   The standard library provides a specialization of std::owner_less when T is not specified. In this case, the parameter types are deduced from the arguments (each of which must still be either a std::shared_ptr or a std::weak_ptr).
                                                                                                                                                                                                                                          \fI(since C++17)\fP
   owner_less<void> function object providing mixed-type owner-based ordering of shared and weak pointers, regardless of the type of the pointee
                    \fI(class template specialization)\fP

.SH Member types

   Member type                               Definition
   result_type(deprecated in c++17)          2-3) bool             \fI(until C++20)\fP
   first_argument_type(deprecated in c++17)  2) std::shared_ptr<T>
                                             3) std::weak_ptr<T>
   second_argument_type(deprecated in c++17) 2) std::shared_ptr<T>
                                             3) std::weak_ptr<T>

.SH Member functions

   operator() compares its arguments using owner-based semantics
              \fI(function)\fP

std::owner_less::operator()

   bool operator()( const std::shared_ptr<T>& lhs,  \fI(since C++11)\fP
   const std::shared_ptr<T>& rhs ) const;           (member only of owner_less<shared_ptr<T>> template specialization)
   bool operator()( const std::shared_ptr<T>& lhs,  \fI(since C++11)\fP
   const std::weak_ptr<T>& rhs ) const;
   bool operator()( const std::weak_ptr<T>& lhs,    \fI(since C++11)\fP
   const std::shared_ptr<T>& rhs ) const;
   bool operator()( const std::weak_ptr<T>& lhs,    \fI(since C++11)\fP
   const std::weak_ptr<T>& rhs ) const;             (member only of owner_less<weak_ptr<T>> template specialization)

   Compares lhs and rhs using owner-based semantics. Effectively calls lhs.owner_before(rhs).

   The ordering is strict weak ordering relation.

   lhs and rhs are equivalent only if they are both empty or share ownership.

.SH Parameters

   lhs, rhs - shared-ownership pointers to compare

.SH Return value

   true if lhs is less than rhs as determined by the owner-based ordering.

.SH Exceptions

   \fI(none)\fP                  \fI(until C++17)\fP
   noexcept specification: \fI(since C++17)\fP
   noexcept

.SH See also

   owner_before provides owner-based ordering of shared pointers
                \fI(public member function of std::shared_ptr<T>)\fP
   owner_before provides owner-based ordering of weak pointers
                \fI(public member function of std::weak_ptr<T>)\fP
