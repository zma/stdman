.TH std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::find 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::find \- std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::find

.SH Synopsis
   iterator find( const Key& key );                                          \fB(1)\fP
   iterator find( const Key& key, size_t hash );                             \fB(1)\fP \fI(since C++20)\fP
   const_iterator find( const Key& key ) const;                              \fB(2)\fP
   const_iterator find( const Key& key, size_t hash ) const;                 \fB(2)\fP \fI(since C++20)\fP
   template< class K > iterator find( const K& x );                          \fB(3)\fP \fI(since C++20)\fP
   template< class K > iterator find( const K& x, size_t hash );             \fB(3)\fP \fI(since C++20)\fP
   template< class K > const_iterator find( const K& x ) const;              \fB(4)\fP \fI(since C++20)\fP
   template< class K > const_iterator find( const K& x, size_t hash ) const; \fB(4)\fP \fI(since C++20)\fP

   1,2) Finds an element with key equivalent to key.
   3,4) Finds an element with key that compares equivalent to the value x. This overload only participates in overload resolution if the qualified-id Hash::transparent_key_equal is valid and denotes a type. This assumes that such Hash is callable with both K and Key type, and that its key_equal is transparent, which, together, allows calling this function without constructing an instance of Key.

   If present, the hash parameter may be used to pass a pre-computed hash value as an optimization. The behavior is undefined if invoking hash_function() on the key passed do not produce the same value as hash. \fI(since C++20)\fP

.SH Parameters

   key  - key value of the element to search for
   x    - a value of any type that can be transparently compared with a key
   hash - the hash value of the key

.SH Return value

   Iterator to an element with key equivalent to key. If no such element is found, past-the-end (see end()) iterator is returned.

.SH Complexity

   Constant on average, worst case linear in the size of the container.

.SH Example

   
// Run this code

 #include <iostream>
 #include <unordered_map>

 int main()
 {
 // simple comparison demo
     std::unordered_multimap<int,char> example = {{1,'a'},{2,'b'}};

     auto search = example.find(2);
     if (search != example.end()) {
         std::cout << "Found " << search->first << " " << search->second << '\\n';
     } else {
         std::cout << "Not found\\n";
     }


 }

.SH Output:

 Found 2 b

.SH See also

   count       returns the number of elements matching specific key
               \fI(public member function)\fP
   equal_range returns range of elements matching a specific key
               \fI(public member function)\fP
