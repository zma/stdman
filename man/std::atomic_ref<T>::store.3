.TH std::atomic_ref<T>::store 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::atomic_ref<T>::store \- std::atomic_ref<T>::store

.SH Synopsis

  void store( T desired, std::memory_order order = std::memory_order_seq_cst ) const noexcept;  \fI(since C++20)\fP

  Atomically replaces the current value of the referenced object with desired. Memory is affected according to the value of order.
  order must be one of std::memory_order_relaxed, std::memory_order_release or std::memory_order_seq_cst. Otherwise the behavior is undefined.

.SH Parameters


  desired - the value to store into the referenced object
  order   - memory order constraints to enforce


.SH Return value

  \fI(none)\fP

.SH See also


            stores a value into the object referenced by an atomic_ref object
  operator= \fI(public member function)\fP




