.TH std::is_heap 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_heap \- std::is_heap

.SH Synopsis

Defined in header <algorithm>
template< class RandomIt >                                                                     \fI(since C++11)\fP
bool is_heap( RandomIt first, RandomIt last );                                                 \fI(until C++20)\fP
template< class RandomIt >                                                                     \fI(since C++20)\fP
constexpr bool is_heap( RandomIt first, RandomIt last );
template< class ExecutionPolicy, class RandomIt >                                          \fB(2)\fP \fI(since C++17)\fP
bool is_heap( ExecutionPolicy&& policy, RandomIt first, RandomIt last );               \fB(1)\fP
template< class RandomIt, class Compare >                                                                     \fI(since C++11)\fP
bool is_heap( RandomIt first, RandomIt last, Compare comp );                                                  \fI(until C++20)\fP
template< class RandomIt, class Compare >                                                  \fB(3)\fP                \fI(since C++20)\fP
constexpr bool is_heap( RandomIt first, RandomIt last, Compare comp );
template< class ExecutionPolicy, class RandomIt, class Compare >                               \fB(4)\fP            \fI(since C++17)\fP
bool is_heap( ExecutionPolicy&& policy, RandomIt first, RandomIt last, Compare comp );

Checks if the elements in range [first, last) are a max heap.
1) Elements are compared using operator<.
3) Elements are compared using the given binary comparison function comp.
2,4) Same as (1,3), but executed according to policy. These overloads do not participate in overload resolution unless std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true

.SH Parameters


first, last - the range of elements to examine
policy      - the execution policy to use. See execution_policy for details.
              comparison function object (i.e. an object that satisfies the requirements of Compare) which returns true if the first argument is less than the second.
              The signature of the comparison function should be equivalent to the following:
              bool cmp(const Type1 &a, const Type2 &b);
comp        - While the signature does not need to have const &, the function must not modify the objects passed to it and must be able to accept all values of type (possibly const) Type1 and Type2 regardless of value_category (thus, Type1 & is not allowed
              , nor is Type1 unless for Type1 a move is equivalent to a copy
              \fI(since C++11)\fP).
              The types Type1 and Type2 must be such that an object of type RandomIt can be dereferenced and then implicitly converted to both of them. 
.SH Type requirements
-
RandomIt must meet the requirements of LegacyRandomAccessIterator.


.SH Return value

true if the range is max heap, false otherwise.

.SH Complexity

Linear in the distance between first and last

.SH Exceptions

The overloads with a template parameter named ExecutionPolicy report errors as follows:

* If execution of a function invoked as part of the algorithm throws an exception and ExecutionPolicy is one of the standard_policies, std::terminate is called. For any other ExecutionPolicy, the behavior is implementation-defined.
* If the algorithm fails to allocate memory, std::bad_alloc is thrown.


.SH Notes

A max heap is a range of elements [f,l) that has the following properties:

.SH Example


// Run this code

  #include <iostream>
  #include <algorithm>
  #include <vector>

  int main()
  {
      std::vector<int> v { 3, 1, 4, 1, 5, 9 };

      std::cout << "initially, v: ";
      for (auto i : v) std::cout << i << ' ';
      std::cout << '\\n';

      if (!std::is_heap(v.begin(), v.end())) {
          std::cout << "making heap...\\n";
          std::make_heap(v.begin(), v.end());
      }

      std::cout << "after make_heap, v: ";
      for (auto i : v) std::cout << i << ' ';
      std::cout << '\\n';
  }

.SH Output:

  initially, v: 3 1 4 1 5 9
  making heap...
  after make_heap, v: 9 5 4 1 1 3


.SH See also



is_heap_until finds the largest subrange that is a max heap
              \fI(function template)\fP
\fI(C++11)\fP




