.TH std::pop_heap 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::pop_heap \- std::pop_heap

.SH Synopsis

  Defined in header <algorithm>
  template< class RandomIt >                                                      \fI(until C++20)\fP
  void pop_heap( RandomIt first, RandomIt last );
  template< class RandomIt >                                                      \fI(since C++20)\fP
  constexpr void pop_heap( RandomIt first, RandomIt last );               \fB(1)\fP
  template< class RandomIt, class Compare >                                                     \fI(until C++20)\fP
  void pop_heap( RandomIt first, RandomIt last, Compare comp );               \fB(2)\fP
  template< class RandomIt, class Compare >                                                     \fI(since C++20)\fP
  constexpr void pop_heap( RandomIt first, RandomIt last, Compare comp );

  Swaps the value in the position first and the value in the position last-1 and makes the subrange [first, last-1) into a max heap. This has the effect of removing the first (largest) element from the heap defined by the range [first, last).
  The first version of the function uses operator< to compare the elements, the second uses the given comparison function comp.

.SH Parameters


  first, last - the range of elements defining the valid nonempty heap to modify
                comparison function object (i.e. an object that satisfies the requirements of Compare) which returns true if the first argument is less than the second.
                The signature of the comparison function should be equivalent to the following:
                bool cmp(const Type1 &a, const Type2 &b);
  comp        - While the signature does not need to have const &, the function must not modify the objects passed to it and must be able to accept all values of type (possibly const) Type1 and Type2 regardless of value_category (thus, Type1 & is not allowed
                , nor is Type1 unless for Type1 a move is equivalent to a copy
                \fI(since C++11)\fP).
                The types Type1 and Type2 must be such that an object of type RandomIt can be dereferenced and then implicitly converted to both of them. 
.SH Type requirements
  -
  RandomIt must meet the requirements of ValueSwappable and LegacyRandomAccessIterator.
  -
  The type of dereferenced RandomIt must meet the requirements of MoveAssignable and MoveConstructible.


.SH Return value

  \fI(none)\fP

.SH Complexity

  At most 2Ã—log(N) comparisons where N=std::distance(first, last).

.SH Notes

  A max heap is a range of elements [f,l) that has the following properties:

.SH Example

  
// Run this code

    #include <iostream>
    #include <algorithm>
    #include <vector>

    int main()
    {
        std::vector<int> v { 3, 1, 4, 1, 5, 9 };

        std::make_heap(v.begin(), v.end());

        std::cout << "v: ";
        for (auto i : v) std::cout << i << ' ';
        std::cout << '\\n';

        std::pop_heap(v.begin(), v.end()); // moves the largest to the end

        std::cout << "after pop_heap: ";
        for (auto i : v) std::cout << i << ' ';
        std::cout << '\\n';

        int largest = v.back();
        v.pop_back();  // actually removes the largest element
        std::cout << "largest element: " << largest << '\\n';

        std::cout << "heap without largest: ";
        for (auto i : v) std::cout << i << ' ';
        std::cout << '\\n';
    }

.SH Output:

    v: 9 5 4 1 1 3
    after pop_heap: 5 3 4 1 1 9
    largest element: 9
    heap without largest: 5 3 4 1 1


.SH See also


            adds an element to a max heap
  push_heap \fI(function template)\fP
            creates a max heap out of a range of elements
  make_heap \fI(function template)\fP




