.TH std::experimental::where 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::where \- std::experimental::where

.SH Synopsis
   Defined in header <experimental/simd>
   template < class T, class Abi >

   where_expression<simd_mask<T, Abi>, simd<T, Abi>>                  \fB(1)\fP
   where( const typename simd<T, Abi>::mask_type& mask,

   simd<T, Abi>& value) noexcept;
   template < class T, class Abi >

   const_where_expression<simd_mask<T, Abi>, const simd<T, Abi>>      \fB(2)\fP
   where( const typename simd<T, Abi>::mask_type& mask,

   const simd<T, Abi>& value) noexcept;
   template < class T, class Abi >

   where_expression<simd_mask<T, Abi>, simd_mask<T, Abi>>             \fB(3)\fP
   where( const nodeduce_t<simd_mask<T, Abi>>& mask,

   simd_mask<T, Abi>& value) noexcept;
   template < class T, class Abi >

   const_where_expression<simd_mask<T, Abi>, const simd_mask<T, Abi>> \fB(4)\fP
   where( const nodeduce_t<simd_mask<T, Abi>>& mask,

   const simd_mask<T, Abi>& value) noexcept;
   template < class T >

   where_expression<bool, T>                                          \fB(5)\fP

   where( /*see below*/ mask, T& value ) noexcept;
   template < class T >

   const_where_expression<bool, const T>                              \fB(6)\fP

   where( /*see below*/ mask, const T& value ) noexcept;

   Constructs a new const_where_expression or where_expression.

   1-6) constructs a where_expression from given mask and value parameters.

.SH Parameters

   1-4)

   mask  - the simd_mask object
   value - reference to the object that mask applies on

   5-6)

   mask  - the mask of type bool
   value - reference to the scalar that mask applies on

.SH Return value

   The constructed const_where_expression or where_expression.

.SH Notes

   5-6) uses implementation defined type of mask, so that implicit conversions from other types to bool is disabled.

.SH Example
