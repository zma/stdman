.TH std::unique_copy 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unique_copy \- std::unique_copy

.SH Synopsis

  Defined in header <algorithm>
  template< class InputIt, class OutputIt >
  OutputIt unique_copy( InputIt first, InputIt last,                                                   \fI(until C++20)\fP
  OutputIt d_first );
  template< class InputIt, class OutputIt >
  constexpr OutputIt unique_copy( InputIt first, InputIt last,                                         \fI(since C++20)\fP
  OutputIt d_first );
  template< class ExecutionPolicy, class ForwardIt1, class ForwardIt2 >
  ForwardIt2 unique_copy( ExecutionPolicy&& policy, ForwardIt1 first, ForwardIt1 last,             \fB(2)\fP \fI(since C++17)\fP
  ForwardIt2 d_first );                                                                        \fB(1)\fP
  template< class InputIt, class OutputIt, class BinaryPredicate >
  OutputIt unique_copy( InputIt first, InputIt last,                                                                 \fI(until C++20)\fP
  OutputIt d_first, BinaryPredicate p );
  template< class InputIt, class OutputIt, class BinaryPredicate >
  constexpr OutputIt unique_copy( InputIt first, InputIt last,                                     \fB(3)\fP               \fI(since C++20)\fP
  OutputIt d_first, BinaryPredicate p );
  template< class ExecutionPolicy, class ForwardIt1, class ForwardIt2, class BinaryPredicate >
  ForwardIt2 unique_copy( ExecutionPolicy&& policy, ForwardIt1 first, ForwardIt1 last,                 \fB(4)\fP           \fI(since C++17)\fP
  ForwardIt2 d_first, BinaryPredicate p );

  Copies the elements from the range [first, last), to another range beginning at d_first in such a way that there are no consecutive equal elements. Only the first element of each group of equal elements is copied.
  1) Elements are compared using operator==. The behavior is undefined if it is not an equivalence_relation.
  3) Elements are compared using the given binary predicate p. The behavior is undefined if it is not an equivalence relation.
  2,4) Same as (1,3), but executed according to policy. This overload only participates in overload resolution if std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true

.SH Parameters


  first, last - the range of elements to process
  d_first     - the beginning of the destination range
  policy      - the execution policy to use. See execution_policy for details.
                binary predicate which returns true if the elements should be treated as equal.
                The signature of the predicate function should be equivalent to the following:
                bool pred(const Type1 &a, const Type2 &b);
  p           - While the signature does not need to have const &, the function must not modify the objects passed to it and must be able to accept all values of type (possibly const) Type1 and Type2 regardless of value_category (thus, Type1 & is not allowed
                , nor is Type1 unless for Type1 a move is equivalent to a copy
                \fI(since C++11)\fP).
                The types Type1 and Type2 must be such that an object of type InputIt can be dereferenced and then implicitly converted to both of them. 
.SH Type requirements
  -
  InputIt must meet the requirements of LegacyInputIterator.
  -
  OutputIt must meet the requirements of LegacyOutputIterator.
  -
  ForwardIt1, ForwardIt2 must meet the requirements of LegacyForwardIterator.
  -
  The type of dereferenced InputIt must meet the requirements of CopyAssignable. if InputIt does not satisfy LegacyForwardIterator
  -
  The type of dereferenced InputIt must meet the requirements of CopyConstructible. if neither InputIt nor OutputIt satisfies LegacyForwardIterator, or if InputIt does not satisfy LegacyForwardIterator and the value type of InputIt differs from that of OutputIt


.SH Return value

  Output iterator to the element past the last written element

.SH Complexity

  For nonempty ranges, exactly std::distance(first, last) - 1 applications of the corresponding predicate.

.SH Exceptions

  The overloads with a template parameter named ExecutionPolicy report errors as follows:

  * If execution of a function invoked as part of the algorithm throws an exception and ExecutionPolicy is one of the standard_policies, std::terminate is called. For any other ExecutionPolicy, the behavior is implementation-defined.
  * If the algorithm fails to allocate memory, std::bad_alloc is thrown.


.SH Notes

  If InputIt satisfies LegacyForwardIterator, this function rereads the input in order to detect duplicates.
  Otherwise, if OutputIt satisfies LegacyForwardIterator, and the value type of InputIt is the same as that of OutputIt, this function compare *d_first to *first.
  Otherwise, this function compares *first to a local element copy.
  For the overloads with an ExecutionPolicy, there may be a performance cost if the value type of ForwardIterator1 is not both CopyConstructible and CopyAssignable

.SH Example

  
// Run this code

    #include <string>
    #include <iostream>
    #include <algorithm>
    #include <iterator>

    int main()
    {
        std::string s1 = "The      string    with many       spaces!";
        std::cout << "before: " << s1 << '\\n';

        std::string s2;
        std::unique_copy(s1.begin(), s1.end(), std::back_inserter(s2),
                         [](char c1, char c2){ return c1 == ' ' && c2 == ' '; });

        std::cout << "after:  " << s2 << '\\n';
    }

.SH Output:

    before: The      string    with many       spaces!
    after:  The string with many spaces!


.SH See also


                finds the first two adjacent items that are equal (or satisfy a given predicate)
  adjacent_find \fI(function template)\fP
                removes consecutive duplicate elements in a range
  unique        \fI(function template)\fP




