.TH std::unique 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unique \- std::unique

.SH Synopsis
   Defined in header <algorithm>
   template< class ForwardIt >                                                                               \fI(until C++20)\fP
   ForwardIt unique( ForwardIt first, ForwardIt last );
   template< class ForwardIt >                                                                               \fI(since C++20)\fP
   constexpr ForwardIt unique( ForwardIt first, ForwardIt last );
   template< class ExecutionPolicy, class ForwardIt >                                                    \fB(2)\fP \fI(since C++17)\fP
   ForwardIt unique( ExecutionPolicy&& policy, ForwardIt first, ForwardIt last );                    \fB(1)\fP
   template< class ForwardIt, class BinaryPredicate >                                                                      \fI(until C++20)\fP
   ForwardIt unique( ForwardIt first, ForwardIt last, BinaryPredicate p );
   template< class ForwardIt, class BinaryPredicate >                                                    \fB(3)\fP               \fI(since C++20)\fP
   constexpr ForwardIt unique( ForwardIt first, ForwardIt last, BinaryPredicate p );
   template< class ExecutionPolicy, class ForwardIt, class BinaryPredicate >                                 \fB(4)\fP           \fI(since C++17)\fP
   ForwardIt unique( ExecutionPolicy&& policy, ForwardIt first, ForwardIt last, BinaryPredicate p );

   Eliminates all but the first element from every consecutive group of equivalent elements from the range [first, last) and returns a past-the-end iterator for the new logical end of the range.

   Removing is done by shifting the elements in the range in such a way that elements to be erased are overwritten. Relative order of the elements that remain is preserved and the physical size of the container is unchanged. Iterators pointing to an element between the new logical end and the physical end of the range are still dereferenceable, but the elements themselves have unspecified values. A call to unique is typically followed by a call to a container's erase method, which erases the unspecified values and reduces the physical size of the container to match its new logical size.

   1) Elements are compared using operator==. The behavior is undefined if it is not an equivalence relation.
   3) Elements are compared using the given binary predicate p. The behavior is undefined if it is not an equivalence relation.
   2,4) Same as (1,3), but executed according to policy. These overloads do not participate in overload resolution unless std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true.

.SH Parameters

   first, last - the range of elements to process
   policy      - the execution policy to use. See execution policy for details.
                 binary predicate which returns true if the elements should be treated as equal.

                 The signature of the predicate function should be equivalent to the following:

   p           - bool pred(const Type1 &a, const Type2 &b);

                 While the signature does not need to have const &, the function must not modify the objects passed to it and must be able to accept all values of type (possibly const) Type1 and Type2 regardless of value category (thus, Type1 & is not allowed
                 , nor is Type1 unless for Type1 a move is equivalent to a copy
                 \fI(since C++11)\fP).
                 The types Type1 and Type2 must be such that an object of type ForwardIt can be dereferenced and then implicitly converted to both of them. 
.SH Type requirements
   -
   ForwardIt must meet the requirements of LegacyForwardIterator.
   -
   The type of dereferenced ForwardIt must meet the requirements of MoveAssignable.

.SH Return value

   Forward iterator to the new end of the range

.SH Complexity

   For nonempty ranges, exactly std::distance(first,last) -1 applications of the corresponding predicate.

.SH Exceptions

   The overloads with a template parameter named ExecutionPolicy report errors as follows:

     * If execution of a function invoked as part of the algorithm throws an exception and ExecutionPolicy is one of the standard policies, std::terminate is called. For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Possible implementation

.SH First version
   template<class ForwardIt>
   ForwardIt unique(ForwardIt first, ForwardIt last)
   {
       if (first == last)
           return last;

       ForwardIt result = first;
       while (++first != last) {
           if (!(*result == *first) && ++result != first) {
               *result = std::move(*first);
           }
       }
       return ++result;
   }
.SH Second version
   template<class ForwardIt, class BinaryPredicate>
   ForwardIt unique(ForwardIt first, ForwardIt last, BinaryPredicate p)
   {
       if (first == last)
           return last;

       ForwardIt result = first;
       while (++first != last) {
           if (!p(*result, *first) && ++result != first) {
               *result = std::move(*first);
           }
       }
       return ++result;
   }

.SH Example

   
// Run this code

 #include <iostream>
 #include <algorithm>
 #include <vector>
 #include <string>
 #include <cctype>

 int main()
 {
     // remove duplicate elements
     std::vector<int> v{1,2,3,1,2,3,3,4,5,4,5,6,7};
     std::sort(v.begin(), v.end()); // 1 1 2 2 3 3 3 4 4 5 5 6 7
     auto last = std::unique(v.begin(), v.end());
     // v now holds {1 2 3 4 5 6 7 x x x x x x}, where 'x' is indeterminate
     v.erase(last, v.end());
     for (int i : v)
       std::cout << i << " ";
     std::cout << "\\n";
 }

.SH Output:

 1 2 3 4 5 6 7

.SH See also

   adjacent_find finds the first two adjacent items that are equal (or satisfy a given predicate)
                 \fI(function template)\fP
   unique_copy   creates a copy of some range of elements that contains no consecutive duplicates
                 \fI(function template)\fP
   remove        removes elements satisfying specific criteria
   remove_if     \fI(function template)\fP
   unique        removes consecutive duplicate elements
                 \fI(public member function of std::list<T,Allocator>)\fP
