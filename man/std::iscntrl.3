.TH std::iscntrl 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::iscntrl \- std::iscntrl

.SH Synopsis

  Defined in header <cctype>
  int iscntrl( int ch );

  Checks if the given character is a control character as classified by the currently installed C locale. In the default, "C" locale, the control characters are the characters with the codes 0x00-0x1F and 0x7F.
  The behavior is undefined if the value of ch is not representable as unsigned char and is not equal to EOF.

.SH Parameters


  ch - character to classify


.SH Return value

  Non-zero value if the character is a control character, zero otherwise.

.SH Notes

  Like all other functions from <cctype>, the behavior of std::iscntrl is undefined if the argument's value is neither representable as unsigned char nor equal to EOF. To use these functions safely with plain chars (or signed chars), the argument should first be converted to unsigned char:

    bool my_iscntrl(char ch)
    {
        return std::iscntrl(static_cast<unsigned char>(ch));
    }

  Similarly, they should not be directly used with standard algorithms when the iterator's value type is char or signed char. Instead, convert the value to unsigned char first:

    int count_cntrls(const std::string& s)
    {
        return std::count_if(s.begin(), s.end(),
                          // static_cast<int(*)(int)>(std::iscntrl)         // wrong
                          // [](int c){ return std::iscntrl(c); }           // wrong
                          // [](char c){ return std::iscntrl(c); }          // wrong
                             [](unsigned char c){ return std::iscntrl(c); } // correct
                            );
    }


.SH Example

  
// Run this code

    #include <iostream>
    #include <cctype>
    #include <clocale>

    int main()
    {
        unsigned char c = '\\x94'; // the control code CCH in ISO-8859-1

        std::cout << "iscntrl(\\'\\\\x94\\', default C locale) returned "
                   << std::boolalpha << (bool)std::iscntrl(c) << '\\n';

        std::setlocale(LC_ALL, "en_GB.iso88591");
        std::cout << "iscntrl(\\'\\\\x94\\', ISO-8859-1 locale) returned "
                  << std::boolalpha << (bool)std::iscntrl(c) << '\\n';

    }

.SH Output:

    iscntrl('\\x94', default C locale) returned false
    iscntrl('\\x94', ISO-8859-1 locale) returned true



.SH See also


                       checks if a character is classified as a control character by a locale
  iscntrl(std::locale) \fI(function template)\fP
                       checks if a wide character is a control character
  iswcntrl             \fI(function)\fP


  ASCII values                                               iscntrl  isprint  isspace  isblank  isgraph  ispunct  isalnum  isalpha  isupper  islower  isdigit  isxdigit
  decimal hexadecimal octal     characters                   iswcntrl iswprint iswspace iswblank iswgraph iswpunct iswalnum iswalpha iswupper iswlower iswdigit iswxdigit

  0–8   \\x0–\\x8   \\0–\\10  control codes (NUL, etc.)    ≠0     0        0        0        0        0        0        0        0        0        0        0
  9       \\x9         \\11       tab (\\t)                     ≠0     0        ≠0     ≠0     0        0        0        0        0        0        0        0
  10–13 \\xA–\\xD   \\12–\\15 whitespaces (\\n, \\v, \\f, \\r) ≠0     0        ≠0     0        0        0        0        0        0        0        0        0
  14–31 \\xE–\\x1F  \\16–\\37 control codes                ≠0     0        0        0        0        0        0        0        0        0        0        0
  32      \\x20        \\40       space                        0        ≠0     ≠0     ≠0     0        0        0        0        0        0        0        0
  33–47 \\x21–\\x2F \\41–\\57 !"#$%&'()*+,-./              0        ≠0     0        0        ≠0     ≠0     0        0        0        0        0        0
  48–57 \\x30–\\x39 \\60–\\71 0123456789                   0        ≠0     0        0        ≠0     0        ≠0     0        0        0        ≠0     ≠0
  58–64 \\x3A–\\x40 \\72–\\100:;<=>?@                      0        ≠0     0        0        ≠0     ≠0     0        0        0        0        0        0
  65–70 \\x41–\\x46 \\101–\\10ABCDEF                       0        ≠0     0        0        ≠0     0        ≠0     ≠0     ≠0     0        0        ≠0
  71–90 \\x47–\\x5A \\107–\\13GHIJKLMNOP                   0        ≠0     0        0        ≠0     0        ≠0     ≠0     ≠0     0        0        0
                                QRSTUVWXYZ
  91–96 \\x5B–\\x60 \\133–\\14[\\]^_`                       0        ≠0     0        0        ≠0     ≠0     0        0        0        0        0        0
  97–102\\x61–\\x66 \\141–\\14abcdef                       0        ≠0     0        0        ≠0     0        ≠0     ≠0     0        ≠0     0        ≠0
  103–12\\x67–\\x7A \\147–\\17ghijklmnop                   0        ≠0     0        0        ≠0     0        ≠0     ≠0     0        ≠0     0        0
                                qrstuvwxyz
  123–12\\x7B–\\x7E \\172–\\17{|}~                         0        ≠0     0        0        ≠0     ≠0     0        0        0        0        0        0
  127     \\x7F        \\177      backspace character (DEL)    ≠0     0        0        0        0        0        0        0        0        0        0        0




