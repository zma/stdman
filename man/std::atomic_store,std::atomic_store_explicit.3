.TH std::atomic_store,std::atomic_store_explicit 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::atomic_store,std::atomic_store_explicit \- std::atomic_store,std::atomic_store_explicit

.SH Synopsis
   Defined in header <atomic>
   template< class T >

   void atomic_store( std::atomic<T>* obj,

   typename std::atomic<T>::value_type desr ) noexcept;
   template< class T >

   void atomic_store( volatile std::atomic<T>* obj,

   typename std::atomic<T>::value_type desr ) noexcept;
   template< class T >                                       \fB(1)\fP \fI(since C++11)\fP

   void atomic_store_explicit( std::atomic<T>* obj,
   typename std::atomic<T>::value_type desr,

   std::memory_order order) noexcept;                                          \fB(2)\fP \fI(since C++11)\fP
   template< class T >

   void atomic_store_explicit( volatile std::atomic<T>* obj,
   typename std::atomic<T>::value_type desr,

   std::memory_order order) noexcept;

   1) Atomically replaces the value pointed to by obj with the value of desr as if by obj->store(desr)
   2) Atomically replaces the value pointed to by obj with the value of desr as if by obj->store(desr, order)

.SH Parameters

   obj   - pointer to the atomic object to modify
   desr  - the value to store in the atomic object
   order - the memory synchronization ordering for this operation: only std::memory_order_relaxed, std::memory_order_release and std::memory_order_seq_cst are permitted.

.SH Return value

   none.

  Defect reports

   The following behavior-changing defect reports were applied retroactively to previously published C++ standards.

     DR    Applied to                         Behavior as published                                       Correct behavior
   P0558R1 C++11      exact type match required because T is deduced from multiple arguments T is deduced from the atomic argument only

.SH See also

   store                                       atomically replaces the value of the atomic object with a non-atomic argument
                                               \fI(public member function of std::atomic<T>)\fP
   atomic_load
   atomic_load_explicit                        atomically obtains the value stored in an atomic object
   \fI(C++11)\fP                                     \fI(function template)\fP
   \fI(C++11)\fP
   memory_order                                defines memory ordering constraints for the given atomic operation
   \fI(C++11)\fP                                     \fI(enum)\fP
   std::atomic_store(std::shared_ptr)          specializes atomic operations for std::shared_ptr
   std::atomic_store_explicit(std::shared_ptr) \fI(function template)\fP
