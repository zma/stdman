.TH std::is_standard_layout 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_standard_layout \- std::is_standard_layout

.SH Synopsis

Defined in header <type_traits>
template< class T >              \fI(since C++11)\fP
struct is_standard_layout;

If T is a standard layout type (that is, a scalar type, a standard-layout class, or an array of such type/class, possibly cv-qualified), provides the member constant value equal true. For any other type, value is false.
A standard-layout_class is a class that satisfies StandardLayoutType.
The behavior is undefined if std::remove_all_extents_t<T> is an incomplete type and not (possibly cv-qualified) void.

.SH Template parameters


T - a type to check


Helper variable template


template< class T >                                                         \fI(since C++17)\fP
inline constexpr bool is_standard_layout_v = is_standard_layout<T>::value;


Inherited from std::integral_constant


.SH Member constants



value    true if T is a standard-layout type , false otherwise
         \fI(public static member constant)\fP
\fB[static]\fP


.SH Member functions


              converts the object to bool, returns value
operator bool \fI(public member function)\fP

operator()    returns value
              \fI(public member function)\fP
\fI(C++14)\fP


.SH Member types


Type       Definition
value_type bool
type       std::integral_constant<bool, value>


.SH Notes

A pointer to a standard-layout class may be converted (with reinterpret_cast) to a pointer to its first non-static data member and vice versa.
If a standard-layout union holds two or more standard-layout structs, it is permitted to inspect the common initial part of them.
The macro offsetof can only be used with standard-layout classes.

.SH Example


// Run this code

  #include <iostream>
  #include <type_traits>

  struct A {
      int m;
  };

  struct B {
      int m1;
  private:
      int m2;
  };

  struct C {
      virtual void foo();
  };

  int main()
  {
      std::cout << std::boolalpha;
      std::cout << std::is_standard_layout<A>::value << '\\n';
      std::cout << std::is_standard_layout<B>::value << '\\n';
      std::cout << std::is_standard_layout<C>::value << '\\n';
  }

.SH Output:

  true
  false
  false


.SH See also



is_trivially_copyable        checks if a type is trivially copyable
                             \fI(class template)\fP
\fI(C++11)\fP

is_pod                       checks if a type is a plain-old data (POD) type
                             \fI(class template)\fP
\fI(C++11)\fP(deprecated in C++20)
                             byte offset from the beginning of a standard-layout type to specified member
offsetof                     \fI(function macro)\fP




