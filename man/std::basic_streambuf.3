.TH std::basic_streambuf 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_streambuf \- std::basic_streambuf

.SH Synopsis

Defined in header <streambuf>
template<
class CharT,
class Traits = std::char_traits<CharT>
> class basic_streambuf;

The class basic_streambuf controls input and output to a character sequence. It includes and provides access to
1) The controlled character sequence, also called the buffer, which may contain input sequence (also called get area) for buffering the input operations and/or output sequence (also called put area) for buffering the output operations.
2) The associated character sequence, also called source (for input) or sink (for output). This may be an entity that is accessed through OS API (file, TCP socket, serial port, other character device), or it may be an object (std::vector, array, string literal), that can be interpreted as a character source or sink.
The I/O stream objects std::basic_istream and std::basic_ostream, as well as all objects derived from them (std::ofstream, std::stringstream, etc), are implemented entirely in terms of std::basic_streambuf.
The controlled character sequence is an array of CharT which, at all times, represents a subsequence, or a "window" into the associated character sequence. Its state is described by three pointers:
1) The beginning pointer, always points at the lowest element of the buffer
2) The next pointer, points at the element that is the next candidate for reading or writing
3) The end pointer, points one past the end of the buffer.
A basic_streambuf object may support input (in which case the buffer described by the beginning, next, and end pointers is called get area), output (put area), or input and output simultaneously. In latter case, six pointers are tracked, which may all point to elements of the same character array or two individual arrays.
If the next pointer is less than the end pointer in the put area, a write position is available. The next pointer can be dereferenced and assigned to.
If the next pointer is less than the end pointer in the get area, a read position is available. The next pointer can be dereferenced and read from.
If the next pointer is greater than the beginning pointer in a get area, a putback position is available, and the next pointer may be decremented, dereferenced, and assigned to, in order to put a character back into the get area.
The character representation and encoding in the controlled sequence may be different from the character representations in the associated sequence, in which case a std::codecvt locale facet is typically used to perform the conversion. Common examples are UTF-8 (or other multibyte) files accessed through std::wfstream objects: the controlled sequence consists of wchar_t characters, but the associated sequence consists of bytes.
Typical implementation of the std::basic_streambuf base class holds only the six CharT* pointers and a copy of std::locale as data members. In addition, implementations may keep cached copies of locale facets, which are invalidated whenever imbue() is called. The concrete buffers such as std::basic_filebuf or std::basic_stringbuf are derived from std::basic_streambuf.
 std-streambuf.svg
Two convenience typedefs are provided by the standard library

Defined in header <streambuf>
Type       Definition
streambuf  basic_streambuf<char>
wstreambuf basic_streambuf<wchar_t>


.SH Member types


Member type Definition
char_type   CharT
traits_type Traits; the program is ill-formed if Traits::char_type is not CharT.
int_type    Traits::int_type
pos_type    Traits::pos_type
off_type    Traits::off_type


.SH Member functions



destructor            destructs the basic_streambuf object
                      \fI(virtual public member function)\fP
\fB[virtual]\fP

.SH Locales

                      invokes imbue()
pubimbue              \fI(public member function)\fP
                      obtains a copy of the associated locale
getloc                \fI(public member function)\fP

.SH Positioning

                      invokes setbuf()
pubsetbuf             \fI(public member function)\fP
                      invokes seekoff()
pubseekoff            \fI(public member function)\fP
                      invokes seekpos()
pubseekpos            \fI(public member function)\fP
                      invokes sync()
pubsync               \fI(public member function)\fP

.SH Get area

                      obtains the number of characters immediately available in the get area
in_avail              \fI(public member function)\fP
                      advances the input sequence, then reads one character without advancing again
snextc                \fI(public member function)\fP
                      reads one character from the input sequence and advances the sequence
sbumpc                \fI(public member function)\fP

stossc                advances the input sequence as if by calling sbumpc() and discarding the result
                      \fI(public member function)\fP
(deprecated in C++98)
(removed in C++17)
                      reads one character from the input sequence without advancing the sequence
sgetc                 \fI(public member function)\fP
                      invokes xsgetn()
sgetn                 \fI(public member function)\fP

.SH Put area

                      writes one character to the put area and advances the next pointer
sputc                 \fI(public member function)\fP
                      invokes xsputn()
sputn                 \fI(public member function)\fP

.SH Putback

                      puts one character back in the input sequence
sputbackc             \fI(public member function)\fP
                      moves the next pointer in the input sequence back by one
sungetc               \fI(public member function)\fP

.SH Protected member functions

                      constructs a basic_streambuf object
constructor           \fI(protected member function)\fP

operator=             replaces a basic_streambuf object
                      \fI(protected member function)\fP
\fI(C++11)\fP

swap                  swaps two basic_streambuf objects
                      \fI(protected member function)\fP
\fI(C++11)\fP

.SH Locales


imbue                 changes the associated locale
                      \fI(virtual protected member function)\fP
\fB[virtual]\fP

.SH Positioning


setbuf                replaces the buffer with user-defined array, if permitted
                      \fI(virtual protected member function)\fP
\fB[virtual]\fP

seekoff               repositions the next pointer in the input sequence, output sequence, or both, using relative addressing
                      \fI(virtual protected member function)\fP
\fB[virtual]\fP

seekpos               repositions the next pointer in the input sequence, output sequence, or both using absolute addressing
                      \fI(virtual protected member function)\fP
\fB[virtual]\fP

sync                  synchronizes the buffers with the associated character sequence
                      \fI(virtual protected member function)\fP
\fB[virtual]\fP

.SH Get area


showmanyc             obtains the number of characters available for input in the associated input sequence, if known
                      \fI(virtual protected member function)\fP
\fB[virtual]\fP

underflow             reads characters from the associated input sequence to the get area
                      \fI(virtual protected member function)\fP
\fB[virtual]\fP

uflow                 reads characters from the associated input sequence to the get area and advances the next pointer
                      \fI(virtual protected member function)\fP
\fB[virtual]\fP

xsgetn                reads multiple characters from the input sequence
                      \fI(virtual protected member function)\fP
\fB[virtual]\fP

eback                 returns a pointer to the beginning, current character and the end of the get area
gptr                  \fI(protected member function)\fP
egptr
                      advances the next pointer in the input sequence
gbump                 \fI(protected member function)\fP
                      repositions the beginning, next, and end pointers of the input sequence
setg                  \fI(protected member function)\fP

.SH Put area


xsputn                writes multiple characters to the output sequence
                      \fI(virtual protected member function)\fP
\fB[virtual]\fP

overflow              writes characters to the associated output sequence from the put area
                      \fI(virtual protected member function)\fP
\fB[virtual]\fP

pbase                 returns a pointer to the beginning, current character and the end of the put area
pptr                  \fI(protected member function)\fP
epptr
                      advances the next pointer of the output sequence
pbump                 \fI(protected member function)\fP
                      repositions the beginning, next, and end pointers of the output sequence
setp                  \fI(protected member function)\fP

.SH Putback


pbackfail             puts a character back into the input sequence, possibly modifying the input sequence
                      \fI(virtual protected member function)\fP
\fB[virtual]\fP




