.TH std::independent_bits_engine 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::independent_bits_engine \- std::independent_bits_engine

.SH Synopsis

Defined in header <random>
template<
class Engine,
std::size_t W,                    \fI(since C++11)\fP
class UIntType
> class independent_bits_engine;

independent_bits_engine is a random number engine adaptor that produces random numbers with different number of bits than that of the wrapped engine.

.SH Template parameters


Engine   - the type of the wrapped engine
W        - the number of bits the generated numbers should have
UIntType - the type of the generated random numbers. The type must be unsigned integral type.
.SH Type requirements
-
Engine must meet the requirements of RandomNumberEngine.
-
W must be greater than zero, and no greater than std::numeric_limits<UIntType>::digits.


.SH Member types


Member type Definition
result_type UIntType


.SH Member functions


              constructs the engine adaptor
constructor   \fI(public member function)\fP
              sets the state of the underlying engine
seed          \fI(public member function)\fP
              returns the underlying engine
base          \fI(public member function)\fP

.SH Generation

              advances the state of the underlying engine and returns the generated value
operator()    \fI(public member function)\fP
              advances the adaptor's state by a specified amount
discard       \fI(public member function)\fP

.SH Characteristics


min           gets the smallest possible value in the output range (always zero).
              \fI(public static member function)\fP
\fB[static]\fP
              gets the largest possible value in the output range (always 2w
max           -1).
              \fI(public static member function)\fP
\fB[static]\fP


.SH Non-member functions


           compares the internal states of the adaptors and underlying engines
operator== \fI(function)\fP
operator!=
           performs stream input and output on pseudo-random number engine adaptor
operator<< \fI(function)\fP
operator>>




