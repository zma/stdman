.TH std::basic_string 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string \- std::basic_string

.SH Synopsis

Defined in header <string>
template<
class CharT,
class Traits = std::char_traits<CharT>,                        \fB(1)\fP
class Allocator = std::allocator<CharT>
> class basic_string;
namespace pmr {
template <class CharT, class Traits = std::char_traits<CharT>>
using basic_string = std::basic_string< CharT, Traits,         \fB(2)\fP \fI(since C++17)\fP
std::polymorphic_allocator<CharT>>
}

The class template basic_string stores and manipulates sequences of char-like objects, which are non-array objects of trivial standard-layout type. The class is dependent neither on the character type nor on the nature of operations on that type. The definitions of the operations are supplied via the Traits template parameter - a specialization of std::char_traits or a compatible traits class. Traits::char_type and CharT must name the same type; otherwise the program is ill-formed.

The elements of a basic_string are stored contiguously, that is, for a basic_string s, &*(s.begin() + n) == &*s.begin() + n for any n in [0, s.size()), or, equivalently, a pointer to s[0] can be passed to functions that expect a pointer to the first element of a CharT[] array. \fI(since C++11)\fP

std::basic_string satisfies the requirements of AllocatorAwareContainer, SequenceContainer
and ContiguousContainer
\fI(since C++17)\fP
Several typedefs for common character types are provided:

Defined in header <string>
Type                        Definition
std::string                 std::basic_string<char>
std::wstring                std::basic_string<wchar_t>
std::u8string (C++20)       std::basic_string<char8_t>
std::u16string \fI(C++11)\fP      std::basic_string<char16_t>
std::u32string \fI(C++11)\fP      std::basic_string<char32_t>
std::pmr::string \fI(C++17)\fP    std::pmr::basic_string<char>
std::pmr::wstring \fI(C++17)\fP   std::pmr::basic_string<wchar_t>
std::pmr::u8string (C++20)  std::pmr::basic_string<char8_t>
std::pmr::u16string \fI(C++17)\fP std::pmr::basic_string<char16_t>
std::pmr::u32string \fI(C++17)\fP std::pmr::basic_string<char32_t>


.SH Template parameters


CharT     - character type
Traits    - traits class specifying the operations on the character type
Allocator - Allocator type used to allocate internal storage


.SH Member types


Member type            Definition
traits_type            Traits
value_type             CharT
allocator_type         Allocator

size_type              Allocator::size_type                        \fI(until C++11)\fP
                       std::allocator_traits<Allocator>::size_type \fI(since C++11)\fP


difference_type        Allocator::difference_type                        \fI(until C++11)\fP
                       std::allocator_traits<Allocator>::difference_type \fI(since C++11)\fP


reference              Allocator::reference \fI(until C++11)\fP
                       value_type&          \fI(since C++11)\fP


const_reference        Allocator::const_reference \fI(until C++11)\fP
                       const value_type&          \fI(since C++11)\fP


pointer                Allocator::pointer                        \fI(until C++11)\fP
                       std::allocator_traits<Allocator>::pointer \fI(since C++11)\fP


const_pointer          Allocator::const_pointer                        \fI(until C++11)\fP
                       std::allocator_traits<Allocator>::const_pointer \fI(since C++11)\fP

iterator               LegacyRandomAccessIterator
const_iterator         Constant LegacyRandomAccessIterator
reverse_iterator       std::reverse_iterator<iterator>
const_reverse_iterator std::reverse_iterator<const_iterator>


.SH Member functions


                           constructs a basic_string
constructor                \fI(public member function)\fP
                           destroys the string, deallocating internal storage if used
destructor                 \fI(public member function)\fP
                           assigns values to the string
operator=                  \fI(public member function)\fP
                           assign characters to a string
assign                     \fI(public member function)\fP
                           returns the associated allocator
get_allocator              \fI(public member function)\fP

.SH Element access

                           accesses the specified character with bounds checking
at                         \fI(public member function)\fP
                           accesses the specified character
operator[]                 \fI(public member function)\fP

front                      accesses the first character
                           \fI(public member function)\fP
\fI(C++11)\fP

back                       accesses the last character
                           \fI(public member function)\fP
\fI(C++11)\fP
                           returns a pointer to the first character of a string
data                       \fI(public member function)\fP
                           returns a non-modifiable standard C character array version of the string
c_str                      \fI(public member function)\fP

operator_basic_string_view returns a non-modifiable string_view into the entire string
                           \fI(public member function)\fP
\fI(C++17)\fP

.SH Iterators


begin
cbegin                     returns an iterator to the beginning
                           \fI(public member function)\fP

\fI(C++11)\fP

end_
cend                       returns an iterator to the end
                           \fI(public member function)\fP

\fI(C++11)\fP

rbegin
crbegin                    returns a reverse iterator to the beginning
                           \fI(public member function)\fP

\fI(C++11)\fP

rend
crend                      returns a reverse iterator to the end
                           \fI(public member function)\fP

\fI(C++11)\fP

.SH Capacity

                           checks whether the string is empty
empty                      \fI(public member function)\fP
                           returns the number of characters
size                       \fI(public member function)\fP
length
                           returns the maximum number of characters
max_size                   \fI(public member function)\fP
                           reserves storage
reserve                    \fI(public member function)\fP
                           returns the number of characters that can be held in currently allocated storage
capacity                   \fI(public member function)\fP

shrink_to_fit              reduces memory usage by freeing unused memory
                           \fI(public member function)\fP
\fI(C++11)\fP

.SH Operations

                           clears the contents
clear                      \fI(public member function)\fP
                           inserts characters
insert                     \fI(public member function)\fP
                           removes characters
erase                      \fI(public member function)\fP
                           appends a character to the end
push_back                  \fI(public member function)\fP

pop_back                   removes the last character
                           \fI(public member function)\fP
\fI(C++11)\fP
                           appends characters to the end
append                     \fI(public member function)\fP
                           appends characters to the end
operator+=                 \fI(public member function)\fP
                           compares two strings
compare                    \fI(public member function)\fP

starts_with                checks if the string starts with the given prefix
                           \fI(public member function)\fP
(C++20)

ends_with                  checks if the string ends with the given suffix
                           \fI(public member function)\fP
(C++20)
                           replaces specified portion of a string
replace                    \fI(public member function)\fP
                           returns a substring
substr                     \fI(public member function)\fP
                           copies characters
copy                       \fI(public member function)\fP
                           changes the number of characters stored
resize                     \fI(public member function)\fP
                           swaps the contents
swap                       \fI(public member function)\fP

.SH Search

                           find characters in the string
find                       \fI(public member function)\fP
                           find the last occurrence of a substring
rfind                      \fI(public member function)\fP
                           find first occurrence of characters
find_first_of              \fI(public member function)\fP
                           find first absence of characters
find_first_not_of          \fI(public member function)\fP
                           find last occurrence of characters
find_last_of               \fI(public member function)\fP
                           find last absence of characters
find_last_not_of           \fI(public member function)\fP

.SH Constants


npos                       special value. The exact meaning depends on the context
                           \fI(public static member constant)\fP
\fB[static]\fP


.SH Non-member functions


                             concatenates two strings or a string and a char
operator+                    \fI(function template)\fP

operator==
operator!=                   lexicographically compares two strings
operator<                    \fI(function template)\fP
operator>
operator<=
operator>=
                             specializes the std::swap algorithm
std::swap(std::basic_string) \fI(function template)\fP

erase(std::basic_string)     Erases all elements satisfying specific criteria
erase_if(std::basic_string)  \fI(function template)\fP

(C++20)

.SH Input/output

                             performs stream input and output on strings
operator<<                   \fI(function template)\fP
operator>>
                             read data from an I/O stream into a string
getline                      \fI(function template)\fP

.SH Numeric conversions


stoi
stol
stoll                        converts a string to a signed integer
                             \fI(function)\fP
\fI(C++11)\fP
\fI(C++11)\fP
\fI(C++11)\fP

stoul
stoull                       converts a string to an unsigned integer
                             \fI(function)\fP
\fI(C++11)\fP
\fI(C++11)\fP

stof
stod
stold                        converts a string to a floating point value
                             \fI(function)\fP
\fI(C++11)\fP
\fI(C++11)\fP
\fI(C++11)\fP

to_string                    converts an integral or floating point value to string
                             \fI(function)\fP
\fI(C++11)\fP

to_wstring                   converts an integral or floating point value to wstring
                             \fI(function)\fP
\fI(C++11)\fP


.SH Literals


Defined in inline namespace std::literals::string_literals

operator""s Converts a character array literal to basic_string
            \fI(function)\fP
\fI(C++14)\fP


.SH Helper classes



std::hash<std::string>
std::hash<std::u8string>
std::hash<std::u16string>
std::hash<std::u32string>
std::hash<std::wstring>
std::hash<std::pmr::string>
std::hash<std::pmr::u8string>
std::hash<std::pmr::u16string>
std::hash<std::pmr::u32string>
std::hash<std::pmr::wstring>   hash support for strings
                               \fI(class template specialization)\fP
\fI(C++11)\fP
(C++20)
\fI(C++11)\fP
\fI(C++11)\fP
\fI(C++11)\fP
(C++20)
(C++20)
(C++20)
(C++20)
(C++20)


Deduction_guides\fI(since C++17)\fP




