.TH std::basic_regex 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_regex \- std::basic_regex

.SH Synopsis

  Defined in header <regex>
  template <
  class CharT,                             \fI(since C++11)\fP
  class Traits = std::regex_traits<CharT>
  > class basic_regex;

  The class template basic_regex provides a general framework for holding regular expressions.
  Several specializations for common character types are provided:

  Defined in header <regex>
  Type   Definition
  regex  basic_regex<char>
  wregex basic_regex<wchar_t>


.SH Member types


  Member type Definition
  value_type  CharT
  traits_type Traits
  string_type Traits::string_type
  locale_type Traits::locale_type
  flag_type   std::regex_constants::syntax_option_type


.SH Member functions


                    constructs the regex object
  constructor       \fI(public member function)\fP
                    destructs the regex object
  destructor        \fI(public member function)\fP
                    assigns the contents
  operator=         \fI(public member function)\fP
                    assigns the contents
  assign            \fI(public member function)\fP

.SH Observers

                    returns the number of marked sub-expressions within the regular expression
  mark_count        \fI(public member function)\fP
                    returns the syntax flags
  flags             \fI(public member function)\fP

.SH Locale

                    get locale information
  getloc            \fI(public member function)\fP
                    set locale information
  imbue             \fI(public member function)\fP

.SH Modifiers

                    swaps the contents
  swap              \fI(public member function)\fP

.SH Constants

  Value             Effect(s)
  icase             Character matching should be performed without regard to case.
  nosubs            When performing matches, all marked sub-expressions (expr) are treated as non-marking sub-expressions (?:expr). No matches are stored in the supplied std::regex_match structure and mark_count() is zero
  optimize          Instructs the regular expression engine to make matching faster, with the potential cost of making construction slower. For example, this might mean converting a non-deterministic FSA to a deterministic FSA.
  collate           Character ranges of the form "[a-b]" will be locale sensitive.
  multiline \fI(C++17)\fP Specifies that ^ shall match the beginning of a line and $ shall match the end of a line, if the ECMAScript engine is selected.
  ECMAScript        Use the Modified_ECMAScript_regular_expression_grammar
  basic             Use the basic POSIX regular expression grammar (grammar_documentation).
  extended          Use the extended POSIX regular expression grammar (grammar_documentation).
  awk               Use the regular expression grammar used by the awk utility in POSIX (grammar_documentation)
  grep              Use the regular expression grammar used by the grep utility in POSIX. This is effectively the same as the basic option with the addition of newline '\\n' as an alternation separator.
  egrep             Use the regular expression grammar used by the grep utility, with the -E option, in POSIX. This is effectively the same as the extended option with the addition of newline '\\n' as an alternation separator in addtion to '|'.

  At most one grammar option must be chosen out of ECMAScript, basic, extended, awk, grep, egrep. If no grammar is chosen, ECMAScript is assumed to be selected. The other options serve as modifiers, such that std::regex("meow", std::regex::icase) is equivalent to std::regex("meow", std::regex::ECMAScript|std::regex::icase)
  The member constants in basic_regex are duplicates of the syntax_option_type constants defined in the namespace std::regex_constants.

.SH Non-member functions



  std::swap(std::basic_regex) specializes the std::swap algorithm
                              \fI(function template)\fP
  \fI(C++11)\fP


  Deduction_guides\fI(since C++17)\fP




