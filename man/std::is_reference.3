.TH std::is_reference 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_reference \- std::is_reference

.SH Synopsis

Defined in header <type_traits>
template< class T >              \fI(since C++11)\fP
struct is_reference;

If T is a reference type (lvalue reference or rvalue reference), provides the member constant value equal true. For any other type, value is false.

.SH Template parameters


T - a type to check


Helper variable template


template< class T >                                             \fI(since C++17)\fP
inline constexpr bool is_reference_v = is_reference<T>::value;


Inherited from std::integral_constant


.SH Member constants



value    true if T is a reference type , false otherwise
         \fI(public static member constant)\fP
\fB[static]\fP


.SH Member functions


              converts the object to bool, returns value
operator bool \fI(public member function)\fP

operator()    returns value
              \fI(public member function)\fP
\fI(C++14)\fP


.SH Member types


Type       Definition
value_type bool
type       std::integral_constant<bool, value>


.SH Possible implementation



  template <class T> struct is_reference      : std::false_type {};
  template <class T> struct is_reference<T&>  : std::true_type {};
  template <class T> struct is_reference<T&&> : std::true_type {};



.SH Example


// Run this code

  #include <iostream>
  #include <type_traits>

  class A {};

  int main()
  {
      std::cout << std::boolalpha;
      std::cout << std::is_reference<A>::value << '\\n';
      std::cout << std::is_reference<A&>::value << '\\n';
      std::cout << std::is_reference<A&&>::value << '\\n';
      std::cout << std::is_reference<int>::value << '\\n';
      std::cout << std::is_reference<int&>::value << '\\n';
      std::cout << std::is_reference<int&&>::value << '\\n';
  }

.SH Output:

  false
  true
  true
  false
  true
  true


.SH See also



is_lvalue_reference checks if a type is a lvalue reference
                    \fI(class template)\fP
\fI(C++11)\fP

is_rvalue_reference checks if a type is a rvalue reference
                    \fI(class template)\fP
\fI(C++11)\fP




