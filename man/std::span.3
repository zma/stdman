.TH std::span 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::span \- std::span

.SH Synopsis
   Defined in header <span>
   template<

   class T,                                  \fI(since C++20)\fP
   std::size_t Extent = std::dynamic_extent

   > class span;

   The class template span describes an object that can refer to a contiguous sequence of objects with the first element of the sequence at position zero. A span can either have a static extent, in which case the number of elements in the sequence is known and encoded in the type, or a dynamic extent.

   A typical implementation holds only two members: a pointer to T and a size.

.SH Template parameters

   T      - element type; must be a complete type that is not an abstract class type
   Extent - the number of elements in the sequence, or std::dynamic_extent if dynamic

.SH Member types

   Member type            Definition
   element_type           T
   value_type             std::remove_cv_t<T>
   index_type             std::size_t
   difference_type        std::ptrdiff_t
   pointer                T*
   const_pointer          const T*
   reference              T&
   const_reference        const T&
   iterator               implementation-defined LegacyRandomAccessIterator, ConstexprIterator, and LegacyContiguousIterator whose value_type is value_type
   const_iterator         implementation-defined constant LegacyRandomAccessIterator, ConstexprIterator, and LegacyContiguousIterator whose value_type is value_type
   reverse_iterator       std::reverse_iterator<iterator>
   const_reverse_iterator std::reverse_iterator<const_iterator>

   Note: iterator is a mutable iterator if T is not const-qualified.

   All requirements on the iterator types of a Container applies to the iterator and const_iterator types of span as well.

  Member constant

   static constexpr std::size_t extent = Extent;

.SH Member functions

   constructor   constructs a span
                 \fI(public member function)\fP
   operator=     assigns a span
                 \fI(public member function)\fP
.SH Iterators
   begin         returns an iterator to the beginning of the sequence
   cbegin        \fI(public member function)\fP
   end           returns an iterator to the end of the sequence
   cend          \fI(public member function)\fP
   rbegin        returns a reverse iterator to the beginning of the sequence
   crbegin       \fI(public member function)\fP
   rend          returns a reverse iterator to the end of the sequence
   crend         \fI(public member function)\fP
.SH Element access
   front         access the first element
                 \fI(public member function)\fP
   back          access the last element
                 \fI(public member function)\fP
   operator[]    accesses an element of the sequence
                 \fI(public member function)\fP
   data          returns a pointer to the beginning of the sequence of elements
                 \fI(public member function)\fP
.SH Observers
   size          returns the number of elements in the sequence
                 \fI(public member function)\fP
   size_bytes    returns the size of the sequence in bytes
                 \fI(public member function)\fP
   empty         checks if the sequence is empty
                 \fI(public member function)\fP
         Subviews
   first         obtains a subspan consisting of the first N elements of the sequence
                 \fI(public member function)\fP
   last          obtains a subspan consisting of the last N elements of the sequence
                 \fI(public member function)\fP
   subspan       obtains a subspan
                 \fI(public member function)\fP

.SH Non-member functions

   begin               returns iterators to the beginning and the end of the span
   end                 \fI(function)\fP
   as_bytes            converts a span into a view of its underlying bytes
   as_writable_bytes   \fI(function template)\fP
   std::get(std::span) accesses an element of a static-extent span
                       \fI(function template)\fP

  Non-member constant

   dynamic_extent a constant of type size_t signifying that the span has dynamic extent
   (C++20)        (constant)

.SH Helper classes

   std::tuple_size<std::span>    obtains the size of a static-extent span
                                 \fI(class template specialization)\fP
   std::tuple_element<std::span> obtains the type of the elements of a static-extent span
                                 \fI(class template specialization)\fP

  Deduction guides
