.TH std::unique_lock<Mutex>::try_lock 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unique_lock<Mutex>::try_lock \- std::unique_lock<Mutex>::try_lock

.SH Synopsis

bool try_lock();  \fI(since C++11)\fP

Tries to lock the associated mutex without blocking. Effectively calls mutex()->try_lock().
std::system_error is thrown if there is no associated mutex or if the mutex is already locked by this std::unique_lock.

.SH Parameters

\fI(none)\fP

.SH Return value

true if the ownership of the mutex has been acquired successfully, false otherwise.

.SH Exceptions


* Any exceptions thrown by mutex()->try_lock() (Mutex types do not throw in try_lock, but a custom Lockable might)


* If there is no associated mutex, std::system_error with an error code of std::errc::operation_not_permitted


* If the mutex is already locked by this std::unique_lock, std::system_error with an error code of std::errc::resource_deadlock_would_occur


.SH Example


 This section is incomplete
 Reason: no example


.SH See also


               locks the associated mutex
lock           \fI(public member function)\fP
               attempts to lock the associated TimedLockable mutex, returns if the mutex has been unavailable for the specified time duration
try_lock_for   \fI(public member function)\fP
               tries to lock the associated TimedLockable mutex, returns if the mutex has been unavailable until specified time point has been reached
try_lock_until \fI(public member function)\fP
               unlocks the associated mutex
unlock         \fI(public member function)\fP




