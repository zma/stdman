.TH std::list<T,Allocator>::resize 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::list<T,Allocator>::resize \- std::list<T,Allocator>::resize

.SH Synopsis

  void resize( size_type count, T value = T() );               \fI(until C++11)\fP
  void resize( size_type count );                          \fB(1)\fP \fI(since C++11)\fP
  void resize( size_type count, const value_type& value ); \fB(2)\fP \fI(since C++11)\fP

  Resizes the container to contain count elements.
  If the current size is greater than count, the container is reduced to its first count elements.

  If the current size is less than count, additional elements are appended and initialized with copies of value. \fI(until C++11)\fP
  If the current size is less than count,
  1) additional default-inserted elements are appended                                                           \fI(since C++11)\fP
  2) additional copies of value are appended


.SH Parameters


  count - new size of the container
  value - the value to initialize the new elements with
.SH Type requirements
  -
  T must meet the requirements of DefaultInsertable in order to use overload \fB(1)\fP.
  -
  T must meet the requirements of CopyInsertable in order to use overload \fB(2)\fP.


.SH Return value

  \fI(none)\fP

.SH Complexity

  Linear in the difference between the current size and count.

.SH Example

  
// Run this code

    #include <iostream>
    #include <list>
    int main()
    {
        std::list<int> c = {1, 2, 3};
        std::cout << "The list holds: ";
        for(auto& el: c) std::cout << el << ' ';
        std::cout << '\\n';
        c.resize(5);
        std::cout << "After resize up to 5: ";
        for(auto& el: c) std::cout << el << ' ';
        std::cout << '\\n';
        c.resize(2);
        std::cout << "After resize down to 2: ";
        for(auto& el: c) std::cout << el << ' ';
        std::cout << '\\n';
    }

.SH Output:

    The list holds: 1 2 3
    After resize up to 5: 1 2 3 0 0
    After resize down to 2: 1 2


.SH See also


         returns the number of elements
  size   \fI(public member function)\fP
         inserts elements
  insert \fI(public member function)\fP
         erases elements
  erase  \fI(public member function)\fP




