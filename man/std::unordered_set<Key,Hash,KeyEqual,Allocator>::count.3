.TH std::unordered_set<Key,Hash,KeyEqual,Allocator>::count 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unordered_set<Key,Hash,KeyEqual,Allocator>::count \- std::unordered_set<Key,Hash,KeyEqual,Allocator>::count

.SH Synopsis
   size_type count( const Key& key ) const;                   \fB(1)\fP \fI(since C++11)\fP
   size_type count( const Key& key, std::size_t hash ) const; \fB(1)\fP \fI(since C++20)\fP
   template< class K >                                        \fB(2)\fP \fI(since C++20)\fP
   size_type count( const K& x ) const;
   template< class K >                                        \fB(2)\fP \fI(since C++20)\fP
   size_type count( const K& x, std::size_t hash ) const;

   1) Returns the number of elements with key that compares equal to the specified argument key, which is either 1 or 0 since this container does not allow duplicates.
   2) Returns the number of elements with key that compares equivalent to the specified argument x. This overload only participates in overload resolution if the qualified-id Hash::transparent_key_equal is valid and denotes a type. This assumes that such Hash is callable with both K and Key type, and that its key_equal is transparent, which, together, allows calling this function without constructing an instance of Key.

   If present, the hash parameter may be used to pass a pre-computed hash value as an optimization. The behavior is undefined if invoking hash_function() on the key passed do not produce the same value as hash. \fI(since C++20)\fP

.SH Parameters

   key  - key value of the elements to count
   x    - a value of any type that can be transparently compared with a key
   hash - the hash value of the key

.SH Return value

   1) Number of elements with key key, that is either 1 or 0.
   2) Number of elements with key that compares equivalent to x.

.SH Complexity

   Constant on average, worst case linear in the size of the container.

.SH See also

   find        finds element with specific key
               \fI(public member function)\fP
   equal_range returns range of elements matching a specific key
               \fI(public member function)\fP
