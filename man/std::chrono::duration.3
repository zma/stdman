.TH std::chrono::duration 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::chrono::duration \- std::chrono::duration

.SH Synopsis

  Defined in header <chrono>
  template<
  class Rep,                     \fI(since C++11)\fP
  class Period = std::ratio<1>
  > class duration;

  Class template std::chrono::duration represents a time interval.
  It consists of a count of ticks of type Rep and a tick period, where the tick period is a compile-time rational constant representing the number of seconds from one tick to the next.
  The only data stored in a duration is a tick count of type Rep. If Rep is floating point, then the duration can represent fractions of ticks. Period is included as part of the duration's type, and is only used when converting between different durations.

.SH Member types


  Member type Definition
  rep         Rep, an arithmetic type representing the number of ticks

              Period
  period      \fI(until C++17)\fP
              typename Period::type
              \fI(since C++17)\fP, a std::ratio representing the tick period (i.e. the number of seconds per tick)


.SH Member functions


                  constructs new duration
  constructor     \fI(public member function)\fP
                  assigns the contents
  operator=       \fI(public member function)\fP
                  returns the count of ticks
  count           \fI(public member function)\fP

  zero            returns the special duration value zero
                  \fI(public static member function)\fP
  \fB[static]\fP

  min             returns the special duration value min
                  \fI(public static member function)\fP
  \fB[static]\fP

  max             returns the special duration value max
                  \fI(public static member function)\fP
  \fB[static]\fP
                  implements unary + and unary -
  operator+       \fI(public member function)\fP
  operator-

  operator++      increments or decrements the tick count
  operator++(int) \fI(public member function)\fP
  operator--
  operator--(int)

  operator+=
  operator-=      implements compound assignment between two durations
  operator*=      \fI(public member function)\fP
  operator/=
  operator%=


.SH Non-member functions


                                          specializes the std::common_type trait
  std::common_type<std::chrono::duration> \fI(class template specialization)\fP

  operator+
  operator-                               implements arithmetic operations with durations as arguments
  operator*                               \fI(function template)\fP
  operator/
  operator%

  operator==
  operator!=                              compares two durations
  operator<                               \fI(function template)\fP
  operator<=
  operator>
  operator>=
                                          converts a duration to another, with a different tick interval
  duration_cast                           \fI(function template)\fP

  floor(std::chrono::duration)            converts a duration to another, rounding down
                                          \fI(function template)\fP
  \fI(C++17)\fP

  ceil(std::chrono::duration)             converts a duration to another, rounding up
                                          \fI(function template)\fP
  \fI(C++17)\fP

  round(std::chrono::duration)            converts a duration to another, rounding to nearest, ties to even
                                          \fI(function template)\fP
  \fI(C++17)\fP

  abs(std::chrono::duration)              obtains the absolute value of the duration
                                          \fI(function template)\fP
  \fI(C++17)\fP

  operator<<                              performs stream output on a duration
                                          \fI(function template)\fP
  (C++20)

  to_stream                               outputs a duration into a stream according to the provided format
                                          \fI(function template)\fP
  (C++20)

  from_stream                             parses a duration from a stream according to the provided format
                                          \fI(function template)\fP
  (C++20)


.SH Helper types


  Type                              Definition
  std::chrono::nanoseconds          duration</*signed integer type of at least 64 bits*/, std::nano>
  std::chrono::microseconds         duration</*signed integer type of at least 55 bits*/, std::micro>
  std::chrono::milliseconds         duration</*signed integer type of at least 45 bits*/, std::milli>
  std::chrono::seconds              duration</*signed integer type of at least 35 bits*/>
  std::chrono::minutes              duration</*signed integer type of at least 29 bits*/, std::ratio<60>>
  std::chrono::hours                duration</*signed integer type of at least 23 bits*/, std::ratio<3600>>
  std::chrono::days \fI(since C++20)\fP   duration</*signed integer type of at least 25 bits*/, std::ratio<86400>>
  std::chrono::weeks \fI(since C++20)\fP  duration</*signed integer type of at least 22 bits*/, std::ratio<604800>>
  std::chrono::months \fI(since C++20)\fP duration</*signed integer type of at least 20 bits*/, std::ratio<2629746>>
  std::chrono::years \fI(since C++20)\fP  duration</*signed integer type of at least 17 bits*/, std::ratio<31556952>>

  Note: each of the predefined duration types up to hours covers a range of at least ±292 years.

  Each of the predefined duration types days, weeks, months and years covers a range of at least ±40000 years. years is equal to 365.2425 days (the average length of a Gregorian year). months is equal to 30.436875 days (exactly 1/12 of years).\fI(since C++20)\fP


.SH Helper classes


                          indicates that a duration is convertible to duration with different tick period
  treat_as_floating_point \fI(class template)\fP
                          constructs zero, min, and max values of a tick count of given type
  duration_values         \fI(class template)\fP


.SH Literals


  Defined in inline namespace std::literals::chrono_literals

  operator""h   A std::chrono::duration literal representing hours
                \fI(function)\fP
  \fI(C++14)\fP

  operator""min A std::chrono::duration literal representing minutes
                \fI(function)\fP
  \fI(C++14)\fP

  operator""s   A std::chrono::duration literal representing seconds
                \fI(function)\fP
  \fI(C++14)\fP

  operator""ms  A std::chrono::duration literal representing milliseconds
                \fI(function)\fP
  \fI(C++14)\fP

  operator""us  A std::chrono::duration literal representing microseconds
                \fI(function)\fP
  \fI(C++14)\fP

  operator""ns  A std::chrono::duration literal representing nanoseconds
                \fI(function)\fP
  \fI(C++14)\fP


  Note: the literal suffixes d and y do not refer to days and years but to day and year, respectively. \fI(since C++20)\fP


.SH Example

  This example shows how to define several custom duration types and convert between types:
  
// Run this code

    #include <iostream>
    #include <chrono>

    constexpr auto year = 31556952ll; // seconds in average Gregorian year

    int main()
    {
        using shakes = std::chrono::duration<int, std::ratio<1, 100000000>>;
        using jiffies = std::chrono::duration<int, std::centi>;
        using microfortnights = std::chrono::duration<float, std::ratio<14*24*60*60, 1000000>>;
        using nanocenturies = std::chrono::duration<float, std::ratio<100*year, 1000000000>>;

        std::chrono::seconds sec(1);

        std::cout << "1 second is:\\n";

        // integer scale conversion with no precision loss: no cast
        std::cout << std::chrono::microseconds(sec).count() << " microseconds\\n"
                  << shakes(sec).count() << " shakes\\n"
                  << jiffies(sec).count() << " jiffies\\n";

        // integer scale conversion with precision loss: requires a cast
        std::cout << std::chrono::duration_cast<std::chrono::minutes>(sec).count()
                  << " minutes\\n";

        // floating-point scale conversion: no cast
        std::cout << microfortnights(sec).count() << " microfortnights\\n"
                  << nanocenturies(sec).count() << " nanocenturies\\n";
    }

.SH Output:

    1 second is:
    1000000 microseconds
    100000000 shakes
    100 jiffies
    0 minutes
    0.82672 microfortnights
    0.316887 nanocenturies




