.TH std::unordered_set 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unordered_set \- std::unordered_set

.SH Synopsis

Defined in header <unordered_set>
template<
class Key,
class Hash = std::hash<Key>,                              \fB(1)\fP \fI(since C++11)\fP
class KeyEqual = std::equal_to<Key>,
class Allocator = std::allocator<Key>
> class unordered_set;
namespace pmr {
template <class Key,
class Hash = std::hash<Key>,
class Pred = std::equal_to<Key>>                          \fB(2)\fP \fI(since C++17)\fP
using unordered_set = std::unordered_set<Key, Hash, Pred,
std::pmr::polymorphic_allocator<Key>>;
}

Unordered set is an associative container that contains a set of unique objects of type Key. Search, insertion, and removal have average constant-time complexity.
Internally, the elements are not sorted in any particular order, but organized into buckets. Which bucket an element is placed into depends entirely on the hash of its value. This allows fast access to individual elements, since once a hash is computed, it refers to the exact bucket the element is placed into.
Container elements may not be modified (even by non const iterators) since modification could change an element's hash and corrupt the container.
std::unordered_set meets the requirements of Container, AllocatorAwareContainer, UnorderedAssociativeContainer.

.SH Member types


Member type                     Definition
key_type                        Key
value_type                      Key
size_type                       Unsigned integer type (usually std::size_t)
difference_type                 Signed integer type (usually std::ptrdiff_t)
hasher                          Hash

key_equal                       KeyEqual                                                                    \fI(until C++20)\fP
                                Hash::transparent_key_equal if defined and names a type, otherwise KeyEqual \fI(since C++20)\fP

allocator_type                  Allocator
reference                       value_type&
const_reference                 const value_type&
pointer                         std::allocator_traits<Allocator>::pointer
const_pointer                   std::allocator_traits<Allocator>::const_pointer
iterator                        Constant LegacyForwardIterator
const_iterator                  Constant LegacyForwardIterator
                                An iterator type whose category, value, difference, pointer and
local_iterator                  reference types are the same as iterator. This iterator
                                can be used to iterate through a single bucket but not across buckets
                                An iterator type whose category, value, difference, pointer and
const_local_iterator            reference types are the same as const_iterator. This iterator
                                can be used to iterate through a single bucket but not across buckets
node_type\fI(since C++17)\fP          a specialization of node_handle representing a container node
                                type describing the result of inserting a node_type, a specialization of

                                  template <class Iter, class NodeType> struct /*unspecified*/ {
                                      Iter     position;
insert_return_type\fI(since C++17)\fP       bool     inserted;
                                      NodeType node;
                                  };

                                instantiated with template arguments iterator and node_type.


.SH Member functions


                  constructs the unordered_set
constructor       \fI(public member function)\fP
                  destructs the unordered_set
destructor        \fI(public member function)\fP
                  assigns values to the container
operator=         \fI(public member function)\fP
                  returns the associated allocator
get_allocator     \fI(public member function)\fP

.SH Iterators


begin             returns an iterator to the beginning
cbegin            \fI(public member function)\fP



end_              returns an iterator to the end
cend              \fI(public member function)\fP



.SH Capacity

                  checks whether the container is empty
empty             \fI(public member function)\fP
                  returns the number of elements
size              \fI(public member function)\fP
                  returns the maximum possible number of elements
max_size          \fI(public member function)\fP

.SH Modifiers

                  clears the contents
clear             \fI(public member function)\fP
                  inserts elements
                  or nodes
insert            \fI(since C++17)\fP
                  \fI(public member function)\fP
                  constructs element in-place
emplace           \fI(public member function)\fP
                  constructs elements in-place using a hint
emplace_hint      \fI(public member function)\fP
                  erases elements
erase             \fI(public member function)\fP
                  swaps the contents
swap              \fI(public member function)\fP

extract           extracts nodes from the container
                  \fI(public member function)\fP
\fI(C++17)\fP

merge             splices nodes from another container
                  \fI(public member function)\fP
\fI(C++17)\fP

.SH Lookup

                  returns the number of elements matching specific key
count             \fI(public member function)\fP
                  finds element with specific key
find              \fI(public member function)\fP

contains          checks if the container contains element with specific key
                  \fI(public member function)\fP
(C++20)
                  returns range of elements matching a specific key
equal_range       \fI(public member function)\fP

.SH Bucket interface

                  returns an iterator to the beginning of the specified bucket
begin(size_type)  \fI(public member function)\fP
cbegin(size_type)
                  returns an iterator to the end of the specified bucket
end(size_type)    \fI(public member function)\fP
cend(size_type)
                  returns the number of buckets
bucket_count      \fI(public member function)\fP
                  returns the maximum number of buckets
max_bucket_count  \fI(public member function)\fP
                  returns the number of elements in specific bucket
bucket_size       \fI(public member function)\fP
                  returns the bucket for specific key
bucket            \fI(public member function)\fP

.SH Hash policy

                  returns average number of elements per bucket
load_factor       \fI(public member function)\fP
                  manages maximum average number of elements per bucket
max_load_factor   \fI(public member function)\fP
                  reserves at least the specified number of buckets.
rehash            This regenerates the hash table.
                  \fI(public member function)\fP
                  reserves space for at least the specified number of elements.
reserve           This regenerates the hash table.
                  \fI(public member function)\fP

.SH Observers

                  returns function used to hash the keys
hash_function     \fI(public member function)\fP
                  returns the function used to compare keys for equality
key_eq            \fI(public member function)\fP


.SH Non-member functions


                              compares the values in the unordered_set
operator==                    \fI(function template)\fP
operator!=

std::swap(std::unordered_set) specializes the std::swap algorithm
                              \fI(function template)\fP
\fI(C++11)\fP

erase_if(std::unordered_set)  Erases all elements satisfying specific criteria
                              \fI(function template)\fP
(C++20)


Deduction_guides\fI(since C++17)\fP


.SH Notes

The member types iterator and const_iterator may be aliases to the same type. Since iterator is convertible to const_iterator, const_iterator should be used in function parameter lists to avoid violations of the One Definition Rule.



