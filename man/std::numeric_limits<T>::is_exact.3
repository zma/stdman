.TH std::numeric_limits<T>::is_exact 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::numeric_limits<T>::is_exact \- std::numeric_limits<T>::is_exact

.SH Synopsis

static const bool is_exact;      \fI(until C++11)\fP
static constexpr bool is_exact;  \fI(since C++11)\fP

The value of std::numeric_limits<T>::is_exact is true for all arithmetic types T that use exact representation.

.SH Standard specializations


T                     value of std::numeric_limits<T>::is_exact
/* non-specialized */ false
bool                  true
char                  true
signed char           true
unsigned char         true
wchar_t               true
char8_t               true
char16_t              true
char32_t              true
short                 true
unsigned short        true
int                   true
unsigned int          true
long                  true
unsigned long         true
long long             true
unsigned long long    true
float                 false
double                false
long double           false


.SH Notes

While all fundamental types T for which std::numeric_limits<T>::is_exact==true are integer types, a library may define exact types that aren't integers, e.g. a rational arithmetics type representing fractions.

.SH See also



is_integer identifies integer types
           \fI(public static member constant)\fP
\fB[static]\fP

is_signed  identifies signed types
           \fI(public static member constant)\fP
\fB[static]\fP

is_bounded identifies types that represent a finite set of values
           \fI(public static member constant)\fP
\fB[static]\fP




