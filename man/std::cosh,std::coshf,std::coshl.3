.TH std::cosh,std::coshf,std::coshl 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::cosh,std::coshf,std::coshl \- std::cosh,std::coshf,std::coshl

.SH Synopsis

  Defined in header <cmath>
  float cosh ( float arg );
  float coshf( float arg );                     \fI(since C++11)\fP
  double cosh ( double arg );           \fB(1)\fP \fB(2)\fP
  long double cosh ( long double arg );
  long double coshl( long double arg );     \fB(3)\fP               \fI(since C++11)\fP
  double cosh ( IntegralType arg );             \fB(4)\fP           \fI(since C++11)\fP

  1-3) Computes the hyperbolic cosine of arg
  4) A set of overloads or a function template accepting an argument of any integral_type. Equivalent to 2) (the argument is cast to double).

.SH Parameters


  arg - value of a floating-point or Integral_type


.SH Return value

  If no errors occur, the hyperbolic cosine of arg (cosh(arg), or

  earg
  +e-arg
  2

  ) is returned.
  If a range error due to overflow occurs, +HUGE_VAL, +HUGE_VALF, or +HUGE_VALL is returned.

.SH Error handling

  Errors are reported as specified in math_errhandling.
  If the implementation supports IEEE floating-point arithmetic (IEC 60559),

  * if the argument is ±0, 1 is returned
  * If the argument is ±∞, +∞ is returned
  * if the argument is NaN, NaN is returned


.SH Notes

  For the IEEE-compatible type double, if |arg| > 710.5, then cosh(arg) overflows.

.SH Example


    #include <iostream>
    #include <cmath>
    #include <cerrno>
    #include <cstring>
    #include <cfenv>

    #pragma STDC FENV_ACCESS ON
    int main()
    {
        std::cout << "cosh(1) = " << std::cosh(1) << '\\n'
                  << "cosh(-1) = " << std::cosh(-1) << '\\n'
                  << "log(sinh(1)+cosh(1)=" << std::log(std::sinh(1)+std::cosh(1)) << '\\n';
        // special values
        std::cout << "cosh(+0) = " << std::cosh(0.0) << '\\n'
                  << "cosh(-0) = " << std::cosh(-0.0) << '\\n';
        // error handling
        errno=0;
        std::feclearexcept(FE_ALL_EXCEPT);
        std::cout << "cosh(710.5) = " << std::cosh(710.5) << '\\n';
        if (errno == ERANGE)
            std::cout << "    errno == ERANGE: " << std::strerror(errno) << '\\n';
        if (std::fetestexcept(FE_OVERFLOW))
            std::cout << "    FE_OVERFLOW raised\\n";
    }


.SH See also



  sinh
  sinhf
  sinhl               computes hyperbolic sine (sh(x))
                      \fI(function)\fP

  \fI(C++11)\fP
  \fI(C++11)\fP

  tanh
  tanhf
  tanhl               hyperbolic tangent
                      \fI(function)\fP

  \fI(C++11)\fP
  \fI(C++11)\fP

  acosh
  acoshf
  acoshl              computes the inverse hyperbolic cosine (arcosh(x))
                      \fI(function)\fP
  \fI(C++11)\fP
  \fI(C++11)\fP
  \fI(C++11)\fP
                      computes hyperbolic cosine of a complex number (ch(z))
  cosh(std::complex)  \fI(function template)\fP
                      applies the function std::cosh to each element of valarray
  cosh(std::valarray) \fI(function template)\fP




