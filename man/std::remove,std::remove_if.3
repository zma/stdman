.TH std::remove,std::remove_if 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::remove,std::remove_if \- std::remove,std::remove_if

.SH Synopsis

  Defined in header <algorithm>
  template< class ForwardIt, class T >                                                                        \fI(until C++20)\fP
  ForwardIt remove( ForwardIt first, ForwardIt last, const T& value );
  template< class ForwardIt, class T >                                                                        \fI(since C++20)\fP
  constexpr ForwardIt remove( ForwardIt first, ForwardIt last, const T& value );
  template< class ExecutionPolicy, class ForwardIt, class T >                                             \fB(2)\fP \fI(since C++17)\fP
  ForwardIt remove( ExecutionPolicy&& policy, ForwardIt first, ForwardIt last, const T& value );      \fB(1)\fP
  template< class ForwardIt, class UnaryPredicate >                                                                         \fI(until C++20)\fP
  ForwardIt remove_if( ForwardIt first, ForwardIt last, UnaryPredicate p );
  template< class ForwardIt, class UnaryPredicate >                                                       \fB(3)\fP               \fI(since C++20)\fP
  constexpr ForwardIt remove_if( ForwardIt first, ForwardIt last, UnaryPredicate p );
  template< class ExecutionPolicy, class ForwardIt, class UnaryPredicate >                                    \fB(4)\fP           \fI(since C++17)\fP
  ForwardIt remove_if( ExecutionPolicy&& policy, ForwardIt first, ForwardIt last, UnaryPredicate p );

  Removes all elements satisfying specific criteria from the range [first, last) and returns a past-the-end iterator for the new end of the range.
  1) Removes all elements that are equal to value.
  3) Removes all elements for which predicate p returns true.
  2,4) Same as (1,3), but executed according to policy. These overloads do not participate in overload resolution unless std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true
  Removing is done by shifting (by means of move assignment) the elements in the range in such a way that the elements that are not to be removed appear in the beginning of the range. Relative order of the elements that remain is preserved and the physical size of the container is unchanged. Iterators pointing to an element between the new logical end and the physical end of the range are still dereferenceable, but the elements themselves have unspecified values (as per MoveAssignable post-condition). A call to remove is typically followed by a call to a container's erase method, which erases the unspecified values and reduces the physical size of the container to match its new logical size.

.SH Parameters


  first, last - the range of elements to process
  value       - the value of elements to remove
  policy      - the execution policy to use. See execution_policy for details.
                unary predicate which returns true if the element should be removed.
  p           - The expression p(v) must be convertible to bool for every argument v of type (possibly const) VT, where VT is the value type of ForwardIt, regardless of value_category, and must not modify v. Thus, a parameter type of VT&is not allowed
                , nor is VT unless for VT a move is equivalent to a copy
                \fI(since C++11)\fP. 
.SH Type requirements
  -
  ForwardIt must meet the requirements of LegacyForwardIterator.
  -
  The type of dereferenced ForwardIt must meet the requirements of MoveAssignable.
  -
  UnaryPredicate must meet the requirements of Predicate.


.SH Return value

  Past-the-end iterator for the new range of values (if this is not end, then it points to an unspecified value, and so do iterators to any values between this iterator and end)

.SH Complexity

  Exactly std::distance(first, last) applications of the predicate.

.SH Exceptions

  The overloads with a template parameter named ExecutionPolicy report errors as follows:

  * If execution of a function invoked as part of the algorithm throws an exception and ExecutionPolicy is one of the standard_policies, std::terminate is called. For any other ExecutionPolicy, the behavior is implementation-defined.
  * If the algorithm fails to allocate memory, std::bad_alloc is thrown.


.SH Notes

  The similarly-named container member functions list::remove, list::remove_if, forward_list::remove, and forward_list::remove_if erase the removed elements.
  These algorithms cannot be used with associative containers such as std::set and std::map because ForwardIt does not dereference to a MoveAssignable type (the keys in these containers are not modifiable)
  The standard library also defines an overload of std::remove taking const char*, used to delete files: std::remove.
  Because std::remove takes value by reference, it can have unexpected behavior if it is a reference to an element of the range [first, last).

.SH Possible implementation


.SH First version

    template< class ForwardIt, class T >
    ForwardIt remove(ForwardIt first, ForwardIt last, const T& value)
    {
        first = std::find(first, last, value);
        if (first != last)
            for(ForwardIt i = first; ++i != last; )
                if (!(*i == value))
                    *first++ = std::move(*i);
        return first;
    }

.SH Second version

    template<class ForwardIt, class UnaryPredicate>
    ForwardIt remove_if(ForwardIt first, ForwardIt last, UnaryPredicate p)
    {
        first = std::find_if(first, last, p);
        if (first != last)
            for(ForwardIt i = first; ++i != last; )
                if (!p(*i))
                    *first++ = std::move(*i);
        return first;
    }



.SH Examples

  The following code removes all spaces from a string by shifting all non-space characters to the left and then erasing the extra. This is an example of erase-remove_idiom.
  
// Run this code

    #include <algorithm>
    #include <string>
    #include <iostream>
    #include <cctype>

    int main()
    {
        std::string str1 = "Text with some   spaces";
        str1.erase(std::remove(str1.begin(), str1.end(), ' '),
                   str1.end());
        std::cout << str1 << '\\n';

        std::string str2 = "Text\\n with\\tsome \\t  whitespaces\\n\\n";
        str2.erase(std::remove_if(str2.begin(),
                                  str2.end(),
                                  [](unsigned char x){return std::isspace(x);}),
                   str2.end());
        std::cout << str2 << '\\n';
    }

.SH Output:

    Textwithsomespaces
    Textwithsomewhitespaces


.SH See also


                 copies a range of elements omitting those that satisfy specific criteria
  remove_copy    \fI(function template)\fP
  remove_copy_if
                 removes consecutive duplicate elements in a range
  unique         \fI(function template)\fP




