.TH std::basic_string<CharT,Traits,Allocator>::find_last_of 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string<CharT,Traits,Allocator>::find_last_of \- std::basic_string<CharT,Traits,Allocator>::find_last_of

.SH Synopsis

  size_type find_last_of( const basic_string& str, size_type pos = npos ) const;                      \fI(until C++11)\fP
  size_type find_last_of( const basic_string& str, size_type pos = npos ) const noexcept;             \fI(since C++11)\fP
  size_type find_last_of( const CharT* s, size_type pos, size_type count ) const;                 \fB(2)\fP
  size_type find_last_of( const CharT* s, size_type pos = npos ) const;                       \fB(1)\fP \fB(3)\fP
  size_type find_last_of( CharT ch, size_type pos = npos ) const;                                                   \fI(until C++11)\fP
  size_type find_last_of( CharT ch, size_type pos = npos ) const noexcept;                        \fB(4)\fP               \fI(since C++11)\fP
  template < class T >                                                                                \fB(5)\fP           \fI(since C++17)\fP
  size_type find_last_of( const T& t, size_type pos = npos ) const noexcept(/* see below */);

  Finds the last character equal to one of characters in the given character sequence. The exact search algorithm is not specified. The search considers only the interval [0, pos]. If the character is not present in the interval, npos will be returned.
  1) Finds the last character equal to one of characters in str.
  2) Finds the last character equal to one of characters in range [s, s+count). This range can include null characters.
  3) Finds the last character equal to one of characters in character string pointed to by s. The length of the string is determined by the first null character using Traits::length(s).
  4) Finds the last character equal to ch.
  5) Implicitly converts t to a string view sv as if by std::basic_string_view<CharT, Traits> sv = t;, then finds the last character equal to one of characters in sv. This overload only participates in overload resolution if std::is_convertible_v<const T&, std::basic_string_view<CharT, Traits>> is true and std::is_convertible_v<const T&, const CharT*> is false.
  In all cases, equality is checked by calling Traits::eq.

.SH Parameters


  str   - string identifying characters to search for
  pos   - position at which the search is to finish
  count - length of character string identifying characters to search for
  s     - pointer to a character string identifying characters to search for
  ch    - character to search for
  t     - object (convertible to std::basic_string_view) identifying characters to search for


.SH Return value

  Position of the found character or npos if no such character is found.

.SH Exceptions

  5)
  noexcept specification:
  noexcept(std::is_nothrow_convertible_v<const T&, std::basic_string_view<CharT, Traits>>)

  Defect reports

  The following behavior-changing defect reports were applied retroactively to previously published C++ standards.

  DR       Applied to Behavior as published                               Correct behavior
  LWG_2946 C++17      string_view overload causes ambiguity in some cases avoided by making it a template


.SH Example

  
// Run this code

    #include<string>
    #include<iostream>
    int main()
    {
        const std::string path="/root/config";
        auto const pos=path.find_last_of('/');
        const auto leaf=path.substr(pos+1);

        std::cout << leaf << '\\n';
    }

.SH Output:

    config


.SH See also


                    find characters in the string
  find              \fI(public member function)\fP
                    find the last occurrence of a substring
  rfind             \fI(public member function)\fP
                    find first occurrence of characters
  find_first_of     \fI(public member function)\fP
                    find first absence of characters
  find_first_not_of \fI(public member function)\fP
                    find last absence of characters
  find_last_not_of  \fI(public member function)\fP




