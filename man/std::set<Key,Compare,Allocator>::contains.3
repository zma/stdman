.TH std::set<Key,Compare,Allocator>::contains 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::set<Key,Compare,Allocator>::contains \- std::set<Key,Compare,Allocator>::contains

.SH Synopsis

bool contains( const Key& key ) const;                 \fB(1)\fP \fI(since C++20)\fP
template< class K > bool contains( const K& x ) const; \fB(2)\fP \fI(since C++20)\fP

1) Checks if there is an element with key equivalent to key in the container.
2) Checks if there is an element with key that compares equivalent to the value x. This overload only participates in overload resolution if the qualified-id Compare::is_transparent is valid and denotes a type. It allows calling this function without constructing an instance of Key.


.SH Parameters


key - key value of the element to search for
x   - a value of any type that can be transparently compared with a key



.SH Return value

true if there is such an element, otherwise false.

.SH Complexity

Logarithmic in the size of the container.

.SH Example


// Run this code

  #include <iostream>
  #include <set>

  int main()
  {
      std::set<int> example = {1, 2, 3, 4};

      if(example.contains(2)) {
          std::cout << "Found\\n";
      } else {
          std::cout << "Not found\\n";
      }
  }

.SH Output:

  Found


.SH See also


            finds element with specific key
find        \fI(public member function)\fP
            returns the number of elements matching specific key
count       \fI(public member function)\fP
            returns range of elements matching a specific key
equal_range \fI(public member function)\fP




