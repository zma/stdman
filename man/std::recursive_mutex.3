.TH std::recursive_mutex 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::recursive_mutex \- std::recursive_mutex

.SH Synopsis

Defined in header <mutex>
class recursive_mutex;     \fI(since C++11)\fP

The recursive_mutex class is a synchronization primitive that can be used to protect shared data from being simultaneously accessed by multiple threads.
recursive_mutex offers exclusive, recursive ownership semantics:

* A calling thread owns a recursive_mutex for a period of time that starts when it successfully calls either lock or try_lock. During this period, the thread may make additional calls to lock or try_lock. The period of ownership ends when the thread makes a matching number of calls to unlock.
* When a thread owns a recursive_mutex, all other threads will block (for calls to lock) or receive a false return value (for try_lock) if they attempt to claim ownership of the recursive_mutex.
* The maximum number of times that a recursive_mutex may be locked is unspecified, but after that number is reached, calls to lock will throw std::system_error and calls to try_lock will return false.

The behavior of a program is undefined if a recursive_mutex is destroyed while still owned by some thread. The recursive_mutex class satisfies all requirements of Mutex and StandardLayoutType.

.SH Member types


Member type                  Definition
native_handle_type(optional) implementation-defined


.SH Member functions


              constructs the mutex
constructor   \fI(public member function)\fP
              destroys the mutex
destructor    \fI(public member function)\fP

operator=     not copy-assignable
              \fI(public member function)\fP
[deleted]

.SH Locking

              locks the mutex, blocks if the mutex is not available
lock          \fI(public member function)\fP
              tries to lock the mutex, returns if the mutex is not available
try_lock      \fI(public member function)\fP
              unlocks the mutex
unlock        \fI(public member function)\fP

.SH Native handle

              returns the underlying implementation-defined native handle object
native_handle \fI(public member function)\fP




