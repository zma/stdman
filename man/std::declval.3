.TH std::declval 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::declval \- std::declval

.SH Synopsis

  Defined in header <utility>
  template<class T>                                                \fI(since C++11)\fP
  typename std::add_rvalue_reference<T>::type declval() noexcept;

  Converts any type T to a reference type, making it possible to use member functions in decltype expressions without the need to go through constructors.
  declval is commonly used in templates where acceptable template parameters may have no constructor in common, but have the same member function whose return type is needed.
  Note that because no definition exists for declval, it can only be used in unevaluated_contexts; it is an error to evaluate an expression that contains this function. Formally, the program is ill-formed if this function is odr-used.

.SH Parameters

  \fI(none)\fP

.SH Return value

  Cannot be called and thus never returns a value. The return type is T&& unless T is (possibly cv-qualified) void, in which case the return type is T.

.SH Example

  
// Run this code

    #include <utility>
    #include <iostream>

    struct Default { int foo() const { return 1; } };

    struct NonDefault
    {
        NonDefault(const NonDefault&) { }
        int foo() const { return 1; }
    };

    int main()
    {
        decltype(Default().foo()) n1 = 1;                   // type of n1 is int
    //  decltype(NonDefault().foo()) n2 = n1;               // error: no default constructor
        decltype(std::declval<NonDefault>().foo()) n2 = n1; // type of n2 is int
        std::cout << "n1 = " << n1 << '\\n'
                  << "n2 = " << n2 << '\\n';
    }

.SH Output:

    n1 = 1
    n2 = 1


.SH See also


  decltype_specifier        defines a type equivalent to the type of an expression \fI(C++11)\fP

  result_of
  invoke_result             deduces the result type of invoking a callable object with a set of arguments
                            \fI(class template)\fP
  \fI(C++11)\fP(removed in C++20)
  \fI(C++17)\fP




