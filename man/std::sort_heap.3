.TH std::sort_heap 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::sort_heap \- std::sort_heap

.SH Synopsis

  Defined in header <algorithm>
  template< class RandomIt >                                                       \fI(until C++20)\fP
  void sort_heap( RandomIt first, RandomIt last );
  template< class RandomIt >                                                       \fI(since C++20)\fP
  constexpr void sort_heap( RandomIt first, RandomIt last );               \fB(1)\fP
  template< class RandomIt, class Compare >                                                      \fI(until C++20)\fP
  void sort_heap( RandomIt first, RandomIt last, Compare comp );               \fB(2)\fP
  template< class RandomIt, class Compare >                                                      \fI(since C++20)\fP
  constexpr void sort_heap( RandomIt first, RandomIt last, Compare comp );

  Converts the max heap [first, last) into a sorted range in ascending order. The resulting range no longer has the heap property.
  The first version of the function uses operator< to compare the elements, the second uses the given comparison function comp.

.SH Parameters


  first, last - the range of elements to sort
                comparison function object (i.e. an object that satisfies the requirements of Compare) which returns true if the first argument is less than the second.
                The signature of the comparison function should be equivalent to the following:
                bool cmp(const Type1 &a, const Type2 &b);
  comp        - While the signature does not need to have const &, the function must not modify the objects passed to it and must be able to accept all values of type (possibly const) Type1 and Type2 regardless of value_category (thus, Type1 & is not allowed
                , nor is Type1 unless for Type1 a move is equivalent to a copy
                \fI(since C++11)\fP).
                The types Type1 and Type2 must be such that an object of type RandomIt can be dereferenced and then implicitly converted to both of them. 
.SH Type requirements
  -
  RandomIt must meet the requirements of ValueSwappable and LegacyRandomAccessIterator.
  -
  The type of dereferenced RandomIt must meet the requirements of MoveAssignable and MoveConstructible.


.SH Return value

  \fI(none)\fP

.SH Complexity

  At most 2×N×log(N) comparisons where N=std::distance(first, last).

.SH Notes

  A max heap is a range of elements [f,l) that has the following properties:

  Defect reports

  The following behavior-changing defect reports were applied retroactively to previously published C++ standards.

  DR       Applied to Behavior as published                             Correct behavior
  LWG_2444 C++98      complexity requirement was wrong by a factor of 2 corrected


.SH Possible implementation


.SH First version

    template< class RandomIt >
    void sort_heap( RandomIt first, RandomIt last )
    {
        while (first != last)
            std::pop_heap(first, last--);
    }

.SH Second version

    template< class RandomIt, class Compare >
    void sort_heap( RandomIt first, RandomIt last, Compare comp )
    {
        while (first != last)
            std::pop_heap(first, last--, comp);
    }



.SH Example

  
// Run this code

    #include <algorithm>
    #include <vector>
    #include <iostream>

    int main()
    {
        std::vector<int> v = {3, 1, 4, 1, 5, 9};

        std::make_heap(v.begin(), v.end());

        std::cout << "heap:\\t";
        for (const auto &i : v) {
            std::cout << i << ' ';
        }

        std::sort_heap(v.begin(), v.end());

        std::cout << "\\nsorted:\\t";
        for (const auto &i : v) {
            std::cout << i << ' ';
        }
        std::cout << '\\n';
    }

.SH Output:

    heap:   9 4 5 1 1 3
    sorted: 1 1 3 4 5 9


.SH See also


            creates a max heap out of a range of elements
  make_heap \fI(function template)\fP




