.TH std::sqrt,std::sqrtf,std::sqrtl 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::sqrt,std::sqrtf,std::sqrtl \- std::sqrt,std::sqrtf,std::sqrtl

.SH Synopsis

  Defined in header <cmath>
  float sqrt ( float arg );
  float sqrtf( float arg );                     \fI(since C++11)\fP
  double sqrt ( double arg );           \fB(1)\fP \fB(2)\fP
  long double sqrt ( long double arg );
  long double sqrtl( long double arg );     \fB(3)\fP               \fI(since C++11)\fP
  double sqrt ( IntegralType arg );             \fB(4)\fP           \fI(since C++11)\fP

  1-3) Computes the square root of arg.
  4) A set of overloads or a function template accepting an argument of any integral_type. Equivalent to 2) (the argument is cast to double).

.SH Parameters


  arg - Value of a floating-point or Integral_type


.SH Return value

  If no errors occur, square root of arg (
  √
  arg), is returned.
  If a domain error occurs, an implementation-defined value is returned (NaN where supported)
  If a range error occurs due to underflow, the correct result (after rounding) is returned.

.SH Error handling

  Errors are reported as specified in math_errhandling
  Domain error occurs if arg is less than zero.
  If the implementation supports IEEE floating-point arithmetic (IEC 60559),

  * If the argument is less than -0, FE_INVALID is raised and NaN is returned.
  * If the argument is +∞ or ±0, it is returned, unmodified.
  * If the argument is NaN, NaN is returned


.SH Notes

  std::sqrt is required by the IEEE standard to be exact. The only other operations required to be exact are the arithmetic_operators and the function std::fma. After rounding to the return type (using default rounding mode), the result of std::sqrt is indistinguishable from the infinitely precise result. In other words, the error is less than 0.5 ulp. Other functions, including std::pow, are not so constrained.

.SH Example

  
// Run this code

    #include <iostream>
    #include <cmath>
    #include <cerrno>
    #include <cfenv>
    #include <cstring>

    #pragma STDC FENV_ACCESS ON

    int main()
    {
        // normal use
        std::cout << "sqrt(100) = " << std::sqrt(100) << '\\n'
                  << "sqrt(2) = " << std::sqrt(2) << '\\n'
                  << "golden ratio = " << (1+std::sqrt(5))/2 << '\\n';
        // special values
        std::cout << "sqrt(-0) = " << std::sqrt(-0.0) << '\\n';
        // error handling
        errno = 0;
        std::feclearexcept(FE_ALL_EXCEPT);
        std::cout << "sqrt(-1.0) = " << std::sqrt(-1) << '\\n';
        if(errno == EDOM)
            std::cout << "    errno = EDOM " << std::strerror(errno) << '\\n';
        if(std::fetestexcept(FE_INVALID))
            std::cout << "    FE_INVALID raised\\n";
    }

.SH Possible output:

    sqrt(100) = 10
    sqrt\fB(2)\fP = 1.41421
    golden ratio = 1.61803
    sqrt(-0) = -0
    sqrt(-1.0) = -nan
        errno = EDOM Numerical argument out of domain
        FE_INVALID raised


.SH See also



  pow
  powf
  powl                raises a number to the given power (xy)
                      \fI(function)\fP

  \fI(C++11)\fP
  \fI(C++11)\fP

  cbrt                computes cubic root (
  cbrtf               3
  cbrtl               √
                      x)
  \fI(C++11)\fP             \fI(function)\fP
  \fI(C++11)\fP
  \fI(C++11)\fP

  hypot               computes square root of the sum of the squares of two given numbers (
  hypotf              √
  hypotl              x2
                      +y2
  \fI(C++11)\fP             )
  \fI(C++11)\fP             \fI(function)\fP
  \fI(C++11)\fP
                      complex square root in the range of the right half-plane
  sqrt(std::complex)  \fI(function template)\fP
                      applies the function std::sqrt to each element of valarray
  sqrt(std::valarray) \fI(function template)\fP




