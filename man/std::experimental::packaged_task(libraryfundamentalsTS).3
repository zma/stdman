.TH std::experimental::packaged_task(libraryfundamentalsTS) 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::packaged_task(libraryfundamentalsTS) \- std::experimental::packaged_task(libraryfundamentalsTS)

.SH Synopsis
   Defined in header <experimental/future>
   template< class > class packaged_task; //not defined \fB(1)\fP (library fundamentals TS)
   template< class R, class ...Args >                   \fB(2)\fP (library fundamentals TS)
   class packaged_task<R(Args...)>;

   std::experimental::fundamentals_v1::packaged_task (and std::experimental::fundamentals_v2::packaged_task) is a modified version of std::packaged_task provided by the library fundamentals TS with support for type-erased allocators.

.SH Member types

   Member type    Definition
   allocator_type std::experimental::erased_type

.SH Member functions

   constructor         constructs the task object
                       \fI(public member function)\fP
   get_memory_resource retrieves a pointer to the memory resource used by this object to allocate memory
                       \fI(public member function)\fP

  Non-member function

   std::experimental::swap(std::experimental::packaged_task) specializes the swap algorithm
                                                             \fI(function template)\fP

.SH Helper classes

   std::uses_allocator<std::experimental::packaged_task> specializes the std::uses_allocator type trait
                                                         \fI(class template specialization)\fP

Members identical to std::packaged_task

.SH Member functions

   destructor                destructs the task object
                             \fI(public member function of std::packaged_task<R(Args...)>)\fP
   operator=                 moves the task object
                             \fI(public member function of std::packaged_task<R(Args...)>)\fP
   valid                     checks if the task object has a valid function
                             \fI(public member function of std::packaged_task<R(Args...)>)\fP
   swap                      swaps two task objects
                             \fI(public member function of std::packaged_task<R(Args...)>)\fP
.SH Getting the result
   get_future                returns a std::future associated with the promised result
                             \fI(public member function of std::packaged_task<R(Args...)>)\fP
.SH Execution
   operator()                executes the function
                             \fI(public member function of std::packaged_task<R(Args...)>)\fP
   make_ready_at_thread_exit executes the function ensuring that the result is ready only once the current thread exits
                             \fI(public member function of std::packaged_task<R(Args...)>)\fP
   reset                     resets the state abandoning any stored results of previous executions
                             \fI(public member function of std::packaged_task<R(Args...)>)\fP
