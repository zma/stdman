.TH std::is_invocable,std::is_invocable_r,std::is_nothrow_invocable,std::is_nothrow_invocable_r 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_invocable,std::is_invocable_r,std::is_nothrow_invocable,std::is_nothrow_invocable_r \- std::is_invocable,std::is_invocable_r,std::is_nothrow_invocable,std::is_nothrow_invocable_r

.SH Synopsis
   Defined in header <type_traits>
   template <class Fn, class... ArgTypes>          \fB(1)\fP \fI(since C++17)\fP
   struct is_invocable;
   template <class R, class Fn, class... ArgTypes> \fB(2)\fP \fI(since C++17)\fP
   struct is_invocable_r;
   template <class Fn, class... ArgTypes>          \fB(3)\fP \fI(since C++17)\fP
   struct is_nothrow_invocable;
   template <class R, class Fn, class... ArgTypes> \fB(4)\fP \fI(since C++17)\fP
   struct is_nothrow_invocable_r;

   1) Determines whether Fn can be invoked with the arguments ArgTypes.... Formally, determines whether INVOKE(declval<Fn>(), declval<ArgTypes>()...) is well formed when treated as an unevaluated operand, where INVOKE is the operation defined in Callable.
   2) Determines whether Fn can be invoked with the arguments ArgTypes... to yield a result that is convertible to R. Formally, determines whether INVOKE<R>(declval<Fn>(), declval<ArgTypes>()...) is well formed when treated as an unevaluated operand, where INVOKE is the operation defined in Callable
   3) Determines whether Fn is callable with the arguments ArgTypes... (same as \fB(1)\fP), and that such call is known not to throw any exceptions.
   4) Determines whether Fn can be invoked with the arguments ArgTypes... to yield a result that is convertible to R (same as \fB(2)\fP), and that such call (including the conversion) is known not to throw any exceptions.

   Fn, R and all types in the parameter pack ArgTypes shall each be a complete type, (possibly cv-qualified) void, or an array of unknown bound. Otherwise, the behavior is undefined.

   If an instantiation of a template above depends, directly or indirectly, on an incomplete type, and that instantiation could yield a different result if that type were hypothetically completed, the behavior is undefined.

  Helper variable templates

   Defined in header <type_traits>
   template <class Fn, class... ArgTypes>                                                                   \fB(1)\fP \fI(since C++17)\fP
   inline constexpr bool is_invocable_v = std::is_invocable<Fn, ArgTypes...>::value;
   template <class R, class Fn, class... ArgTypes>                                                          \fB(2)\fP \fI(since C++17)\fP
   inline constexpr bool is_invocable_r_v = std::is_invocable_r<R, Fn, ArgTypes...>::value;
   template <class Fn, class... ArgTypes>                                                                   \fB(3)\fP \fI(since C++17)\fP
   inline constexpr bool is_nothrow_invocable_v = std::is_nothrow_invocable<Fn, ArgTypes...>::value;
   template <class R, class Fn, class... ArgTypes>                                                          \fB(4)\fP \fI(since C++17)\fP
   inline constexpr bool is_nothrow_invocable_r_v = std::is_nothrow_invocable_r<R, Fn, ArgTypes...>::value;

Inherited from std::integral_constant

.SH Member constants

   value    true if INVOKE<R>(declval<Fn>(), declval<ArgTypes>()...) is well formed when treated as an unevaluated operand , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Examples

   
// Run this code

 #include <type_traits>

 auto func2(char) -> int (*)()
 {
     return nullptr;
 }

 int main()
 {
     static_assert( std::is_invocable<int()>::value );
     static_assert( std::is_invocable_r<int, int()>::value );
     static_assert( std::is_invocable_r<void, void(int), int>::value );
     static_assert( std::is_invocable_r<int(*)(), decltype(func2), char>::value );
 }

.SH See also

   invoke                    invokes any Callable object with given arguments
   \fI(C++17)\fP                   \fI(function template)\fP
   result_of
   invoke_result             deduces the result type of invoking a callable object with a set of arguments
   \fI(C++11)\fP(removed in C++20) \fI(class template)\fP
   \fI(C++17)\fP
   declval                   obtains a reference to its argument for use in unevaluated context
   \fI(C++11)\fP                   \fI(function template)\fP
