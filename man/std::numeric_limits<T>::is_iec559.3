.TH std::numeric_limits<T>::is_iec559 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::numeric_limits<T>::is_iec559 \- std::numeric_limits<T>::is_iec559

.SH Synopsis

static const bool is_iec559;      \fI(until C++11)\fP
static constexpr bool is_iec559;  \fI(since C++11)\fP

The value of std::numeric_limits<T>::is_iec559 is true for all floating-point types T which fulfill the requirements of IEC 559 (IEEE_754) standard. If std::numeric_limits<T>::is_iec559 is true, then std::numeric_limits<T>::has_infinity, std::numeric_limits<T>::has_quiet_NaN, and std::numeric_limits<T>::has_signaling_NaN are also true.

.SH Standard specializations


T                     value of std::numeric_limits<T>::is_iec559
/* non-specialized */ false
bool                  false
char                  false
signed char           false
unsigned char         false
wchar_t               false
char8_t               false
char16_t              false
char32_t              false
short                 false
unsigned short        false
int                   false
unsigned int          false
long                  false
unsigned long         false
long long             false
unsigned long long    false
float                 usually true
double                usually true
long double           usually true


.SH See also



has_infinity      identifies floating-point types that can represent the special value "positive infinity"
                  \fI(public static member constant)\fP
\fB[static]\fP

has_quiet_NaN     identifies floating-point types that can represent the special value "quiet not-a-number" (NaN)
                  \fI(public static member constant)\fP
\fB[static]\fP

has_signaling_NaN identifies floating-point types that can represent the special value "signaling not-a-number" (NaN)
                  \fI(public static member constant)\fP
\fB[static]\fP




