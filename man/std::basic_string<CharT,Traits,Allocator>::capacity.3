.TH std::basic_string<CharT,Traits,Allocator>::capacity 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string<CharT,Traits,Allocator>::capacity \- std::basic_string<CharT,Traits,Allocator>::capacity

.SH Synopsis
   size_type capacity() const;           \fI(until C++11)\fP
   size_type capacity() const noexcept;  \fI(since C++11)\fP

   Returns the number of characters that the string has currently allocated space for.

.SH Parameters

   \fI(none)\fP

.SH Return value

   Capacity of the currently allocated storage

.SH Complexity

   Constant

.SH Example

   
// Run this code

 #include <iostream>
 #include <string>

 void show_capacity(std::string const& s)
 {
     std::cout << "'" << s << "' has capacity " << s.capacity() << ".\\n";
 }

 int main()
 {
     std::string s{"Exemplar"};
     show_capacity(s);

     s += " is an example string.";
     show_capacity(s);
 }

.SH Possible output:

 'Exemplar' has capacity 15.
 'Exemplar is an example string.' has capacity 30.

.SH See also

   size    returns the number of characters
   length  \fI(public member function)\fP
   reserve reserves storage
           \fI(public member function)\fP
