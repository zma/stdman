.TH std::is_polymorphic 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_polymorphic \- std::is_polymorphic

.SH Synopsis

Defined in header <type_traits>
template< class T >              \fI(since C++11)\fP
struct is_polymorphic;

If T is a polymorphic_class (that is, a non-union class that declares or inherits at least one virtual function), provides the member constant value equal true. For any other type, value is false.
If T is a non-union class type, T shall be a complete type; otherwise, the behavior is undefined.

.SH Template parameters


T - a type to check


Helper variable template


template< class T >                                                 \fI(since C++17)\fP
inline constexpr bool is_polymorphic_v = is_polymorphic<T>::value;


Inherited from std::integral_constant


.SH Member constants



value    true if T is a polymorphic class type , false otherwise
         \fI(public static member constant)\fP
\fB[static]\fP


.SH Member functions


              converts the object to bool, returns value
operator bool \fI(public member function)\fP

operator()    returns value
              \fI(public member function)\fP
\fI(C++14)\fP


.SH Member types


Type       Definition
value_type bool
type       std::integral_constant<bool, value>


.SH Example


// Run this code

  #include <iostream>
  #include <type_traits>

  struct A {
      int m;
  };

  struct B {
      virtual void foo();
  };

  struct C : B {};

  int main()
  {
      std::cout << std::boolalpha;
      std::cout << std::is_polymorphic<A>::value << '\\n';
      std::cout << std::is_polymorphic<B>::value << '\\n';
      std::cout << std::is_polymorphic<C>::value << '\\n';
  }

.SH Output:

  false
  true
  true


.SH See also



is_class    checks if a type is a non-union class type
            \fI(class template)\fP
\fI(C++11)\fP

is_abstract checks if a type is an abstract class type
            \fI(class template)\fP
\fI(C++11)\fP




