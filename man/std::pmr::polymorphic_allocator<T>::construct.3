.TH std::pmr::polymorphic_allocator<T>::construct 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::pmr::polymorphic_allocator<T>::construct \- std::pmr::polymorphic_allocator<T>::construct

.SH Synopsis
   template < class U, class... Args >                                \fB(1)\fP \fI(since C++17)\fP
   void construct( U* p, Args&&... args );
   template< class T1, class T2, class... Args1, class... Args2 >

   void construct( std::pair<T1, T2>* p,                                  \fI(since C++17)\fP
   std::piecewise_construct_t,                                        \fB(2)\fP \fI(until C++20)\fP
   std::tuple<Args1...> x,

   std::tuple<Args2...> y );
   template< class T1, class T2 >                                     \fB(3)\fP \fI(since C++17)\fP
   void construct( std::pair<T1, T2>* p );                                \fI(until C++20)\fP
   template< class T1, class T2, class U, class V >                   \fB(4)\fP \fI(since C++17)\fP
   void construct( std::pair<T1, T2>* p, U&& x, V&& y );                  \fI(until C++20)\fP
   template< class T1, class T2, class U, class V >                   \fB(5)\fP \fI(since C++17)\fP
   void construct( std::pair<T1, T2>* p, const std::pair<U, V>& xy );     \fI(until C++20)\fP
   template< class T1, class T2, class U, class V >                   \fB(6)\fP \fI(since C++17)\fP
   void construct( std::pair<T1, T2>* p, std::pair<U, V>&& xy );          \fI(until C++20)\fP

   Constructs an object in allocated, but not initialized storage pointed to by p the provided constructor arguments. If the object is of type that itself uses allocators, or if it is std::pair, passes this->resource() down to the constructed object.

   1) Creates an object of the given type U by means of uses-allocator construction at the uninitialized memory location indicated by p, using *this as the allocator.
   This overload only participates in overload resolution if U is not a specialization of std::pair.
   \fI(until C++20)\fP

   2) First, if either T1 or T2 is allocator-aware, modifies the tuples x and y to include this->resource(), resulting in the two new tuples xprime and yprime, according to the following three rules:
   2a) if T1 is not allocator-aware (std::uses_allocator<T1, polymorphic_allocator>::value==false) and std::is_constructible<T1, Args1...>::value==true, then xprime is x, unmodified.
   2b) if T1 is allocator-aware (std::uses_allocator<T1, polymorphic_allocator>::value==true), and its constructor takes an allocator tag (std::is_constructible<T1, std::allocator_arg_t, polymorphic_allocator, Args1...>::value==true, then xprime is std::tuple_cat(std::make_tuple(std::allocator_arg, *this), std::move(x))
   2c) if T1 is allocator-aware (std::uses_allocator<T1, polymorphic_allocator>::value==true), and its constructor takes the allocator as the last argument (std::is_constructible<T1, Args1..., polymorphic_allocator>::value==true), then xprime is std::tuple_cat(std::move(x), std::make_tuple(*this)).
   2d) Otherwise, the program is ill-formed.
   Same rules apply to T2 and the replacement of y with yprime.
   Once xprime and yprime are constructed, constructs the pair p in allocated storage as if by ::new((void *) p) pair<T1, T2>(std::piecewise_construct, std::move(xprime), std::move(yprime));
   3) Equivalent to construct(p, std::piecewise_construct, std::tuple<>(), std::tuple<>()), that is, passes the memory resource on to the pair's member types if they accept them.
   4) Equivalent to

   construct(p, std::piecewise_construct, std::forward_as_tuple(std::forward<U>(x)),                                                                                                                                                                                                                                              \fI(until C++20)\fP
                                          std::forward_as_tuple(std::forward<V>(y)))

   5) Equivalent to

   construct(p, std::piecewise_construct, std::forward_as_tuple(xy.first),
                                          std::forward_as_tuple(xy.second))

   6) Equivalent to

   construct(p, std::piecewise_construct, std::forward_as_tuple(std::forward<U>(xy.first)),
                                          std::forward_as_tuple(std::forward<V>(xy.second)))

.SH Parameters

   p       - pointer to allocated, but not initialized storage
   args... - the constructor arguments to pass to the constructor of T
   x       - the constructor arguments to pass to the constructor of T1
   y       - the constructor arguments to pass to the constructor of T2
   xy      - the pair whose two members are the constructor arguments for T1 and T2

.SH Return value

   \fI(none)\fP

.SH Notes

   This function is called (through std::allocator_traits) by any allocator-aware object, such as std::pmr::vector (or another std::vector that was given a std::std::polymorphic_allocator as the allocator to use).

  Defect reports

   The following behavior-changing defect reports were applied retroactively to previously published C++ standards.

      DR    Applied to                         Behavior as published                                Correct behavior
   LWG 2969 C++17      uses-allocator construction passed resource()                         passes *this
   LWG 2975 C++17      first overload is mistakenly used for pair construction in some cases constrained to not accept pairs

.SH See also

   construct             constructs an object in the allocated storage
   \fB[static]\fP              \fI(function template)\fP
   construct             constructs an object in allocated storage
   (deprecated in C++17) \fI(public member function of std::allocator<T>)\fP
   (removed in C++20)
