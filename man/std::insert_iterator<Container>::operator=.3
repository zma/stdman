.TH std::insert_iterator<Container>::operator= 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::insert_iterator<Container>::operator= \- std::insert_iterator<Container>::operator=

.SH Synopsis
   insert_iterator<Container>&                                       \fI(until C++11)\fP
   operator=( typename Container::const_reference value );
   insert_iterator<Container>&                                       \fI(since C++11)\fP
   operator=( const typename Container::value_type& value );         \fI(until C++20)\fP
   constexpr insert_iterator<Container>&                     \fB(1)\fP     \fI(since C++20)\fP
   operator=( const typename Container::value_type& value );
   insert_iterator<Container>&                                                     \fI(since C++11)\fP
   operator=( typename Container::value_type&& value );          \fB(2)\fP               \fI(until C++20)\fP
   constexpr insert_iterator<Container>&                                           \fI(since C++20)\fP
   operator=( typename Container::value_type&& value );

   Inserts the given value value to the container.

   1) Results in iter = container->insert(iter, value); ++iter;
   2) Results in iter = container->insert(iter, std::move(value)); ++iter;

.SH Parameters

   value - the value to insert

.SH Return value

   *this

.SH Notes

   This function exploits the signature compatibility between hinted insert for associative containers (such as std::set::insert) and positional insert for sequential containers (such as std::vector::insert).

.SH Example

   
// Run this code

 #include <iostream>
 #include <iterator>
 #include <deque>

 int main()
 {
     std::deque<int> q;
     std::insert_iterator< std::deque<int> > it(q, q.begin());

     for (int i=0; i<10; ++i)
         it = i; // inserts i

     for (auto& elem : q) std::cout << elem << ' ';
 }

.SH Output:

 0 1 2 3 4 5 6 7 8 9
