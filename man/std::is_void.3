.TH std::is_void 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_void \- std::is_void

.SH Synopsis

Defined in header <type_traits>
template< class T >              \fI(since C++11)\fP
struct is_void;

Checks whether T is a void type. Provides the member constant value that is equal to true, if T is the type void, const void, volatile void, or const volatile void. Otherwise, value is equal to false.

.SH Template parameters


T - a type to check


Helper variable template


template< class T >                                   \fI(since C++17)\fP
inline constexpr bool is_void_v = is_void<T>::value;


Inherited from std::integral_constant


.SH Member constants



value    true if T is the type void (possibly cv-qualified) , false otherwise
         \fI(public static member constant)\fP
\fB[static]\fP


.SH Member functions


              converts the object to bool, returns value
operator bool \fI(public member function)\fP

operator()    returns value
              \fI(public member function)\fP
\fI(C++14)\fP


.SH Member types


Type       Definition
value_type bool
type       std::integral_constant<bool, value>


.SH Possible implementation



  template< class T >
  struct is_void : std::is_same<void, typename std::remove_cv<T>::type> {};



.SH Example


// Run this code

  #include <iostream>
  #include <type_traits>

  int main()
  {
      std::cout << std::boolalpha;
      std::cout << std::is_void<void>::value << '\\n';
      std::cout << std::is_void<int>::value << '\\n';
  }

.SH Output:

  true
  false


.SH See also



is_array    checks if a type is an array type
            \fI(class template)\fP
\fI(C++11)\fP

is_pointer  checks if a type is a pointer type
            \fI(class template)\fP
\fI(C++11)\fP

is_enum     checks if a type is an enumeration type
            \fI(class template)\fP
\fI(C++11)\fP

is_union    checks if a type is an union type
            \fI(class template)\fP
\fI(C++11)\fP

is_class    checks if a type is a non-union class type
            \fI(class template)\fP
\fI(C++11)\fP

is_function checks if a type is a function type
            \fI(class template)\fP
\fI(C++11)\fP

is_object   checks if a type is an object type
            \fI(class template)\fP
\fI(C++11)\fP




