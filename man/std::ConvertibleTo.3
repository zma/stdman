.TH std::ConvertibleTo 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ConvertibleTo \- std::ConvertibleTo

.SH Synopsis

  Defined in header <concepts>
  template <class From, class To>
  concept ConvertibleTo =
  std::is_convertible_v<From, To> &&  \fI(since C++20)\fP
  requires(From (&f)()) {
  static_cast<To>(f());
  };

  The concept ConvertibleTo<From, To> specifies that an expression of the type and value category specified by From can be implicitly and explicitly converted to the type To, and the two forms of conversion are equivalent.
  Specifically, ConvertibleTo<From, To> is satisfied only if, given a function fun of type From () such that the expression fun() is equality-preserving (see below),

  * Either

    o To is neither an object type nor a reference-to-object type, or
    o static_cast<To>(fun()) is equal to []() -> To { return fun(); }(), and



  * One of the following is true:

    o From is not a reference-to-object type, or
    o From is an rvalue reference to a non-const-qualified type, and the resulting state of the object referenced by fun() is valid but unspecified after either expression above; or
    o the object referred to by fun() is not modified by either expression above.



  Equality preservation

  An expression is equality preserving if it results in equal outputs given equal inputs.

  * The inputs to an expression consist of its operands.
  * The outputs of an expression consist of its result and all operands modified by the expression (if any).

  Every expression required to be equality preserving is further required to be stable: two evaluations of such an expression with the same input objects must have equal outputs absent any explicit intervening modification of those input objects.
  Unless noted otherwise, every expression used in a requires-expression is required to be equality preserving and stable, and the evaluation of the expression may only modify its non-constant operands. Operands that are constant must not be modified.

.SH See also



  is_convertible
  is_nothrow_convertible checks if a type can be converted to the other type
                         \fI(class template)\fP
  \fI(C++11)\fP
  (C++20)




