.TH std::fill_n 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::fill_n \- std::fill_n

.SH Synopsis

Defined in header <algorithm>
template< class OutputIt, class Size, class T >                                                    \fI(until C++11)\fP
void fill_n( OutputIt first, Size count, const T& value );
template< class OutputIt, class Size, class T >                                                    \fI(since C++11)\fP
OutputIt fill_n( OutputIt first, Size count, const T& value );                             \fB(1)\fP     \fI(until C++20)\fP
template< class OutputIt, class Size, class T >                                                    \fI(since C++20)\fP
constexpr OutputIt fill_n( OutputIt first, Size count, const T& value );
template< class ExecutionPolicy, class ForwardIt, class Size, class T >                        \fB(2)\fP \fI(since C++17)\fP
ForwardIt fill_n( ExecutionPolicy&& policy, ForwardIt first, Size count, const T& value );

1) Assigns the given value to the first count elements in the range beginning at first if count > 0. Does nothing otherwise.
2) Same as \fB(1)\fP, but executed according to policy. This overload only participates in overload resolution if std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true

.SH Parameters


first  - the beginning of the range of elements to modify
count  - number of elements to modify
value  - the value to be assigned
policy - the execution policy to use. See execution_policy for details.
.SH Type requirements
-
OutputIt must meet the requirements of LegacyOutputIterator.
-
ForwardIt must meet the requirements of LegacyForwardIterator.


.SH Return value


\fI(none)\fP                                                                     \fI(until C++11)\fP
Iterator one past the last element assigned if count > 0, first otherwise. \fI(since C++11)\fP


.SH Complexity

Exactly count assignments, for count > 0.

.SH Exceptions

The overload with a template parameter named ExecutionPolicy reports errors as follows:

* If execution of a function invoked as part of the algorithm throws an exception and ExecutionPolicy is one of the standard_policies, std::terminate is called. For any other ExecutionPolicy, the behavior is implementation-defined.
* If the algorithm fails to allocate memory, std::bad_alloc is thrown.


.SH Possible implementation



  template<class OutputIt, class Size, class T>
  OutputIt fill_n(OutputIt first, Size count, const T& value)
  {
      for (Size i = 0; i < count; i++) {
          *first++ = value;
      }
      return first;
  }



.SH Example

The following code uses fill_n() to assign -1 to the first half of a vector of integers:

// Run this code

  #include <algorithm>
  #include <vector>
  #include <iostream>
  #include <iterator>

  int main()
  {
      std::vector<int> v1{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

      std::fill_n(v1.begin(), 5, -1);

      std::copy(begin(v1), end(v1), std::ostream_iterator<int>(std::cout, " "));
      std::cout << "\\n";
  }

.SH Output:

  -1 -1 -1 -1 -1 5 6 7 8 9


.SH See also


     copy-assigns the given value to every element in a range
fill \fI(function template)\fP




