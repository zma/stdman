.TH std::unordered_map 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unordered_map \- std::unordered_map

.SH Synopsis

  Defined in header <unordered_map>
  template<
  class Key,
  class T,
  class Hash = std::hash<Key>,                                 \fB(1)\fP \fI(since C++11)\fP
  class KeyEqual = std::equal_to<Key>,
  class Allocator = std::allocator< std::pair<const Key, T> >
  > class unordered_map;
  namespace pmr {
  template <class Key,
  class T,
  class Hash = std::hash<Key>,                                 \fB(2)\fP \fI(since C++17)\fP
  class Pred = std::equal_to<Key>>
  using unordered_map = std::unordered_map<Key, T, Hash, Pred,
  std::pmr::polymorphic_allocator<std::pair<const Key,T>>>;
  }

  Unordered map is an associative container that contains key-value pairs with unique keys. Search, insertion, and removal of elements have average constant-time complexity.
  Internally, the elements are not sorted in any particular order, but organized into buckets. Which bucket an element is placed into depends entirely on the hash of its key. This allows fast access to individual elements, since once the hash is computed, it refers to the exact bucket the element is placed into.
  std::unordered_map meets the requirements of Container, AllocatorAwareContainer, UnorderedAssociativeContainer.

  Iterator invalidation


  Operations                                Invalidated
  All read only operations, swap, std::swap Never
  clear, rehash, reserve, operator=         Always
  insert, emplace, emplace_hint, operator[] Only if causes rehash
  erase                                     Only to the element erased


.SH Notes


  * The swap functions do not invalidate any of the iterators inside the container, but they do invalidate the iterator marking the end of the swap region.


  * References and pointers to either key or data stored in the container are only invalidated by erasing that element, even when the corresponding iterator is invalidated.


.SH Member types


  Member type                     Definition
  key_type                        Key
  mapped_type                     T
  value_type                      std::pair<const Key, T>
  size_type                       Unsigned integer type (usually std::size_t)
  difference_type                 Signed integer type (usually std::ptrdiff_t)
  hasher                          Hash

  key_equal                       KeyEqual                                                                    \fI(until C++20)\fP
                                  Hash::transparent_key_equal if defined and names a type, otherwise KeyEqual \fI(since C++20)\fP

  allocator_type                  Allocator
  reference                       value_type&
  const_reference                 const value_type&
  pointer                         std::allocator_traits<Allocator>::pointer
  const_pointer                   std::allocator_traits<Allocator>::const_pointer
  iterator                        LegacyForwardIterator
  const_iterator                  Constant LegacyForwardIterator
                                  An iterator type whose category, value, difference, pointer and
  local_iterator                  reference types are the same as iterator. This iterator
                                  can be used to iterate through a single bucket but not across buckets
                                  An iterator type whose category, value, difference, pointer and
  const_local_iterator            reference types are the same as const_iterator. This iterator
                                  can be used to iterate through a single bucket but not across buckets
  node_type\fI(since C++17)\fP          a specialization of node_handle representing a container node
                                  type describing the result of inserting a node_type, a specialization of

                                    template <class Iter, class NodeType> struct /*unspecified*/ {
                                        Iter     position;
  insert_return_type\fI(since C++17)\fP       bool     inserted;
                                        NodeType node;
                                    };

                                  instantiated with template arguments iterator and node_type.


.SH Member functions


                    constructs the unordered_map
  constructor       \fI(public member function)\fP
                    destructs the unordered_map
  destructor        \fI(public member function)\fP
                    assigns values to the container
  operator=         \fI(public member function)\fP
                    returns the associated allocator
  get_allocator     \fI(public member function)\fP

.SH Iterators


  begin             returns an iterator to the beginning
  cbegin            \fI(public member function)\fP



  end_              returns an iterator to the end
  cend              \fI(public member function)\fP



.SH Capacity

                    checks whether the container is empty
  empty             \fI(public member function)\fP
                    returns the number of elements
  size              \fI(public member function)\fP
                    returns the maximum possible number of elements
  max_size          \fI(public member function)\fP

.SH Modifiers

                    clears the contents
  clear             \fI(public member function)\fP
                    inserts elements
                    or nodes
  insert            \fI(since C++17)\fP
                    \fI(public member function)\fP

  insert_or_assign  inserts an element or assigns to the current element if the key already exists
                    \fI(public member function)\fP
  \fI(C++17)\fP
                    constructs element in-place
  emplace           \fI(public member function)\fP
                    constructs elements in-place using a hint
  emplace_hint      \fI(public member function)\fP

  try_emplace       inserts in-place if the key does not exist, does nothing if the key exists
                    \fI(public member function)\fP
  \fI(C++17)\fP
                    erases elements
  erase             \fI(public member function)\fP
                    swaps the contents
  swap              \fI(public member function)\fP

  extract           extracts nodes from the container
                    \fI(public member function)\fP
  \fI(C++17)\fP

  merge             splices nodes from another container
                    \fI(public member function)\fP
  \fI(C++17)\fP

.SH Lookup

                    access specified element with bounds checking
  at                \fI(public member function)\fP
                    access or insert specified element
  operator[]        \fI(public member function)\fP
                    returns the number of elements matching specific key
  count             \fI(public member function)\fP
                    finds element with specific key
  find              \fI(public member function)\fP

  contains          checks if the container contains element with specific key
                    \fI(public member function)\fP
  (C++20)
                    returns range of elements matching a specific key
  equal_range       \fI(public member function)\fP

.SH Bucket interface

                    returns an iterator to the beginning of the specified bucket
  begin(size_type)  \fI(public member function)\fP
  cbegin(size_type)
                    returns an iterator to the end of the specified bucket
  end(size_type)    \fI(public member function)\fP
  cend(size_type)
                    returns the number of buckets
  bucket_count      \fI(public member function)\fP
                    returns the maximum number of buckets
  max_bucket_count  \fI(public member function)\fP
                    returns the number of elements in specific bucket
  bucket_size       \fI(public member function)\fP
                    returns the bucket for specific key
  bucket            \fI(public member function)\fP

.SH Hash policy

                    returns average number of elements per bucket
  load_factor       \fI(public member function)\fP
                    manages maximum average number of elements per bucket
  max_load_factor   \fI(public member function)\fP
                    reserves at least the specified number of buckets.
  rehash            This regenerates the hash table.
                    \fI(public member function)\fP
                    reserves space for at least the specified number of elements.
  reserve           This regenerates the hash table.
                    \fI(public member function)\fP

.SH Observers

                    returns function used to hash the keys
  hash_function     \fI(public member function)\fP
                    returns the function used to compare keys for equality
  key_eq            \fI(public member function)\fP


.SH Non-member functions


                                compares the values in the unordered_map
  operator==                    \fI(function template)\fP
  operator!=

  std::swap(std::unordered_map) specializes the std::swap algorithm
                                \fI(function template)\fP
  \fI(C++11)\fP

  erase_if(std::unordered_map)  Erases all elements satisfying specific criteria
                                \fI(function template)\fP
  (C++20)


  Deduction_guides\fI(since C++17)\fP


.SH Example

  
// Run this code

    #include <iostream>
    #include <string>
    #include <unordered_map>

    int main()
    {
        // Create an unordered_map of three strings (that map to strings)
        std::unordered_map<std::string, std::string> u = {
            {"RED","#FF0000"},
            {"GREEN","#00FF00"},
            {"BLUE","#0000FF"}
        };

        // Iterate and print keys and values of unordered_map
        for( const auto& n : u ) {
            std::cout << "Key:[" << n.first << "] Value:[" << n.second << "]\\n";
        }

        // Add two new entries to the unordered_map
        u["BLACK"] = "#000000";
        u["WHITE"] = "#FFFFFF";

        // Output values by key
        std::cout << "The HEX of color RED is:[" << u["RED"] << "]\\n";
        std::cout << "The HEX of color BLACK is:[" << u["BLACK"] << "]\\n";

        return 0;
    }

.SH Output:

    Key:[RED] Value:[#FF0000]
    Key:[BLUE] Value:[#0000FF]
    Key:[GREEN] Value:[#00FF00]
    The HEX of color RED is:[#FF0000]
    The HEX of color BLACK is:[#000000]




