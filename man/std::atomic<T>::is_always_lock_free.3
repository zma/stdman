.TH std::atomic<T>::is_always_lock_free 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::atomic<T>::is_always_lock_free \- std::atomic<T>::is_always_lock_free

.SH Synopsis
   static constexpr bool is_always_lock_free = /*implementation-defined*/;  \fI(since C++17)\fP

   Equals true if this atomic type is always lock-free and false if it is never or sometimes lock-free.

   The value of this constant is consistent with both the macro ATOMIC_xxx_LOCK_FREE, where defined, with the member function is_lock_free and non-member function std::atomic_is_lock_free.

.SH Notes

   There is no non-member function equivalent of this static member constant because non-member functions take pointers to atomic types, and therefore aren't as useful in constant expressions.

.SH See also

   is_lock_free        checks if the atomic object is lock-free
                       \fI(public member function)\fP
   atomic_is_lock_free checks if the atomic type's operations are lock-free
   \fI(C++11)\fP             \fI(function template)\fP
