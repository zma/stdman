.TH std::experimental::filesystem::path::extension 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::filesystem::path::extension \- std::experimental::filesystem::path::extension

.SH Synopsis

  path extension() const;  (filesystem TS)

  Returns the extension of the filename component of the path *this.
  If the filename() component of the path contains a period (.), and is not one of the special filesystem elements dot or dot-dot, then the extension is the substring beginning at the rightmost period (including the period) and until the end of the pathname.
  If the pathname is either . or .., or if filename() does not contain the . character, then empty path is returned.
  Additional behavior may be defined by the implementations for file systems which append additional elements (such as alternate data streams or partitioned dataset names) to extensions.

.SH Parameters

  \fI(none)\fP

.SH Return value

  The extension of the current pathname or an empty path if there's no extension.

.SH Exceptions

  \fI(none)\fP

.SH Notes

  The extension as returned by this function includes a period to make it possible to distinguish the file that ends with a period \fI(function returns ".") from a file with no extension (function returns "")\fP
  For any path p, p.stem()+p.extension() == p.filename()

.SH Example

  
// Run this code

    #include <iostream>
    #include <experimental/filesystem>
    namespace fs = std::experimental::filesystem;

    int main()
    {
        std::cout << fs::path("/foo/bar.txt").extension() << '\\n'
                  << fs::path("/foo/bar.").extension() << '\\n'
                  << fs::path("/foo/bar").extension() << '\\n'
                  << fs::path("/foo/bar.txt/bar.cc").extension() << '\\n'
                  << fs::path("/foo/bar.txt/bar.").extension() << '\\n'
                  << fs::path("/foo/bar.txt/bar").extension() << '\\n'
                  << fs::path("/foo/.").extension() << '\\n'
                  << fs::path("/foo/..").extension() << '\\n'
                  << fs::path("/foo/.hidden").extension() << '\\n';
    }

.SH Output:

    ".txt"
    "."
    ""
    ".cc"
    "."
    ""
    ""
    ""
    ".hidden"


.SH See also


                    returns the filename path component
  filename          \fI(public member function)\fP
                    returns the stem path component
  stem              \fI(public member function)\fP
                    replaces the extension
  replace_extension \fI(public member function)\fP
                    checks if the corresponding path element is not empty
  has_extension     \fI(public member function)\fP




