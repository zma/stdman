.TH std::chrono::ambiguous_local_time 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::chrono::ambiguous_local_time \- std::chrono::ambiguous_local_time

.SH Synopsis

  Defined in header <chrono>
  class ambiguous_local_time;  \fI(since C++20)\fP

  Defines a type of object to be thrown as exception to report that an attempt was made to convert a ambiguous std::chrono::local_time to a std::chrono::sys_time without specifying a std::chrono::choose (such as choose::earliest or choose::latest).
  This exception is thrown by std::chrono::time_zone::to_sys and functions that call it (such as the constructors of std::chrono::zoned_time that takes a std::chrono::local_time).
   std-chrono-ambiguous local time-inheritance.svg
  Inheritance diagram

.SH Member functions


                constructs the exception object
  constructor   \fI(public member function)\fP


   std::chrono::ambiguous_local_time::ambiguous_local_time


  template< class Duration >
  ambiguous_local_time(const std::chrono::local_time<Duration>& tp,
  const std::chrono::local_info& i);

  Constructs the exception object. The explanatory string returned by what() is equivalent to that produced by os.str() after the following code:

    std::ostringstream os;
    os << tp << " is ambiguous.  It could be\\n"
       << tp << ' ' << i.first.abbrev << " == "
       << tp - i.first.offset << " UTC or\\n"
       << tp << ' ' << i.second.abbrev  << " == "
       << tp - i.second.offset  << " UTC";

  Because copying a standard library class derived from std::exception is not permitted to throw exceptions, this message is typically stored internally as a separately-allocated reference-counted string.
  The behavior is undefined if i.result != std::chrono::local_info::ambiguous.

.SH Parameters


  tp - the time point for which conversion was attempted
  i  - a std::chrono::local_info describing the result of the conversion attempt


.SH Exceptions

  May throw std::bad_alloc

  Inherited from std::exception


.SH Member functions



  destructor   destroys the exception object
               \fI(virtual public member function of std::exception)\fP
  \fB[virtual]\fP

  what         returns an explanatory string
               \fI(virtual public member function of std::exception)\fP
  \fB[virtual]\fP




