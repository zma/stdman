.TH std::is_signed 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_signed \- std::is_signed

.SH Synopsis

  Defined in header <type_traits>
  template< class T >              \fI(since C++11)\fP
  struct is_signed;

  If T is an arithmetic type, provides the member constant value equal true if T(-1) < T\fB(0)\fP: this results in true for the floating-point types and the signed integer types, and in false for the unsigned integer types and the type bool.
  For any other type, value is false.

.SH Template parameters


  T - a type to check


  Helper variable template


  template< class T >                                       \fI(since C++17)\fP
  inline constexpr bool is_signed_v = is_signed<T>::value;


  Inherited from std::integral_constant


.SH Member constants



  value    true if T is a signed arithmetic type , false otherwise
           \fI(public static member constant)\fP
  \fB[static]\fP


.SH Member functions


                converts the object to bool, returns value
  operator bool \fI(public member function)\fP

  operator()    returns value
                \fI(public member function)\fP
  \fI(C++14)\fP


.SH Member types


  Type       Definition
  value_type bool
  type       std::integral_constant<bool, value>


.SH Possible implementation



    namespace detail {
    template<typename T,bool = std::is_arithmetic<T>::value>
    struct is_signed : std::integral_constant<bool, T(-1) < T\fB(0)\fP> {};

    template<typename T>
    struct is_signed<T,false> : std::false_type {};
    } // namespace detail

    template<typename T>
    struct is_signed : detail::is_signed<T>::type {};



.SH Example

  
// Run this code

    #include <iostream>
    #include <type_traits>

    class A {};
    enum B : int {};
    enum class C : int {};

    int main()
    {
        std::cout << std::boolalpha;
        std::cout << std::is_signed<A>::value << '\\n';
        std::cout << std::is_signed<float>::value << '\\n';
        std::cout << std::is_signed<signed int>::value << '\\n';
        std::cout << std::is_signed<unsigned int>::value << '\\n';
        std::cout << std::is_signed<B>::value << '\\n';
        std::cout << std::is_signed<C>::value << '\\n';

        // shorter:
        std::cout << std::is_signed<signed int>() << '\\n';
        std::cout << std::is_signed<unsigned int>() << '\\n';
    }

.SH Output:

    false
    true
    true
    false
    false
    false
    true
    false


.SH See also



  is_unsigned   checks if a type is an unsigned arithmetic type
                \fI(class template)\fP
  \fI(C++11)\fP

  is_signed     identifies signed types
                \fI(public static member constant of std::numeric_limits<T>)\fP
  \fB[static]\fP

  is_arithmetic checks if a type is an arithmetic type
                \fI(class template)\fP
  \fI(C++11)\fP

  make_signed   makes the given integral type signed
                \fI(class template)\fP
  \fI(C++11)\fP

  make_unsigned makes the given integral type unsigned
                \fI(class template)\fP
  \fI(C++11)\fP




