.TH std::chrono::time_point<Clock,Duration>::time_point 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::chrono::time_point<Clock,Duration>::time_point \- std::chrono::time_point<Clock,Duration>::time_point

.SH Synopsis

  time_point();                                                         \fI(since C++11)\fP
                                                                        \fI(until C++14)\fP
  constexpr time_point();                                               \fI(since C++14)\fP
  explicit time_point( const duration& d );                                            \fI(since C++11)\fP
                                                                \fB(1)\fP                    \fI(until C++14)\fP
  constexpr explicit time_point( const duration& d );                                  \fI(since C++14)\fP
  template< class Duration2 >                                       \fB(2)\fP                               \fI(since C++11)\fP
  time_point( const time_point<Clock,Duration2>& t );                   \fB(3)\fP                           \fI(until C++14)\fP
  template< class Duration2 >                                                                         \fI(since C++14)\fP
  constexpr time_point( const time_point<Clock,Duration2>& t );

  Constructs a new time_point from one of several optional data sources.
  1) Default constructor, creates a time_point representing the Clock's epoch (i.e., time_since_epoch() is zero).
  2) Constructs a time_point at Clock's epoch plus d.
  3) Constructs a time_point by converting t to duration. This constructor only participates in overload resolution if Duration2 is implicitly convertible to duration.

.SH Parameters


  d - a duration to copy from
  t - a time_point to convert from


.SH Example

  
// Run this code

    #include <chrono>
    #include <iostream>

    using Clock = std::chrono::high_resolution_clock;
    using TimePoint = std::chrono::time_point<Clock>;

    void print_ms(const TimePoint& point)
    {
        using Ms = std::chrono::milliseconds;
        const Clock::duration since_epoch = point.time_since_epoch();
        std::cout << std::chrono::duration_cast<Ms>(since_epoch).count() << " ms\\n";
    }

    int main()
    {
        const TimePoint default_value = TimePoint(); // (1)
        print_ms(default_value); // 0 ms

        const Clock::duration duration_4_seconds = std::chrono::seconds(4);
        const TimePoint time_point_4_seconds(duration_4_seconds); // (2)
          // 4 seconds from start of epoch
        print_ms(time_point_4_seconds); // 4000 ms

        const TimePoint time_point_now = Clock::now(); // (3)
        print_ms(time_point_now); // 43098276 ms
    }

.SH Possible output:

    0 ms
    4000 ms
    43098276 ms


.SH See also


                constructs new duration
  constructor   \fI(public member function of std::chrono::duration<Rep,Period>)\fP
                converts a duration to another, with a different tick interval
  duration_cast \fI(function template)\fP




