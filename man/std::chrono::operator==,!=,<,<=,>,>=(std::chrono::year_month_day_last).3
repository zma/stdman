.TH std::chrono::operator==,!=,<,<=,>,>=(std::chrono::year_month_day_last) 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::chrono::operator==,!=,<,<=,>,>=(std::chrono::year_month_day_last) \- std::chrono::operator==,!=,<,<=,>,>=(std::chrono::year_month_day_last)

.SH Synopsis

constexpr bool operator==(const std::chrono::year_month_day_last& x, \fB(1)\fP \fI(since C++20)\fP
const std::chrono::year_month_day_last& y) noexcept;
constexpr bool operator!=(const std::chrono::year_month_day_last& x, \fB(2)\fP \fI(since C++20)\fP
const std::chrono::year_month_day_last& y) noexcept;
constexpr bool operator< (const std::chrono::year_month_day_last& x, \fB(3)\fP \fI(since C++20)\fP
const std::chrono::year_month_day_last& y) noexcept;
constexpr bool operator> (const std::chrono::year_month_day_last& x, \fB(4)\fP \fI(since C++20)\fP
const std::chrono::year_month_day_last& y) noexcept;
constexpr bool operator<=(const std::chrono::year_month_day_last& x, \fB(5)\fP \fI(since C++20)\fP
const std::chrono::year_month_day_last& y) noexcept;
constexpr bool operator>=(const std::chrono::year_month_day_last& x, \fB(6)\fP \fI(since C++20)\fP
const std::chrono::year_month_day_last& y) noexcept;

Compares the two year_month_day_last objects x and y. This is a lexicographical comparison: the year() is compared first, then month().

.SH Return value

1) x.year() == y.year() && x.month() == y.month()
2) !(x == y)
3) If x.year() != y.year(), x.year() < y.year(); otherwise, x.month() < y.month().
4) y < x
5) !(y < x)
6) !(x < y)

.SH Notes

If both x and y represent valid dates (x.ok() && y.ok() == true), the result of the lexicographical comparison is consistent with the calendar order.



