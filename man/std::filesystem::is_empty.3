.TH std::filesystem::is_empty 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::filesystem::is_empty \- std::filesystem::is_empty

.SH Synopsis

  Defined in header <filesystem>
  bool is_empty( const std::filesystem::path& p );                       \fI(since C++17)\fP
  bool is_empty( const std::filesystem::path& p, std::error_code& ec );

  Checks whether the given path refers to an empty file or directory.

.SH Parameters


  p  - path to examine
  ec - error code to modify in case of error


.SH Return value

  true if the file indicated by p or if the type indicated s refers to an empty file or directory, false otherwise. The non-throwing overload returns false if an error occurs.

.SH Exceptions

  The overload that does not take a std::error_code& parameter throws filesystem_error on underlying OS API errors, constructed with p as the first path argument and the OS error code as the error code argument. The overload taking a std::error_code& parameter sets it to the OS API error code if an OS API call fails, and executes ec.clear() if no errors occur. Any overload not marked noexcept may throw std::bad_alloc if memory allocation fails.

  Defect reports

  The following behavior-changing defect reports were applied retroactively to previously published C++ standards.

  DR       Applied to Behavior as published                                       Correct behavior
  LWG_3013 C++17      error_code overload marked noexcept but can allocate memory noexcept removed


.SH Example


   This section is incomplete
   Reason: no example


.SH See also



  status         determines file attributes
  symlink_status determines file attributes, checking the symlink target
                 \fI(function)\fP
  \fI(C++17)\fP
  \fI(C++17)\fP

  exists         checks whether path refers to existing file system object
                 \fI(function)\fP
  \fI(C++17)\fP




