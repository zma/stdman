.TH std::experimental::basic_string_view 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::basic_string_view \- std::experimental::basic_string_view

.SH Synopsis

Defined in header <experimental/string_view>
template<
class CharT,                                  (library fundamentals TS)
class Traits = std::char_traits<CharT>
> class basic_string_view;

The class template basic_string_view describes an object that can refer to a constant contiguous sequence of char-like objects with the first element of the sequence at position zero.
A typical implementation holds only two members: a pointer to constant CharT and a size.
Several typedefs for common character types are provided:

Defined in header <experimental/string_view>
Type                              Definition
std::experimental::string_view    std::experimental::basic_string_view<char>
std::experimental::wstring_view   std::experimental::basic_string_view<wchar_t>
std::experimental::u16string_view std::experimental::basic_string_view<char16_t>
std::experimental::u32string_view std::experimental::basic_string_view<char32_t>


.SH Template parameters


CharT  - character type
Traits - traits class specifying the operations on the character type


.SH Member types


Member type            Definition
traits_type            Traits
value_type             CharT
pointer                CharT*
const_pointer          const CharT*
reference              CharT&
const_reference        const CharT&
const_iterator         implementation-defined LegacyRandomAccessIterator
iterator               const_iterator
reverse_iterator       const_reverse_iterator
const_reverse_iterator std::reverse_iterator<const_iterator>
size_type              std::size_t
difference_type        std::ptrdiff_t

Note: iterator and const_iterator are the same type because string views are views into constant character sequences.

.SH Member functions


                      constructs a basic_string_view
constructor           \fI(public member function)\fP
                      assigns a view
operator=             \fI(public member function)\fP

.SH Iterators

                      returns an iterator to the beginning
begin                 \fI(public member function)\fP
cbegin
                      returns an iterator to the end
end                   \fI(public member function)\fP
cend
                      returns a reverse iterator to the beginning
rbegin                \fI(public member function)\fP
crbegin
                      returns a reverse iterator to the end
rend                  \fI(public member function)\fP
crend

.SH Element access

                      access specified character
operator[]            \fI(public member function)\fP
                      access specified character with bounds checking
at                    \fI(public member function)\fP
                      accesses the first character
front                 \fI(public member function)\fP
                      accesses the last character
back                  \fI(public member function)\fP
                      returns a pointer to the first character of a view
data                  \fI(public member function)\fP

.SH Capacity

                      returns the number of characters
size                  \fI(public member function)\fP
length
                      returns the maximum number of characters
max_size              \fI(public member function)\fP
                      checks whether the view is empty
empty                 \fI(public member function)\fP

.SH Modifiers

                      Shrinks the view by moving its start forward
remove_prefix         \fI(public member function)\fP
                      Shrinks the view by moving its end backward
remove_suffix         \fI(public member function)\fP
                      swaps the contents
swap                  \fI(public member function)\fP

.SH Operations

                      creates a string from the view
to_string             \fI(public member function)\fP
operator_basic_string
                      copies characters
copy                  \fI(public member function)\fP
                      returns a substring
substr                \fI(public member function)\fP
                      compares two views
compare               \fI(public member function)\fP
                      find characters in the view
find                  \fI(public member function)\fP
                      find the last occurrence of a substring
rfind                 \fI(public member function)\fP
                      find first occurrence of characters
find_first_of         \fI(public member function)\fP
                      find last occurrence of characters
find_last_of          \fI(public member function)\fP
                      find first absence of characters
find_first_not_of     \fI(public member function)\fP
                      find last absence of characters
find_last_not_of      \fI(public member function)\fP

.SH Constants


npos                  special value. The exact meaning depends on the context
                      \fI(public static member constant)\fP
\fB[static]\fP


.SH Non-member functions



operator==
operator!= lexicographically compares two views
operator<  \fI(function template)\fP
operator>
operator<=
operator>=

.SH Input/output

           performs stream output on views
operator<< \fI(function template)\fP


.SH Helper classes



std::hash<std::experimental::string_view>    hash support for views
std::hash<std::experimental::wstring_view>   \fI(class template specialization)\fP
std::hash<std::experimental::u16string_view>
std::hash<std::experimental::u32string_view>


Feature test macros


                                   a value of at least 201411 indicates that basic_string_view template is supported
__cpp_lib_experimental_string_view (macro constant)




