.TH std::experimental::simd 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::simd \- std::experimental::simd

.SH Synopsis

Defined in header <experimental/simd>
template< class T, class Abi = simd_abi::compatible<T> >
class simd;

The class template simd is a data-parallel type. The width of a given simd instantiation is a constant expression, determined by the template parameters.
An ABI tag is a type in the simd_abi namespace that indicates a choice of size and binary representation for objects of data-parallel type.

.SH Template parameters


T   - element type
Abi - tag type used to determine the number of elements and storage


Helper alias templates


template< class T, int N >
using fixed_size_simd = std::experimental::simd<T, std::experimental::simd_abi::fixed_size<N>>;
template< class T, int N >
using native_simd = std::experimental::simd<T, std::experimental::simd_abi::native>;


.SH Member types


Member type Definition
value_type  T
reference   implementation-defined
mask_type   simd_mask<T, Abi>
abi_type    Abi


.SH Member functions


              constructs a simd object
constructor   \fI(public member function)\fP
              loads from address
copy_from     \fI(public member function)\fP
              stores to address
copy_to       \fI(public member function)\fP
              accesses specified element
operator[]    \fI(public member function)\fP
              element-wise increment and decrement
operator++_   \fI(public member function)\fP
operator--

operator!_    element-wise unary operators
operator~_    \fI(public member function)\fP
operator+_
operator-

size          returns the number of elements
              \fI(public static member function)\fP
\fB[static]\fP


.SH Non-member functions



operator+_
operator-_
operator*_
operator/_
operator%_   element-wise binary operators
operator&_   \fI(function)\fP
operator|_
operator^_
operator<<_
operator>>_
operator<<_
operator>>

operator+=_
operator-=_
operator*=_
operator/=_
operator%=_  element-wise compound binary operators
operator&=_  \fI(function)\fP
operator|=_
operator^=_
operator<<=_
operator>>=_
operator<<=_
operator>>=

operator==_
operator!=_  element-wise relational operators
operator>=_  \fI(function)\fP
operator<=_
operator>_
operator<


.SH Example




