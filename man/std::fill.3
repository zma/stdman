.TH std::fill 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::fill \- std::fill

.SH Synopsis

Defined in header <algorithm>
template< class ForwardIt, class T >                                                            \fI(until C++20)\fP
void fill( ForwardIt first, ForwardIt last, const T& value );
template< class ForwardIt, class T >                                                    \fB(1)\fP     \fI(since C++20)\fP
constexpr void fill( ForwardIt first, ForwardIt last, const T& value );
template< class ExecutionPolicy, class ForwardIt, class T >                                 \fB(2)\fP \fI(since C++17)\fP
void fill( ExecutionPolicy&& policy, ForwardIt first, ForwardIt last, const T& value );

1) Assigns the given value to the elements in the range [first, last).
2) Same as \fB(1)\fP, but executed according to policy. This overload does not participate in overload resolution unless std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true

.SH Parameters


first, last - the range of elements to modify
value       - the value to be assigned
policy      - the execution policy to use. See execution_policy for details.
.SH Type requirements
-
ForwardIt must meet the requirements of LegacyForwardIterator.


.SH Return value

\fI(none)\fP

.SH Complexity

Exactly last - first assignments.

.SH Exceptions

The overload with a template parameter named ExecutionPolicy reports errors as follows:

* If execution of a function invoked as part of the algorithm throws an exception and ExecutionPolicy is one of the standard_policies, std::terminate is called. For any other ExecutionPolicy, the behavior is implementation-defined.
* If the algorithm fails to allocate memory, std::bad_alloc is thrown.


.SH Possible implementation



  template< class ForwardIt, class T >
  void fill(ForwardIt first, ForwardIt last, const T& value)
  {
      for (; first != last; ++first) {
          *first = value;
      }
  }



.SH Example

The following code uses fill() to set all of the elements of a vector of integers to -1:

// Run this code

  #include <algorithm>
  #include <vector>
  #include <iostream>

  int main()
  {
      std::vector<int> v{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

      std::fill(v.begin(), v.end(), -1);

      for (auto elem : v) {
          std::cout << elem << " ";
      }
      std::cout << "\\n";
  }

.SH Output:

  -1 -1 -1 -1 -1 -1 -1 -1 -1 -1


.SH See also


          copy-assigns the given value to N elements in a range
fill_n    \fI(function template)\fP

copy
copy_if   copies a range of elements to a new location
          \fI(function template)\fP

\fI(C++11)\fP
          assigns the results of successive function calls to every element in a range
generate  \fI(function template)\fP
          applies a function to a range of elements
transform \fI(function template)\fP




