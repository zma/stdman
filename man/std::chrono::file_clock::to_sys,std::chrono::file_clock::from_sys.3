.TH std::chrono::file_clock::to_sys,std::chrono::file_clock::from_sys 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::chrono::file_clock::to_sys,std::chrono::file_clock::from_sys \- std::chrono::file_clock::to_sys,std::chrono::file_clock::from_sys

.SH Synopsis

template <class Duration>                               \fI(since C++20)\fP
static std::chrono::sys_time</*see below*/>         \fB(1)\fP (optional)
to_sys(const std::chrono::file_time<Duration>& t);
template <class Duration>                               \fI(since C++20)\fP
static std::chrono::file_time</*see below*/>        \fB(2)\fP (optional)
from_sys(const std::chrono::sys_time<Duration>& t);

1) Converts the file_time t to a sys_time representing the same point in time.
2) Converts the sys_time t to a file_time representing the same point in time.
The duration of the return type is computed from Duration in an unspecified manner.
These function templates are optional: an implementation may choose to instead provide to_utc and from_utc.

.SH Return value

1) A sys_time representing the same point in time as the argument.
2) A file_time representing the same point in time as the argument.

.SH Notes

User code should usually use std::chrono::clock_cast, which provides a generic interface to convert time points between clocks, rather than call these functions directly.

.SH See also



to_utc              converts between file_time and utc_time
from_utc            \fI(public static member function)\fP

\fB[static]\fP (optional)

clock_cast          convert time points of one clock to another
                    \fI(function template)\fP
(C++20)




