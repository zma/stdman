.TH std::chrono::is_clock 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::chrono::is_clock \- std::chrono::is_clock

.SH Synopsis

  Defined in header <chrono>
  template< class T >
  struct is_clock;

  If T satisfies the Clock requirements, provides the member constant value equal true. For any other type, value is false.
  For the purpose of this trait, the extent to which an implementation determines that a type cannot meet the Clock requirements is unspecified, except that a minimum T shall not qualify as a Clock unless it meets all of the following conditions:

  * The qualified-ids T::rep, T::period, T::duration, and T::time_point are all valid and each denotes a type;
  * The expressions T::is_steady and T::now() are each well-formed when treated as an unevaluated operand.

  The behavior of a program that adds specializations for is_clock is undefined.

.SH Template parameters


  T - a type to check


  Helper variable template


  template< class T >                                     \fI(since C++20)\fP
  inline constexpr bool is_clock_v = is_clock<T>::value;


  Inherited from std::integral_constant


.SH Member constants



  value    true if T satisfies the Clock requirements , false otherwise
           \fI(public static member constant)\fP
  \fB[static]\fP


.SH Member functions


                converts the object to bool, returns value
  operator bool \fI(public member function)\fP

  operator()    returns value
                \fI(public member function)\fP
  \fI(C++14)\fP


.SH Member types


  Type       Definition
  value_type bool
  type       std::integral_constant<bool, value>


.SH Possible implementation



    namespace detail {
        template<class, class = std::void_t<>>
        struct is_clock_impl : std::false_type {};
        template<class T>
        struct is_clock_impl<T, std::void_t<typename T::rep, typename T::period,
                                            typename T::duration, typename T::time_point,
                                            decltype(T::is_steady), decltype(T::now())>>
            : std::true_type {};
    }

    template<class T>
    struct is_clock : detail::is_clock_impl<T> {};





