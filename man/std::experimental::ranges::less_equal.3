.TH std::experimental::ranges::less_equal 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::ranges::less_equal \- std::experimental::ranges::less_equal

.SH Synopsis

Defined in header <experimental/ranges/functional>
template< class T = void >
requires StrictTotallyOrdered<T> ||
Same<T, void> ||                                                               (ranges TS)
/* < on two const T lvalues invokes a built-in operator comparing pointers */
struct less_equal;
template <>                                                                    (ranges TS)
struct less_equal<void>;

Function object for performing comparisons. The primary template invokes operator< on const lvalues of type T with the argument order inverted and then negates the result. The specialization less_equal<void> deduces the parameter types of the function call operator from the arguments (but not the return type).
All specializations of less_equal are Semiregular.

.SH Member types


Member type                                                     Definition
is_transparent (member only of less_equal<void> specialization) /* unspecified */


.SH Member functions


           checks if the first argument is less than or equal to the second
operator() \fI(public member function)\fP


std::experimental::ranges::less_equal::operator()


constexpr bool operator()(const T& x, const T& y) const; \fB(1)\fP (member only of primary less_equal<T> template)
template< class T, class U >
requires StrictTotallyOrderedWith<T, U> ||
/* std::declval<T>() < std::declval<U>() resolves to     \fB(2)\fP (member only of less_equal<void> specialization)
a built-in operator comparing pointers */
constexpr bool operator()(T&& t, U&& u) const;

1) Compares x and y. Equivalent to return !ranges::less<>{}(y, x);
2) Compares t and u. Equivalent to return !ranges::less<>{}(std::forward<U>(u), std::forward<T>(t));.

.SH Notes

Unlike std::less_equal, ranges::less_equal requires all six comparison operators <, <=, >, >=, == and != to be valid (via the StrictTotallyOrdered and StrictTotallyOrderedWith constraints) and is entirely defined in terms of ranges::less. However, the implementation is free to use operator<= directly, because those concepts require the results of the comparison operators to be consistent.

.SH Example


 This section is incomplete
 Reason: no example


.SH See also


           function object implementing x <= y
less_equal \fI(class template)\fP




