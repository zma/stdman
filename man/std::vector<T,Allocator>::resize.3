.TH std::vector<T,Allocator>::resize 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::vector<T,Allocator>::resize \- std::vector<T,Allocator>::resize

.SH Synopsis

void resize( size_type count, T value = T() );               \fI(until C++11)\fP
void resize( size_type count );                          \fB(1)\fP \fI(since C++11)\fP
void resize( size_type count, const value_type& value ); \fB(2)\fP \fI(since C++11)\fP

Resizes the container to contain count elements.
If the current size is greater than count, the container is reduced to its first count elements.

If the current size is less than count, additional elements are appended and initialized with copies of value. \fI(until C++11)\fP
If the current size is less than count,
1) additional default-inserted elements are appended                                                           \fI(since C++11)\fP
2) additional copies of value are appended


.SH Parameters


count - new size of the container
value - the value to initialize the new elements with
.SH Type requirements
-
T must meet the requirements of MoveInsertable and DefaultInsertable in order to use overload \fB(1)\fP.
-
T must meet the requirements of CopyInsertable in order to use overload \fB(2)\fP.


.SH Return value

\fI(none)\fP

.SH Complexity

Linear in the difference between the current size and count. Additional complexity possible due to reallocation if capacity is less than count

.SH Exceptions

If an exception is thrown, this function has no effect (strong_exception_guarantee).

In overload \fB(1)\fP, if T's move constructor is not noexcept and T is not CopyInsertable into *this, vector will use the throwing move constructor. If it throws, the guarantee is waived and the effects are unspecified. \fI(since C++11)\fP


.SH Notes

If value-initialization in overload \fB(1)\fP is undesirable, for example, if the elements are of non-class type and zeroing out is not needed, it can be avoided by providing a custom_Allocator::construct.
Vector capacity is never reduced when resizing to smaller size because that would invalidate all iterators, rather than only the ones that would be invalidated by the equivalent sequence of pop_back() calls.

.SH Example


// Run this code

  #include <iostream>
  #include <vector>
  int main()
  {
      std::vector<int> c = {1, 2, 3};
      std::cout << "The vector holds: ";
      for(auto& el: c) std::cout << el << ' ';
      std::cout << '\\n';
      c.resize(5);
      std::cout << "After resize up to 5: ";
      for(auto& el: c) std::cout << el << ' ';
      std::cout << '\\n';
      c.resize(2);
      std::cout << "After resize down to 2: ";
      for(auto& el: c) std::cout << el << ' ';
      std::cout << '\\n';
  }

.SH Output:

  The vector holds: 1 2 3
  After resize up to 5: 1 2 3 0 0
  After resize down to 2: 1 2


.SH See also


       returns the number of elements
size   \fI(public member function)\fP
       inserts elements
insert \fI(public member function)\fP
       erases elements
erase  \fI(public member function)\fP




