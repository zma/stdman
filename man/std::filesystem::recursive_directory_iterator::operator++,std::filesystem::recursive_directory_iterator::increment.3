.TH std::filesystem::recursive_directory_iterator::operator++,std::filesystem::recursive_directory_iterator::increment 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::filesystem::recursive_directory_iterator::operator++,std::filesystem::recursive_directory_iterator::increment \- std::filesystem::recursive_directory_iterator::operator++,std::filesystem::recursive_directory_iterator::increment

.SH Synopsis
   recursive_directory_iterator& operator++();                      \fI(since C++17)\fP
   recursive_directory_iterator& increment( std::error_code& ec );  \fI(since C++17)\fP

   Advances the iterator to the next entry. Invalidates all copies of the previous value of *this.

   If there are no more entries left in the currently iterated directory, the iteration is resumed over the parent directory. The process is repeated if the parent directory has no sibling entries that can to be iterated on. If the parent of the directory hierarchy that has been recursively iterated on is reached (there are no candidate entries at depth() == 0), *this is set to an end iterator.

   Otherwise, if *this refers to a directory, it is iterated into if the following conditions are met:

     * disable_recursion_pending() has not been called before this increment, i.e. recursion_pending() == true.
     * The directory is not a symlink or following symlinks is enabled, i.e., at least one of the following is true:

          * !is_symlink((*this)->symlink_status()).
          * (options() & directory_options::follow_directory_symlink) != directory_options::none)

.SH Parameters

   ec - error code to store the error status to

.SH Return value

   *this

.SH Exceptions

   The overload that does not take a std::error_code& parameter throws filesystem_error on underlying OS API errors, constructed with the OS error code as the error code argument. The overload taking a std::error_code& parameter sets it to the OS API error code if an OS API call fails, and executes ec.clear() if no errors occur. Any overload not marked noexcept may throw std::bad_alloc if memory allocation fails.

  Defect reports

   The following behavior-changing defect reports were applied retroactively to previously published C++ standards.

      DR    Applied to                    Behavior as published                    Correct behavior
   LWG 3013 C++17      error_code overload marked noexcept but can allocate memory noexcept removed
