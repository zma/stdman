.TH std::uninitialized_value_construct 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::uninitialized_value_construct \- std::uninitialized_value_construct

.SH Synopsis
   Defined in header <memory>
   template< class ForwardIt >                                                                      \fB(1)\fP \fI(since C++17)\fP
   void uninitialized_value_construct( ForwardIt first, ForwardIt last);
   template< class ExecutionPolicy, class ForwardIt >                                               \fB(2)\fP \fI(since C++17)\fP
   void uninitialized_value_construct( ExecutionPolicy&& policy, ForwardIt first, ForwardIt last );

   1) Constructs objects of type typename iterator_traits<ForwardIt>::value_type in the uninitialized storage designated by the range [first, last) by value-initialization, as if by

 for (; first != last; ++first)
   ::new (static_cast<void*>(std::addressof(*first)))
       typename std::iterator_traits<ForwardIt>::value_type();

   If an exception is thrown during the initialization, the objects already constructed are destroyed in an unspecified order.
   2) Same as \fB(1)\fP, but executed according to policy. This overload does not participate in overload resolution unless std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true

.SH Parameters

   first, last             -             the range of the elements to initialize
   policy                  -             the execution policy to use. See execution policy for details.
.SH Type requirements
   -
   ForwardIt must meet the requirements of LegacyForwardIterator.
   -
   No increment, assignment, comparison, or indirection through valid instances of ForwardIt may throw exceptions.

.SH Return value

   \fI(none)\fP

.SH Complexity

   Linear in the distance between first and last

.SH Exceptions

   The overload with a template parameter named ExecutionPolicy reports errors as follows:

     * If execution of a function invoked as part of the algorithm throws an exception and ExecutionPolicy is one of the standard policies, std::terminate is called. For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Possible implementation

   template<class ForwardIt>
   void uninitialized_value_construct(ForwardIt first, ForwardIt last)
   {
       using Value = typename std::iterator_traits<ForwardIt>::value_type;
       ForwardIt current = first;
       try {
           for (; current != last; ++current) {
               ::new (static_cast<void*>(std::addressof(*current))) Value();
           }
       } catch (...) {
           std::destroy(first, current);
           throw;
       }
   }

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   uninitialized_value_construct_n constructs objects by value-initialization in an uninitialized area of memory, defined by a start and a count
   \fI(C++17)\fP                         \fI(function template)\fP
   uninitialized_default_construct constructs objects by default-initialization in an uninitialized area of memory, defined by a range
   \fI(C++17)\fP                         \fI(function template)\fP
