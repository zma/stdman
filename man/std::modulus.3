.TH std::modulus 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::modulus \- std::modulus

.SH Synopsis

  Defined in header <functional>
  template< class T >             \fI(until C++14)\fP
  struct modulus;
  template< class T = void >      \fI(since C++14)\fP
  struct modulus;

  Function object for computing remainders of divisions. Implements operator% for type T.

.SH Specializations


  The standard library provides a specialization of std::modulus when T is not specified, which leaves the parameter types and return type to be deduced.

                function object implementing x % y deducing argument and return types                                                                     \fI(since C++14)\fP
  modulus<void> \fI(class template specialization)\fP




.SH Member types


  Type                                      Definition \fI(until C++20)\fP
  result_type(deprecated in C++17)          T
  first_argument_type(deprecated in C++17)  T
  second_argument_type(deprecated in C++17) T



.SH Member functions


             returns the remainder from the division of the first argument by the second argument
  operator() \fI(public member function)\fP


   std::modulus::operator()


  T operator()( const T& lhs, const T& rhs ) const;            \fI(until C++14)\fP
  constexpr T operator()( const T& lhs, const T& rhs ) const;  \fI(since C++14)\fP

  Returns the remainder of the division of lhs by rhs.

.SH Parameters


  lhs, rhs - values to divide one by another


.SH Return value

  The result of lhs % rhs.

.SH Exceptions

  \fI(none)\fP

.SH Possible implementation



    constexpr T operator()(const T &lhs, const T &rhs) const
    {
        return lhs % rhs;
    }



.SH See also



  fmod
  fmodf
  fmodl      remainder of the floating point division operation
             \fI(function)\fP

  \fI(C++11)\fP
  \fI(C++11)\fP

  remainder
  remainderf
  remainderl signed remainder of the division operation
             \fI(function)\fP
  \fI(C++11)\fP
  \fI(C++11)\fP
  \fI(C++11)\fP




