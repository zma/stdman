.TH std::equal 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::equal \- std::equal

.SH Synopsis

Defined in header <algorithm>
template< class InputIt1, class InputIt2 >
bool equal( InputIt1 first1, InputIt1 last1,                                                         \fI(until C++20)\fP
InputIt2 first2 );
template< class InputIt1, class InputIt2 >
constexpr bool equal( InputIt1 first1, InputIt1 last1,                                               \fI(since C++20)\fP
InputIt2 first2 );
template< class ExecutionPolicy, class ForwardIt1, class ForwardIt2 >
bool equal( ExecutionPolicy&& policy, ForwardIt1 first1, ForwardIt1 last1,                       \fB(2)\fP \fI(since C++17)\fP
ForwardIt2 first2 );
template< class InputIt1, class InputIt2, class BinaryPredicate >
bool equal( InputIt1 first1, InputIt1 last1,                                                                       \fI(until C++20)\fP
InputIt2 first2, BinaryPredicate p );
template< class InputIt1, class InputIt2, class BinaryPredicate >
constexpr bool equal( InputIt1 first1, InputIt1 last1,                                                             \fI(since C++20)\fP
InputIt2 first2, BinaryPredicate p );
template< class ExecutionPolicy, class ForwardIt1, class ForwardIt2, class BinaryPredicate >
bool equal( ExecutionPolicy&& policy, ForwardIt1 first1, ForwardIt1 last1,                           \fB(4)\fP           \fI(since C++17)\fP
ForwardIt2 first2, BinaryPredicate p );
template< class InputIt1, class InputIt2 >                                                                                       \fI(since C++14)\fP
bool equal( InputIt1 first1, InputIt1 last1,                                                 \fB(1)\fP                                 \fI(until C++20)\fP
InputIt2 first2, InputIt2 last2 );
template< class InputIt1, class InputIt2 >
constexpr bool equal( InputIt1 first1, InputIt1 last1,                                                                           \fI(since C++20)\fP
InputIt2 first2, InputIt2 last2 );                                                               \fB(3)\fP
template< class ExecutionPolicy, class ForwardIt1, class ForwardIt2 >
bool equal( ExecutionPolicy&& policy, ForwardIt1 first1, ForwardIt1 last1,                                         \fB(6)\fP           \fI(since C++17)\fP
ForwardIt2 first2, ForwardIt2 last2 );
template< class InputIt1, class InputIt2, class BinaryPredicate >
bool equal( InputIt1 first1, InputIt1 last1,                                                         \fB(5)\fP                                        \fI(since C++14)\fP
InputIt2 first2, InputIt2 last2,                                                                                                                \fI(until C++20)\fP
BinaryPredicate p );
template< class InputIt1, class InputIt2, class BinaryPredicate >
constexpr bool equal( InputIt1 first1, InputIt1 last1,                                                             \fB(7)\fP                          \fI(since C++20)\fP
InputIt2 first2, InputIt2 last2,
BinaryPredicate p );
template< class ExecutionPolicy, class ForwardIt1, class ForwardIt2, class BinaryPredicate >
bool equal( ExecutionPolicy&& policy, ForwardIt1 first1, ForwardIt1 last1,                                                       \fB(8)\fP            \fI(since C++17)\fP
ForwardIt2 first2, ForwardIt2 last2,
BinaryPredicate p );

1,3) Returns true if the range [first1, last1) is equal to the range [first2, first2 + (last1 - first1)), and false otherwise
5,7) Returns true if the range [first1, last1) is equal to the range [first2, last2), and false otherwise.
2,4,6,8) Same as (1,3,5,7), but executed according to policy. This overload only participates in overload resolution if std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true
Two ranges are considered equal if they have the same number of elements and, for every iterator i in the range [first1,last1), *i equals *(first2 + (i - first1)). The overloads (1,2,5,6) use operator== to determine if two elements are equal, whereas overloads (3,4,7,8) use the given binary predicate p.

.SH Parameters


first1, last1 - the first range of the elements to compare
first2, last2 - the second range of the elements to compare
policy        - the execution policy to use. See execution_policy for details.
                binary predicate which returns true if the elements should be treated as equal.
                The signature of the predicate function should be equivalent to the following:
                bool pred(const Type1 &a, const Type2 &b);
p             - While the signature does not need to have const &, the function must not modify the objects passed to it and must be able to accept all values of type (possibly const) Type1 and Type2 regardless of value_category (thus, Type1 & is not allowed
                , nor is Type1 unless for Type1 a move is equivalent to a copy
                \fI(since C++11)\fP).
                The types Type1 and Type2 must be such that objects of types InputIt1 and InputIt2 can be dereferenced and then implicitly converted to Type1 and Type2 respectively. 
.SH Type requirements
-
InputIt1, InputIt2 must meet the requirements of LegacyInputIterator.
-
ForwardIt1, ForwardIt2 must meet the requirements of LegacyForwardIterator.


.SH Return value

5-8) If the length of the range [first1, last1) does not equal the length of the range [first2, last2), returns false
If the elements in the two ranges are equal, returns true.
Otherwise returns false.

.SH Notes

std::equal should not be used to compare the ranges formed by the iterators from std::unordered_set, std::unordered_multiset, std::unordered_map, or std::unordered_multimap because the order in which the elements are stored in those containers may be different even if the two containers store the same elements.
When comparing entire containers for equality, operator== for the corresponding container are usually preferred.

.SH Complexity

1,3) At most last1 - first1 applications of the predicate
5,7) At most min(last1 - first1, last2 - first2) applications of the predicate.
However, if InputIt1 and InputIt2 meet the requirements of LegacyRandomAccessIterator and last1 - first1 != last2 - first2 then no applications of the predicate are made (size mismatch is detected without looking at any elements).
2,4,6,8) same, but the complexity is specified as O(x), rather than "at most x"

.SH Exceptions

The overloads with a template parameter named ExecutionPolicy report errors as follows:

* If execution of a function invoked as part of the algorithm throws an exception and ExecutionPolicy is one of the standard_policies, std::terminate is called. For any other ExecutionPolicy, the behavior is implementation-defined.
* If the algorithm fails to allocate memory, std::bad_alloc is thrown.


.SH Possible implementation


.SH First version

  template<class InputIt1, class InputIt2>
  bool equal(InputIt1 first1, InputIt1 last1,
             InputIt2 first2)
  {
      for (; first1 != last1; ++first1, ++first2) {
          if (!(*first1 == *first2)) {
              return false;
          }
      }
      return true;
  }

.SH Second version

  template<class InputIt1, class InputIt2, class BinaryPredicate>
  bool equal(InputIt1 first1, InputIt1 last1,
             InputIt2 first2, BinaryPredicate p)
  {
      for (; first1 != last1; ++first1, ++first2) {
          if (!p(*first1, *first2)) {
              return false;
          }
      }
      return true;
  }



.SH Example

The following code uses equal() to test if a string is a palindrome

// Run this code

  #include <algorithm>
  #include <iostream>
  #include <string>

  bool is_palindrome(const std::string& s)
  {
      return std::equal(s.begin(), s.begin() + s.size()/2, s.rbegin());
  }

  void test(const std::string& s)
  {
      std::cout << "\\"" << s << "\\" "
          << (is_palindrome(s) ? "is" : "is not")
          << " a palindrome\\n";
  }

  int main()
  {
      test("radar");
      test("hello");
  }

.SH Output:

  "radar" is a palindrome
  "hello" is not a palindrome


.SH See Also



find
find_if
find_if_not             finds the first element satisfying specific criteria
                        \fI(function template)\fP


\fI(C++11)\fP
                        returns true if one range is lexicographically less than another
lexicographical_compare \fI(function template)\fP
                        finds the first position where two ranges differ
mismatch                \fI(function template)\fP
                        searches for a range of elements
search                  \fI(function template)\fP




