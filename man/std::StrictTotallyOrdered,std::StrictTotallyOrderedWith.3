.TH std::StrictTotallyOrdered,std::StrictTotallyOrderedWith 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::StrictTotallyOrdered,std::StrictTotallyOrderedWith \- std::StrictTotallyOrdered,std::StrictTotallyOrderedWith

.SH Synopsis

Defined in header <concepts>
template <class T>
concept StrictTotallyOrdered =
std::EqualityComparable<T> &&
requires(const std::remove_reference_t<T>& a,
const std::remove_reference_t<T>& b) {           \fB(1)\fP \fI(since C++20)\fP
a < b; requires std::Boolean<decltype(a < b)>;
a > b; requires std::Boolean<decltype(a > b)>;
a <= b; requires std::Boolean<decltype(a <= b)>;
a >= b; requires std::Boolean<decltype(a >= b)>;
};
template <class T, class U>
concept StrictTotallyOrderedWith =
std::StrictTotallyOrdered<T> &&
std::StrictTotallyOrdered<U> &&
std::CommonReference<
const std::remove_reference_t<T>&,
const std::remove_reference_t<U>&> &&
std::StrictTotallyOrdered<
std::common_reference_t<
const std::remove_reference_t<T>&,
const std::remove_reference_t<U>&>> &&
std::EqualityComparableWith<T, U> &&             \fB(2)\fP \fI(since C++20)\fP
requires(const std::remove_reference_t<T>& t,
const std::remove_reference_t<U>& u) {
t < u; requires std::Boolean<decltype(t < u)>;
t > u; requires std::Boolean<decltype(t > u)>;
t <= u; requires std::Boolean<decltype(t <= u)>;
t >= u; requires std::Boolean<decltype(t >= u)>;
u < t; requires std::Boolean<decltype(u < t)>;
u > t; requires std::Boolean<decltype(u > t)>;
u <= t; requires std::Boolean<decltype(u <= t)>;
u >= t; requires std::Boolean<decltype(u >= t)>;
};

1) The concept StrictTotallyOrdered<T> specifies that the comparison operators ==,!=,<,>,<=,>= on T yield results consistent with a strict_total_order on T.
StrictTotallyOrdered<T> is satisfied only if, given lvalues a, b and c of type const std::remove_reference_t<T>:

* Exactly one of bool(a < b), bool(a > b) and bool(a == b) is true;
* If bool(a < b) and bool(b < c) are both true, then bool(a < c) is true;
* bool(a > b) == bool(b < a)
* bool(a >= b) == !bool(a < b)
* bool(a <= b) == !bool(b < a)

2) The concept StrictTotallyOrderedWith<T, U> specifies that the comparison operators ==,!=,<,>,<=,>= on (possibly mixed) T and U operands yield results consistent with a strict total order. Comparing mixed operands yields results equivalent to comparing the operands converted to their common type.
Formally, StrictTotallyOrderedWith<T, U> is satisfied only if, given any lvalue t of type const std::remove_reference_t<T> and any lvalue u of type const std::remove_reference_t<U>, and let C be std::common_reference_t<const std::remove_reference_t<T>&, const std::remove_reference_t<U>&> :

* bool(t < u) == bool(C(t) < C(u))
* bool(t > u) == bool(C(t) > C(u))
* bool(t <= u) == bool(C(t) <= C(u))
* bool(t >= u) == bool(C(t) >= C(u))
* bool(u < t) == bool(C(u) < C(t))
* bool(u > t) == bool(C(u) > C(t))
* bool(u <= t) == bool(C(u) <= C(t))
* bool(u >= t) == bool(C(u) >= C(t))


Equality preservation

An expression is equality preserving if it results in equal outputs given equal inputs.

* The inputs to an expression consist of its operands.
* The outputs of an expression consist of its result and all operands modified by the expression (if any).

Every expression required to be equality preserving is further required to be stable: two evaluations of such an expression with the same input objects must have equal outputs absent any explicit intervening modification of those input objects.
Unless noted otherwise, every expression used in a requires-expression is required to be equality preserving and stable, and the evaluation of the expression may only modify its non-constant operands. Operands that are constant must not be modified.

Implicit expression variations

A requires-expression that uses an expression that is non-modifying for some constant lvalue operand also implicitly requires additional variations of that expression that accept a non-constant lvalue or (possibly constant) rvalue for the given operand unless such an expression variation is explicitly required with differing semantics. These implicit expression variations must meet the same semantic requirements of the declared expression. The extent to which an implementation validates the syntax of the variations is unspecified.



