.TH std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::contains 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::contains \- std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::contains

.SH Synopsis

  bool contains( const Key& key ) const;                                   \fB(1)\fP \fI(since C++20)\fP
  bool contains( const Key& key, std::size_t hash ) const;                 \fB(1)\fP \fI(since C++20)\fP
  template< class K > bool contains( const K& x ) const;                   \fB(2)\fP \fI(since C++20)\fP
  template< class K > bool contains( const K& x, std::size_t hash ) const; \fB(2)\fP \fI(since C++20)\fP

  1) Checks if there is an element with key equivalent to key in the container.
  2) Checks if there is an element with key that compares equivalent to the value x. This overload only participates in overload resolution if the qualified-id Hash::transparent_key_equal is valid and denotes a type. This assumes that such Hash is callable with both K and Key type, and that its key_equal is transparent, which, together, allows calling this function without constructing an instance of Key.
  If present, the hash parameter may be used to pass a pre-computed hash value as an optimization. The behavior is undefined if invoking hash_function() on the key passed do not produce the same value as hash.

.SH Parameters


  key  - key value of the element to search for
  x    - a value of any type that can be transparently compared with a key
  hash - the hash value of the key


.SH Return value

  true if there is such an element, otherwise false.

.SH Complexity

  Constant on average, worst case linear in the size of the container.

.SH Example

  
// Run this code

    #include <iostream>
    #include <unordered_set>

    int main()
    {
        std::unordered_multiset<int> example = {1, 2, 3, 4};

        if(example.contains(2)) {
            std::cout << "Found\\n";
        } else {
            std::cout << "Not found\\n";
        }
    }

.SH Output:

    Found


.SH See also


              finds element with specific key
  find        \fI(public member function)\fP
              returns the number of elements matching specific key
  count       \fI(public member function)\fP
              returns range of elements matching a specific key
  equal_range \fI(public member function)\fP




