.TH std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::extract 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::extract \- std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::extract

.SH Synopsis

node_type extract( const_iterator position ); \fB(1)\fP \fI(since C++17)\fP
node_type extract( const key_type& x );       \fB(2)\fP \fI(since C++17)\fP

1) Unlinks the node that contains the element pointed to by position and returns a node_handle that owns it
2) If the container has an element with key equivalent to x, unlinks the node that contains the first such element from the container and returns a node_handle that owns it. Otherwise, returns an empty node handle.
In either case, no elements are copied or moved, only the internal pointers of the container nodes are repointed

Extracting a node invalidates only the iterators to the extracted element, and preserves the relative order of the elements that are not erased. Pointers and references to the extracted element remain valid, but cannot be used while element is owned by a node handle: they become usable if the element is inserted into a container.

.SH Parameters


position - a valid iterator into this container
x        - a key to identify the node to be extracted


.SH Return value

A node_handle that owns the extracted element, or empty node handle in case the element is not found in overload \fB(2)\fP

.SH Complexity

1,2) Average case O(1), worst case O(a.size()).

.SH Notes

extract is the only way to take a move-only object out of a set

  set<move_only_type> s;
  s.emplace(...);
  move_only_type mot = move(s.extract(s.begin()).value());


.SH Example


 This section is incomplete
 Reason: no example


.SH See also



merge   splices nodes from another container
        \fI(public member function)\fP
\fI(C++17)\fP
        inserts elements
        or nodes
insert  \fI(since C++17)\fP
        \fI(public member function)\fP
        erases elements
erase   \fI(public member function)\fP




