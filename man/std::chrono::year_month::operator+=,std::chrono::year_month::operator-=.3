.TH std::chrono::year_month::operator+=,std::chrono::year_month::operator-= 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::chrono::year_month::operator+=,std::chrono::year_month::operator-= \- std::chrono::year_month::operator+=,std::chrono::year_month::operator-=

.SH Synopsis

  constexpr std::chrono::year_month& operator+=(const std::chrono::years& dy) const noexcept;  \fB(1)\fP \fI(since C++20)\fP
  constexpr std::chrono::year_month& operator+=(const std::chrono::months& dm) const noexcept; \fB(2)\fP \fI(since C++20)\fP
  constexpr std::chrono::year_month& operator-=(const std::chrono::years& dy) const noexcept;  \fB(3)\fP \fI(since C++20)\fP
  constexpr std::chrono::year_month& operator-=(const std::chrono::months& dm) const noexcept; \fB(4)\fP \fI(since C++20)\fP

  Modifies the time point *this represents by the duration dy or dm.
  1) Equivalent to *this = *this + dy;
  2) Equivalent to *this = *this + dm;
  3) Equivalent to *this = *this - dy;
  4) Equivalent to *this = *this - dm;

.SH Notes

  Durations that are convertible to std::chrono::months, but not std::chrono::years, can be directly added to or subtracted from a year_month. Durations convertible to std::chrono::years cannot because such durations are also convertible to std::chrono::months, resulting in an ambiguity:

    using namespace std::chrono;

    using decades = duration<int, std::ratio_multiply<std::ratio<10>, years::period>>;
    using kilomonths = duration<int, std::ratio_multiply<std::kilo, months::period>>;

    auto ym = 2001y/April;
    ym += decades{1}; // error, ambiguous
    ym += kilomonths{1}; // OK


.SH See also


            performs arithmetic on year_month
  operator+ \fI(function)\fP
  operator-




