.TH std::ctype_byname 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ctype_byname \- std::ctype_byname

.SH Synopsis

  Defined in header <locale>
  template< class CharT >
  class ctype_byname : public std::ctype<CharT>;

  std::ctype_byname is a std::ctype facet which encapsulates character classification rules of the locale specified at its construction.
  Two specializations are provided by the standard library

  Defined in header <locale>
  std::ctype_byname<char>    provides narrow character classification. This specialization uses table lookup for character classification
  std::ctype_byname<wchar_t> provides wide character classification


.SH Member types


  Member type Definition
  mask        ctype<CharT>::mask


.SH Member functions


                constructs a new ctype_byname facet
  constructor   \fI(public member function)\fP
                destroys a ctype_byname facet
  destructor    \fI(protected member function)\fP


   std::ctype_byname::ctype_byname


  explicit ctype_byname( const char* name, std::size_t refs = 0 );
  explicit ctype_byname( const std::string& name, std::size_t refs = 0 );  \fI(since C++11)\fP

  Constructs a new std::ctype_byname facet for a locale with name.
  refs is used for resource management: if refs == 0, the implementation destroys the facet, when the last std::locale object holding it is destroyed. Otherwise, the object is not destroyed.

.SH Parameters


  name - the name of the locale
  refs - the number of references that link to the facet


   std::ctype_byname::~ctype_byname


  protected:
  ~ctype_byname();

  Destroys the facet.

  Inherited from std::ctype<CharT>


.SH Member types


  Member type Definition
  char_type   CharT


.SH Member objects


  Member name                          Type

  static std::locale::id id            id of the locale
                                       \fI(public static member constant)\fP
  \fB[static]\fP

   if CharT is char, the following member of std::ctype<char> is inherited


  static const std::size_t  table_size size of the classification table, at least 256
                                       \fI(public static member constant)\fP
  \fB[static]\fP


.SH Member functions


                invokes do_is
  is            \fI(public member function of std::ctype<CharT>)\fP
                invokes do_scan_is
  scan_is       \fI(public member function of std::ctype<CharT>)\fP
                invokes do_scan_not
  scan_not      \fI(public member function of std::ctype<CharT>)\fP
                invokes do_toupper
  toupper       \fI(public member function of std::ctype<CharT>)\fP
                invokes do_tolower
  tolower       \fI(public member function of std::ctype<CharT>)\fP
                invokes do_widen
  widen         \fI(public member function of std::ctype<CharT>)\fP
                invokes do_narrow
  narrow        \fI(public member function of std::ctype<CharT>)\fP

   if CharT is char, the following members of std::ctype<char> are inherited

                obtains the character classification table
  table         \fI(public member function of std::ctype<char>)\fP

  classic_table obtains the "C" locale character classification table
                \fI(public static member function of std::ctype<char>)\fP
  \fB[static]\fP


.SH Protected member functions



  do_toupper  converts a character or characters to uppercase
              \fI(virtual protected member function of std::ctype<CharT>)\fP
  \fB[virtual]\fP

  do_tolower  converts a character or characters to lowercase
              \fI(virtual protected member function of std::ctype<CharT>)\fP
  \fB[virtual]\fP

  do_widen    converts a character or characters from char to charT
              \fI(virtual protected member function of std::ctype<CharT>)\fP
  \fB[virtual]\fP

  do_narrow   converts a character or characters from charT to char
              \fI(virtual protected member function of std::ctype<CharT>)\fP
  \fB[virtual]\fP

   if CharT is char, the following members of std::ctype are NOT inherited


  do_is       classifies a character or a character sequence
              \fI(virtual protected member function of std::ctype<CharT>)\fP
  \fB[virtual]\fP

  do_scan_is  locates the first character in a sequence that conforms to given classification
              \fI(virtual protected member function of std::ctype<CharT>)\fP
  \fB[virtual]\fP

  do_scan_not locates the first character in a sequence that fails given classification
              \fI(virtual protected member function of std::ctype<CharT>)\fP
  \fB[virtual]\fP


  Inherited from std::ctype_base


.SH Member types


  Type Definition
  mask unspecified bitmask type (enumeration, integer type, or bitset)


.SH Member constants



  space            the value of mask identifying whitespace character classification
                   \fI(public static member constant)\fP
  \fB[static]\fP

  print            the value of mask identifying printable character classification
                   \fI(public static member constant)\fP
  \fB[static]\fP

  cntrl            the value of mask identifying control character classification
                   \fI(public static member constant)\fP
  \fB[static]\fP

  upper            the value of mask identifying uppercase character classification
                   \fI(public static member constant)\fP
  \fB[static]\fP

  lower            the value of mask identifying lowercase character classification
                   \fI(public static member constant)\fP
  \fB[static]\fP

  alpha            the value of mask identifying alphabetic character classification
                   \fI(public static member constant)\fP
  \fB[static]\fP

  digit            the value of mask identifying digit character classification
                   \fI(public static member constant)\fP
  \fB[static]\fP

  punct            the value of mask identifying punctuation character classification
                   \fI(public static member constant)\fP
  \fB[static]\fP

  xdigit           the value of mask identifying hexadecimal digit character classification
                   \fI(public static member constant)\fP
  \fB[static]\fP

  blank            the value of mask identifying blank character classification
                   \fI(public static member constant)\fP
  \fB[static]\fP \fI(C++11)\fP

  alnum            alpha | digit
                   \fI(public static member constant)\fP
  \fB[static]\fP

  graph            alnum | punct
                   \fI(public static member constant)\fP
  \fB[static]\fP


.SH Notes

  The explicit specialization std::ctype_byname<char> was listed as a separate entry in the header file <locale> until C++11. it was removed in C++11 as defect_#1298, but it remains a required specialization, just like std::ctype_byname<wchar_t>.

.SH Example

  
// Run this code

    #include <iostream>
    #include <locale>

    int main()
    {
        wchar_t c = L'\\u00de'; // capital letter thorn

        std::locale loc("C");

        std::cout << "isupper('횧', C locale) returned "
                   << std::boolalpha << std::isupper(c, loc) << '\\n';

        loc = std::locale(loc, new std::ctype_byname<wchar_t>("en_US.utf8"));

        std::cout << "isupper('횧', C locale with Unicode ctype) returned "
                  << std::boolalpha << std::isupper(c, loc) << '\\n';
    }

.SH Output:

    isupper('횧', C locale) returned false
    isupper('횧', C locale with Unicode ctype) returned true


.SH See also


              defines character classification tables
  ctype       \fI(class template)\fP
              specialization of std::ctype for type char
  ctype<char> \fI(class template specialization)\fP




