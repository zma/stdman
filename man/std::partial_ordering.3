.TH std::partial_ordering 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::partial_ordering \- std::partial_ordering

.SH Synopsis
   Defined in header <compare>
   class partial_ordering;      \fI(since C++20)\fP

   The class type std::partial_ordering is the result type of a three-way comparison that

     * admits all six relational operators (==, !=, <, <=, >, >=)

     * does not imply substitutability: if a is equivalent to b, f(a) may not be equivalent to f(b), where f denotes a function that reads only comparison-salient state that is accessible via the argument's public const members. In other words, equivalent values may be distinguishable.
     * admits incomparable values: a < b, a == b, and a > b may all be false

.SH Constants

   The type std::partial_ordering has four valid values, implemented as const static data members of its type:

   Member constant              Definition
   less(inline constexpr)       a valid value of the type std::partial_ordering indicating less-than (ordered before) relationship
   \fB[static]\fP                     \fI(public static member constant)\fP
   equivalent(inline constexpr) a valid value of the type std::partial_ordering indicating equivalence (neither ordered before nor ordered after)
   \fB[static]\fP                     \fI(public static member constant)\fP
   greater(inline constexpr)    a valid value of the type std::partial_ordering indicating greater-than (ordered after) relationship
   \fB[static]\fP                     \fI(public static member constant)\fP
   unordered(inline constexpr)  a valid value of the type std::partial_ordering indicating relationship with an incomparable value
   \fB[static]\fP                     \fI(public static member constant)\fP

.SH Conversions

   std::partial_ordering is implicitly-convertible to std::weak_equality, while both std::strong_ordering and std::weak_ordering are implicitly-convertible to partial_ordering.

   operator weak_equality implicit conversion to std::weak_equality
                          \fI(public member function)\fP

std::partial_ordering::operator weak_equality

   constexpr operator weak_equality() const noexcept;

.SH Return value

   std::weak_equality::equivalent if v is equivalent, std::weak_equality::nonequivalent if v is less, greater, or unordered.

.SH Comparisons

   Comparison operators are defined between values of this type and literal 0. This supports the expressions a <=> b == 0 or a <=> b < 0 that can be used to convert the result of a three-way comparison operator to a boolean relationship; see std::is_eq, std::is_lt, etc.

   The behavior of a program that attempts to compare a partial_ordering with anything other than the integer literal 0 is undefined.

   operator==
   operator!=
   operator<   compares with zero
   operator>   \fI(function)\fP
   operator<=
   operator>=
   operator<=>

operator==

   friend constexpr bool operator==(partial_ordering v, /*unspecified*/ u) noexcept;
   friend constexpr bool operator==(/*unspecified*/ u, partial_ordering v) noexcept;

.SH Parameters

   v - a std::partial_ordering value to check
   u - an unused parameter of any type that accepts literal zero argument

.SH Return value

   true if v is equivalent, false if v is less, greater, or unordered

operator!=

   friend constexpr bool operator!=(partial_ordering v, /*unspecified*/ u) noexcept;
   friend constexpr bool operator!=(/*unspecified*/ u, partial_ordering v) noexcept;

.SH Parameters

   v - a std::partial_ordering value to check
   u - an unused parameter of any type that accepts literal zero argument

.SH Return value

   true if v is unordered, less, or greater, and false if v is equivalent

operator<

   friend constexpr bool operator<(partial_ordering v, /*unspecified*/ u) noexcept; \fB(1)\fP
   friend constexpr bool operator<(/*unspecified*/ u, partial_ordering v) noexcept; \fB(2)\fP

.SH Parameters

   v - a std::partial_ordering value to check
   u - an unused parameter of any type that accepts literal zero argument

.SH Return value

   1) true if v is less, and false if v is greater, equivalent, or unordered
   2) true if v is greater, and false if v is less, equivalent, or unordered

operator<=

   friend constexpr bool operator<=(partial_ordering v, /*unspecified*/ u) noexcept; \fB(1)\fP
   friend constexpr bool operator<=(/*unspecified*/ u, partial_ordering v) noexcept; \fB(2)\fP

.SH Parameters

   v - a std::partial_ordering value to check
   u - an unused parameter of any type that accepts literal zero argument

.SH Return value

   1) true if v is less or equivalent, and false if v is greater or unordered
   2) true if v is greater or equivalent, and false if v is less or unordered

operator>

   friend constexpr bool operator>(partial_ordering v, /*unspecified*/ u) noexcept; \fB(1)\fP
   friend constexpr bool operator>(/*unspecified*/ u, partial_ordering v) noexcept; \fB(2)\fP

.SH Parameters

   v - a std::partial_ordering value to check
   u - an unused parameter of any type that accepts literal zero argument

.SH Return value

   1) true if v is greater, and false if v is less, equivalent, or unordered
   2) true if v is less, and false if v is greater, equivalent, or unordered

operator>=

   friend constexpr bool operator>=(partial_ordering v, /*unspecified*/ u) noexcept; \fB(1)\fP
   friend constexpr bool operator>=(/*unspecified*/ u, partial_ordering v) noexcept; \fB(2)\fP

.SH Parameters

   v - a std::partial_ordering value to check
   u - an unused parameter of any type that accepts literal zero argument

.SH Return value

   1) true if v is greater or equivalent, and false if v is less or unordered
   2) true if v is less or equivalent, and false if v is greater or unordered

operator<=>

   friend constexpr partial_ordering operator<=>(partial_ordering v, /*unspecified*/ u) noexcept; \fB(1)\fP
   friend constexpr partial_ordering operator<=>(/*unspecified*/ u, partial_ordering v) noexcept; \fB(2)\fP

.SH Parameters

   v - a std::partial_ordering value to check
   u - an unused parameter of any type that accepts literal zero argument

.SH Return value

   1) v.
   2) greater if v is less, less if v is greater, otherwise v.

.SH Notes

   The built-in operator <=> between floating-point values uses this ordering: the positive zero and the negative zero compare equivalent, but can be distinguished, and NaN values compare unordered with any other value.

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   strong_ordering the result type of 3-way comparison that supports all 6 operators and is substitutable
   (C++20)         \fI(class)\fP
   weak_ordering   the result type of 3-way comparison that supports all 6 operators and is not substitutable
   (C++20)         \fI(class)\fP
   strong_equality the result type of 3-way comparison that supports only equality/inequality and is substitutable
   (C++20)         \fI(class)\fP
   weak_equality   the result type of 3-way comparison that supports only equality/inequality and is not substitutable
   (C++20)         \fI(class)\fP
