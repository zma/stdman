.TH std::valarray<T>::cshift 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::valarray<T>::cshift \- std::valarray<T>::cshift

.SH Synopsis

valarray<T> cshift( int count ) const;

Returns a new valarray of the same size with elements whose positions are shifted circularly by count elements. The new position of each element is (iâˆ’count) mod s where i is the previous position and s is size().

.SH Parameters


count - number of positions to shift the elements by


.SH Return value

The resulting valarray with circularly shifted elements.

.SH Notes

The function can be implemented with the return type different from std::valarray. In this case, the replacement type has the following properties:


      * All const member functions of std::valarray are provided.
      * std::valarray, std::slice_array, std::gslice_array, std::mask_array and std::indirect_array can be constructed from the replacement type.
      * All functions accepting an argument of type const std::valarray&
        except begin() and end()
        \fI(since C++11)\fP should also accept the replacement type.
      * All functions accepting two arguments of type const std::valarray& should accept every combination of const std::valarray& and the replacement type.
      * The return type does not add more than two levels of template nesting over the most deeply-nested argument type.



.SH Example


// Run this code

  #include <iostream>
  #include <valarray>


  int main() {
      std::valarray<int> v{1, 2, 3, 4, 5, 6, 7, 8};

      for (auto const& val : v) {
          std::cout << val << " ";
      }
      std::cout << "\\n";

      std::valarray<int> v2 = v.cshift(2);

      for (auto const& val : v2) {
          std::cout << val << " ";
      }
      std::cout << "\\n";
  }

.SH Output:

  1 2 3 4 5 6 7 8
  3 4 5 6 7 8 1 2


.SH See also


      zero-filling shift the elements of the valarray
shift \fI(public member function)\fP




