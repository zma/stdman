.TH std::filesystem::directory_entry::refresh 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::filesystem::directory_entry::refresh \- std::filesystem::directory_entry::refresh

.SH Synopsis

  void refresh();                                \fI(since C++17)\fP
  void refresh( std::error_code& ec ) noexcept;

  Examines the filesystem object referred to by this directory entry and stores its attributes for retrieval with status(), exists(), is_regular_file(), and other status accessors.
  If an error occurs, the value of any cached attributes is unspecified

.SH Parameters


  ec - out-parameter for error reporting in the non-throwing overload


.SH Return value

  \fI(none)\fP

.SH Exceptions

  The overload that does not take a std::error_code& parameter throws filesystem_error on underlying OS API errors, constructed with p as the first path argument and the OS error code as the error code argument. The overload taking a std::error_code& parameter sets it to the OS API error code if an OS API call fails, and executes ec.clear() if no errors occur. Any overload not marked noexcept may throw std::bad_alloc if memory allocation fails.

.SH Notes

  Many low-level OS APIs for directory traversal retrieve file attributes along with the next directory entry. The constructors and the non-const member functions of directory_iterator store these attributes, if any, in the pointed-to directory_entry without calling directory_entry::refresh, which makes it possible to examine the attributes of the directory entries as they are being iterated over, without making additional system calls.

.SH Example


   This section is incomplete
   Reason: no example


.SH See also


                    status of the file designated by this directory entry
  status            symlink_status of the file designated by this directory entry
  symlink_status    \fI(public member function)\fP
                    checks whether directory entry refers to existing file system object
  exists            \fI(public member function)\fP
                    checks whether the directory entry refers to block device
  is_block_file     \fI(public member function)\fP
                    checks whether the directory entry refers to a character device
  is_character_file \fI(public member function)\fP
                    checks whether the directory entry refers to a directory
  is_directory      \fI(public member function)\fP
                    checks whether the directory entry refers to a named pipe
  is_fifo           \fI(public member function)\fP
                    checks whether the directory entry refers to an other file
  is_other          \fI(public member function)\fP
                    checks whether the directory entry refers to a regular file
  is_regular_file   \fI(public member function)\fP
                    checks whether the directory entry refers to a named IPC socket
  is_socket         \fI(public member function)\fP
                    checks whether the directory entry refers to a symbolic link
  is_symlink        \fI(public member function)\fP
                    returns the size of the file to which the directory entry refers
  file_size         \fI(public member function)\fP
                    returns the number of hard links referring to the file to which the directory entry refers
  hard_link_count   \fI(public member function)\fP
                    gets or sets the time of the last data modification of the file to which the directory entry refers
  last_write_time   \fI(public member function)\fP




