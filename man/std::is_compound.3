.TH std::is_compound 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_compound \- std::is_compound

.SH Synopsis

Defined in header <type_traits>
template< class T >              \fI(since C++11)\fP
struct is_compound;

If T is a compound type (that is, array, function, object pointer, function pointer, member object pointer, member function pointer, reference, class, union, or enumeration, including any cv-qualified variants), provides the member constant value equal true. For any other type, value is false.

.SH Template parameters


T - a type to check


Helper variable template


template< class T >                                           \fI(since C++17)\fP
inline constexpr bool is_compound_v = is_compound<T>::value;


Inherited from std::integral_constant


.SH Member constants



value    true if T is a compound type , false otherwise
         \fI(public static member constant)\fP
\fB[static]\fP


.SH Member functions


              converts the object to bool, returns value
operator bool \fI(public member function)\fP

operator()    returns value
              \fI(public member function)\fP
\fI(C++14)\fP


.SH Member types


Type       Definition
value_type bool
type       std::integral_constant<bool, value>


.SH Notes

Compound types are the types that are constructed from fundamental types. Any C++ type is either fundamental or compound.

.SH Possible implementation



  template< class T >
  struct is_compound : std::integral_constant<bool, !std::is_fundamental<T>::value> {};



.SH Example


// Run this code

  #include <iostream>
  #include <type_traits>

  int main() {
      class cls {};
      std::cout << (std::is_compound<cls>::value
                       ? "T is compound"
                       : "T is not a compound") << '\\n';
      std::cout << (std::is_compound<int>::value
                       ? "T is compound"
                       : "T is not a compound") << '\\n';
  }

.SH Output:

  T is compound
  T is not a compound


.SH See also



is_fundamental checks if a type is a fundamental type
               \fI(class template)\fP
\fI(C++11)\fP

is_scalar      checks if a type is a scalar type
               \fI(class template)\fP
\fI(C++11)\fP

is_object      checks if a type is an object type
               \fI(class template)\fP
\fI(C++11)\fP

is_array       checks if a type is an array type
               \fI(class template)\fP
\fI(C++11)\fP




