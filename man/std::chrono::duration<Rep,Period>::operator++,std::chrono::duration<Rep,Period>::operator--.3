.TH std::chrono::duration<Rep,Period>::operator++,std::chrono::duration<Rep,Period>::operator-- 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::chrono::duration<Rep,Period>::operator++,std::chrono::duration<Rep,Period>::operator-- \- std::chrono::duration<Rep,Period>::operator++,std::chrono::duration<Rep,Period>::operator--

.SH Synopsis

duration& operator++();                     \fI(until C++17)\fP
constexpr duration& operator++();           \fI(since C++17)\fP
duration operator++(int);                                 \fI(until C++17)\fP
constexpr duration operator++(int); \fB(1)\fP                   \fI(since C++17)\fP
duration& operator--();                 \fB(2)\fP                             \fI(until C++17)\fP
constexpr duration& operator--();           \fB(3)\fP                         \fI(since C++17)\fP
duration operator--(int);                                 \fB(4)\fP                         \fI(until C++17)\fP
constexpr duration operator--(int);                                                   \fI(since C++17)\fP

Increments or decrements the number of ticks for this duration.
If rep_ is a member variable holding the number of ticks in a duration object,
1) Equivalent to ++rep_; return *this;
2) Equivalent to return duration(rep_++)
3) Equivalent to --rep_; return *this;
4) Equivalent to return duration(rep_--);

.SH Parameters

\fI(none)\fP

.SH Return value

1,3) a reference to this duration after modification
2,4) a copy of the duration made before modification

.SH Example


// Run this code

  #include <chrono>
  #include <iostream>

  int main()
  {
      std::chrono::hours h(1);
      std::chrono::minutes m = ++h;
      m--;
      std::cout << m.count() << " minutes\\n";
  }

.SH Output:

  119 minutes


.SH See also



operator+=
operator-= implements compound assignment between two durations
operator*= \fI(public member function)\fP
operator/=
operator%=

operator+
operator-  implements arithmetic operations with durations as arguments
operator*  \fI(function template)\fP
operator/
operator%




