.TH std::min_element 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::min_element \- std::min_element

.SH Synopsis

Defined in header <algorithm>
template< class ForwardIt >                                                                               \fI(until C++17)\fP
ForwardIt min_element( ForwardIt first, ForwardIt last );
template< class ForwardIt >                                                                               \fI(since C++17)\fP
constexpr ForwardIt min_element( ForwardIt first, ForwardIt last );
template< class ExecutionPolicy, class ForwardIt >                                                    \fB(2)\fP \fI(since C++17)\fP
ForwardIt min_element( ExecutionPolicy&& policy, ForwardIt first, ForwardIt last );               \fB(1)\fP
template< class ForwardIt, class Compare >                                                                              \fI(until C++17)\fP
ForwardIt min_element( ForwardIt first, ForwardIt last, Compare comp );
template< class ForwardIt, class Compare >                                                            \fB(3)\fP               \fI(since C++17)\fP
constexpr ForwardIt min_element( ForwardIt first, ForwardIt last, Compare comp );
template< class ExecutionPolicy, class ForwardIt, class Compare >                                         \fB(4)\fP           \fI(since C++17)\fP
ForwardIt min_element( ExecutionPolicy&& policy, ForwardIt first, ForwardIt last, Compare comp );

Finds the smallest element in the range [first, last).
1) Elements are compared using operator<.
3) Elements are compared using the given binary comparison function comp.
2,4) Same as (1,3), but executed according to policy. These overloads do not participate in overload resolution unless std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true

.SH Parameters


first, last - forward iterators defining the range to examine
policy      - the execution policy to use. See execution_policy for details.
              comparison function object (i.e. an object that satisfies the requirements of Compare) which returns true if a is less than b.
              The signature of the comparison function should be equivalent to the following:
              bool cmp(const Type1 &a, const Type2 &b);
comp        - While the signature does not need to have const &, the function must not modify the objects passed to it and must be able to accept all values of type (possibly const) Type1 and Type2 regardless of value_category (thus, Type1 & is not allowed
              , nor is Type1 unless for Type1 a move is equivalent to a copy
              \fI(since C++11)\fP).
              The types Type1 and Type2 must be such that an object of type ForwardIt can be dereferenced and then implicitly converted to both of them. 
.SH Type requirements
-
ForwardIt must meet the requirements of LegacyForwardIterator.


.SH Return value

Iterator to the smallest element in the range [first, last). If several elements in the range are equivalent to the smallest element, returns the iterator to the first such element. Returns last if the range is empty.

.SH Complexity

Exactly max(N-1,0) comparisons, where N = std::distance(first, last).

.SH Exceptions

The overloads with a template parameter named ExecutionPolicy report errors as follows:

* If execution of a function invoked as part of the algorithm throws an exception and ExecutionPolicy is one of the standard_policies, std::terminate is called. For any other ExecutionPolicy, the behavior is implementation-defined.
* If the algorithm fails to allocate memory, std::bad_alloc is thrown.


.SH Possible implementation


.SH First version

  template<class ForwardIt>
  ForwardIt min_element(ForwardIt first, ForwardIt last)
  {
      if (first == last) return last;

      ForwardIt smallest = first;
      ++first;
      for (; first != last; ++first) {
          if (*first < *smallest) {
              smallest = first;
          }
      }
      return smallest;
  }

.SH Second version

  template<class ForwardIt, class Compare>
  ForwardIt min_element(ForwardIt first, ForwardIt last,
                              Compare comp)
  {
      if (first == last) return last;

      ForwardIt smallest = first;
      ++first;
      for (; first != last; ++first) {
          if (comp(*first, *smallest)) {
              smallest = first;
          }
      }
      return smallest;
  }



.SH Example


// Run this code

  #include <algorithm>
  #include <iostream>
  #include <vector>

  int main()
  {
      std::vector<int> v{3, 1, 4, 1, 5, 9};

      std::vector<int>::iterator result = std::min_element(std::begin(v), std::end(v));
      std::cout << "min element at: " << std::distance(std::begin(v), result);
  }

.SH Output:

  min element at: 1


.SH See also


               returns the largest element in a range
max_element    \fI(function template)\fP

minmax_element returns the smallest and the largest elements in a range
               \fI(function template)\fP
\fI(C++11)\fP
               returns the smaller of the given values
min            \fI(function template)\fP




