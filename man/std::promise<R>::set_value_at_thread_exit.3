.TH std::promise<R>::set_value_at_thread_exit 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::promise<R>::set_value_at_thread_exit \- std::promise<R>::set_value_at_thread_exit

.SH Synopsis

  void set_value_at_thread_exit( const R& value ); \fB(1)\fP (member only of generic promise template)
                                                       \fI(since C++11)\fP
  void set_value_at_thread_exit( R&& value );      \fB(2)\fP (member only of generic promise template)
                                                       \fI(since C++11)\fP
  void set_value_at_thread_exit( R& value );       \fB(3)\fP (member only of promise<R&> template specialization)
                                                       \fI(since C++11)\fP
  void set_value_at_thread_exit()                  \fB(4)\fP (member only of promise<void> template specialization)
                                                       \fI(since C++11)\fP

  Stores the value into the shared state without making the state ready immediately. The state is made ready when the current thread exits, after all variables with thread-local storage duration have been destroyed.
  The operation behaves as though set_value, set_exception, set_value_at_thread_exit, and set_exception_at_thread_exit acquire a single mutex associated with the promise object while updating the promise object.
  An exception is thrown if there is no shared state or the shared state already stores a value or exception.
  Calls to this function do not introduce data races with calls to get_future (but they need not synchronize with each other).

.SH Parameters


  value - value to store in the shared state


.SH Return value

  \fI(none)\fP

.SH Exceptions

  std::future_error on the following conditions:

  * *this has no shared state. The error category is set to no_state.


  * The shared state already stores a value or exception. The error category is set to promise_already_satisfied.

  Additionally:
  1-2) Any exception thrown by the copy constructor of value
  3) Any exception thrown by the move constructor of value

.SH Example

  
// Run this code

    #include <iostream>
    #include <future>
    #include <thread>

    int main()
    {
        using namespace std::chrono_literals;
        std::promise<int> p;
        std::future<int> f = p.get_future();
        std::thread([&p] {
              std::this_thread::sleep_for(1s);
              p.set_value_at_thread_exit(9);
        }).detach();

        std::cout << "Waiting..." << std::flush;
        f.wait();
        std::cout << "Done!\\nResult is: " << f.get() << '\\n';
    }

.SH Output:

    Waiting...Done!
    Result is: 9


.SH See also


            sets the result to specific value
  set_value \fI(public member function)\fP




