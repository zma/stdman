.TH std::readable_traits 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::readable_traits \- std::readable_traits

.SH Synopsis
   Defined in header <iterator>
   template< class I >                                  \fB(1)\fP \fI(since C++20)\fP
   struct readable_traits { };
   template< class T >                                  \fB(2)\fP \fI(since C++20)\fP
   struct readable_traits<T*>;
   template< class I >

   requires std::is_array_v<I>                          \fB(3)\fP \fI(since C++20)\fP

   struct readable_traits<I>;
   template< class T >                                  \fB(4)\fP \fI(since C++20)\fP
   struct readable_traits<const T> : value_type<T> { };
   template <class T>

   requires requires { typename T::value_type; }        \fB(5)\fP \fI(since C++20)\fP

   struct readable_traits<T>;
   template <class T>

   requires requires { typename T::element_type; }      \fB(6)\fP \fI(since C++20)\fP

   struct readable_traits<T>;

   Computes the associated value type of the type I, if any. Users may specialize readable_traits for a program-defined type.

   1) Primary template is an empty struct.
   2) Specialization for pointers. If T is an object type, provides a member type value_type equal to std::remove_cv_t<T>. Otherwise, there is no member value_type.
   3) Specialization for array types. Provides a member type value_type equal to std::remove_cv_t<std::remove_extent_t<I>>.
   4) Specialization for const-qualified types.
   5) Specialization for types that define a public and accessible member type value_type. If T::value_type is an object type, provides a member type value_type equal to std::remove_cv_t<typename T::value_type>. Otherwise, there is no member value_type.
   6) Specialization for types that define a public and accessible member type element_type (e.g., std::shared_ptr). If T::element_type is an object type, provides a member type value_type equal to std::remove_cv_t<typename T::element_type>. Otherwise, there is no member value_type.

.SH Notes

   If a type contains both a value_type member and a element_type member, then the specializations \fB(5)\fP and \fB(6)\fP are ambiguous.

   value_type is intended for use with Readable types such as iterators. It is not intended for use with ranges.

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   Readable                specifies that a type is readable by applying operator *
                           (concept)
   iter_value_t
   iter_reference_t        computes the associate types of an iterator
   iter_difference_t       (alias template)
   iter_rvalue_reference_t
   iter_common_reference_t
   iterator_traits         provides uniform interface to the properties of an iterator
                           \fI(class template)\fP
