.TH std::is_empty 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_empty \- std::is_empty

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_empty;

   If T is an empty type (that is, a non-union class type with no non-static data members other than bit-fields of size 0, no virtual functions, no virtual base classes, and no non-empty base classes), provides the member constant value equal true. For any other type, value is false.

   If T is a non-union class type, T shall be a complete type; otherwise, the behavior is undefined.

.SH Template parameters

   T - a type to check

  Helper variable template

   template< class T >                                     \fI(since C++17)\fP
   inline constexpr bool is_empty_v = is_empty<T>::value;

Inherited from std::integral_constant

.SH Member constants

   value    true if T is an empty class type , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Notes

   Inheriting from empty base classes usually does not increase the size of a class due to empty base optimization.

   std::is_empty<T> and all other type traits are empty classes.

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>

 struct A {};

 struct B {
     int m;
 };

 struct C {
     static int m;
 };

 struct D {
     virtual ~D();
 };

 union E {};

 struct F {
     [[no_unique_address]] E e;
 };

 int main()
 {
     std::cout << std::boolalpha;
     std::cout << "A " << std::is_empty<A>::value << '\\n';
     std::cout << "B " << std::is_empty<B>::value << '\\n';
     std::cout << "C " << std::is_empty<C>::value << '\\n';
     std::cout << "D " << std::is_empty<D>::value << '\\n';
     std::cout << "E " << std::is_empty<E>::value << '\\n';
     std::cout << "F " << std::is_empty<F>::value << '\\n'; // the result is ABI-dependent

 }

.SH Possible output:

 A true
 B false
 C true
 D false
 E false
 F true

.SH See also

   is_class checks if a type is a non-union class type
   \fI(C++11)\fP  \fI(class template)\fP
