.TH std::floor,std::floorf,std::floorl 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::floor,std::floorf,std::floorl \- std::floor,std::floorf,std::floorl

.SH Synopsis

  Defined in header <cmath>
  float floor ( float arg );
  float floorf( float arg );                     \fI(since C++11)\fP
  double floor ( double arg );           \fB(1)\fP \fB(2)\fP
  long double floor ( long double arg );
  long double floorl( long double arg );     \fB(3)\fP               \fI(since C++11)\fP
  double floor ( IntegralType arg );             \fB(4)\fP           \fI(since C++11)\fP

  1-3) Computes the largest integer value not greater than arg.
  4) A set of overloads or a function template accepting an argument of any integral_type. Equivalent to 2) (the argument is cast to double).

.SH Parameters


  arg - floating point value


.SH Return value

  If no errors occur, the largest integer value not greater than arg, that is ⌊arg⌋, is returned.
.SH Return value
   math-floor.svg
  Argument

.SH Error handling

  Errors are reported as specified in math_errhandling.
  If the implementation supports IEEE floating-point arithmetic (IEC 60559),

  * The current rounding_mode has no effect.
  * If arg is ±∞, it is returned, unmodified
  * If arg is ±0, it is returned, unmodified
  * If arg is NaN, NaN is returned


.SH Notes

  FE_INEXACT may be (but isn't required to be) raised when rounding a non-integer finite value.
  The largest representable floating-point values are exact integers in all standard floating-point formats, so this function never overflows on its own; however the result may overflow any integer type (including std::intmax_t), when stored in an integer variable.

.SH Example

  
// Run this code

    #include <cmath>
    #include <iostream>
    int main()
    {
        std::cout << std::fixed
                  << "floor(+2.7) = " << std::floor(+2.7) << '\\n'
                  << "floor(-2.7) = " << std::floor(-2.7) << '\\n'
                  << "floor(-0.0) = " << std::floor(-0.0) << '\\n'
                  << "floor(-Inf) = " << std::floor(-INFINITY) << '\\n';
    }

.SH Output:

    floor(+2.7) = 2.000000
    floor(-2.7) = -3.000000
    floor(-0.0) = -0.000000
    floor(-Inf) = -inf


.SH See also



  ceil
  ceilf
  ceill    nearest integer not less than the given value
           \fI(function)\fP

  \fI(C++11)\fP
  \fI(C++11)\fP

  trunc
  truncf
  truncl   nearest integer not greater in magnitude than the given value
           \fI(function)\fP
  \fI(C++11)\fP
  \fI(C++11)\fP
  \fI(C++11)\fP

  round
  roundf
  roundl
  lround
  lroundf
  lroundl
  llround
  llroundf
  llroundl nearest integer, rounding away from zero in halfway cases
           \fI(function)\fP
  \fI(C++11)\fP
  \fI(C++11)\fP
  \fI(C++11)\fP
  \fI(C++11)\fP
  \fI(C++11)\fP
  \fI(C++11)\fP
  \fI(C++11)\fP
  \fI(C++11)\fP
  \fI(C++11)\fP




