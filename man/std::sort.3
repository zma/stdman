.TH std::sort 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::sort \- std::sort

.SH Synopsis

  Defined in header <algorithm>
  template< class RandomIt >                                                                  \fI(until C++20)\fP
  void sort( RandomIt first, RandomIt last );
  template< class RandomIt >                                                                  \fI(since C++20)\fP
  constexpr void sort( RandomIt first, RandomIt last );
  template< class ExecutionPolicy, class RandomIt >                                       \fB(2)\fP \fI(since C++17)\fP
  void sort( ExecutionPolicy&& policy, RandomIt first, RandomIt last );               \fB(1)\fP
  template< class RandomIt, class Compare >                                                                 \fI(until C++20)\fP
  void sort( RandomIt first, RandomIt last, Compare comp );
  template< class RandomIt, class Compare >                                               \fB(3)\fP               \fI(since C++20)\fP
  constexpr void sort( RandomIt first, RandomIt last, Compare comp );
  template< class ExecutionPolicy, class RandomIt, class Compare >                            \fB(4)\fP           \fI(since C++17)\fP
  void sort( ExecutionPolicy&& policy, RandomIt first, RandomIt last, Compare comp );

  Sorts the elements in the range [first, last) in ascending order. The order of equal elements is not guaranteed to be preserved.
  1) Elements are compared using operator<.
  3) Elements are compared using the given binary comparison function comp.
  2,4) Same as (1,3), but executed according to policy. These overloads do not participate in overload resolution unless std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true

.SH Parameters


  first, last - the range of elements to sort
  policy      - the execution policy to use. See execution_policy for details.
                comparison function object (i.e. an object that satisfies the requirements of Compare) which returns true if the first argument is less than (i.e. is ordered before) the second.
                The signature of the comparison function should be equivalent to the following:
                bool cmp(const Type1 &a, const Type2 &b);
  comp        - While the signature does not need to have const &, the function must not modify the objects passed to it and must be able to accept all values of type (possibly const) Type1 and Type2 regardless of value_category (thus, Type1 & is not allowed
                , nor is Type1 unless for Type1 a move is equivalent to a copy
                \fI(since C++11)\fP).
                The types Type1 and Type2 must be such that an object of type RandomIt can be dereferenced and then implicitly converted to both of them. 
.SH Type requirements
  -
  RandomIt must meet the requirements of ValueSwappable and LegacyRandomAccessIterator.
  -
  The type of dereferenced RandomIt must meet the requirements of MoveAssignable and MoveConstructible.
  -
  Compare must meet the requirements of Compare.


.SH Return value

  \fI(none)\fP

.SH Complexity


  O(N·log(N)), where N = std::distance(first, last) comparisons on average.\fI(until C++11)\fP
  O(N·log(N)), where N = std::distance(first, last) comparisons.           \fI(since C++11)\fP


.SH Exceptions

  The overloads with a template parameter named ExecutionPolicy report errors as follows:

  * If execution of a function invoked as part of the algorithm throws an exception and ExecutionPolicy is one of the standard_policies, std::terminate is called. For any other ExecutionPolicy, the behavior is implementation-defined.
  * If the algorithm fails to allocate memory, std::bad_alloc is thrown.


.SH Example

  
// Run this code

    #include <algorithm>
    #include <functional>
    #include <array>
    #include <iostream>

    int main()
    {
        std::array<int, 10> s = {5, 7, 4, 2, 8, 6, 1, 9, 0, 3};

        // sort using the default operator<
        std::sort(s.begin(), s.end());
        for (auto a : s) {
            std::cout << a << " ";
        }
        std::cout << '\\n';

        // sort using a standard library compare function object
        std::sort(s.begin(), s.end(), std::greater<int>());
        for (auto a : s) {
            std::cout << a << " ";
        }
        std::cout << '\\n';

        // sort using a custom function object
        struct {
            bool operator()(int a, int b) const
            {
                return a < b;
            }
        } customLess;
        std::sort(s.begin(), s.end(), customLess);
        for (auto a : s) {
            std::cout << a << " ";
        }
        std::cout << '\\n';

        // sort using a lambda expression
        std::sort(s.begin(), s.end(), [](int a, int b) {
            return a > b;
        });
        for (auto a : s) {
            std::cout << a << " ";
        }
        std::cout << '\\n';
    }

.SH Output:

    0 1 2 3 4 5 6 7 8 9
    9 8 7 6 5 4 3 2 1 0
    0 1 2 3 4 5 6 7 8 9
    9 8 7 6 5 4 3 2 1 0


.SH See also


               sorts the first N elements of a range
  partial_sort \fI(function template)\fP
               sorts a range of elements while preserving order between equal elements
  stable_sort  \fI(function template)\fP




