.TH std::basic_istream<CharT,Traits>::operator>> 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_istream<CharT,Traits>::operator>> \- std::basic_istream<CharT,Traits>::operator>>

.SH Synopsis

  basic_istream& operator>>( short& value );                                                         \fB(1)\fP
  basic_istream& operator>>( unsigned short& value );
  basic_istream& operator>>( int& value );                                                           \fB(2)\fP
  basic_istream& operator>>( unsigned int& value );
  basic_istream& operator>>( long& value );                                                          \fB(3)\fP
  basic_istream& operator>>( unsigned long& value );
  basic_istream& operator>>( long long& value );                                                     \fB(4)\fP  \fI(since C++11)\fP
  basic_istream& operator>>( unsigned long long& value );
  basic_istream& operator>>( float& value );
  basic_istream& operator>>( double& value );                                                        \fB(5)\fP
  basic_istream& operator>>( long double& value );
  basic_istream& operator>>( bool& value );                                                          \fB(6)\fP
  basic_istream& operator>>( void*& value );                                                         \fB(7)\fP
  basic_istream& operator>>( std::ios_base& (*func)(std::ios_base&) );                               \fB(8)\fP
  basic_istream& operator>>( std::basic_ios<CharT,Traits>& (*func)(std::basic_ios<CharT,Traits>&) ); \fB(9)\fP
  basic_istream& operator>>( basic_istream& (*func)(basic_istream&) );                               \fB(10)\fP
  basic_istream& operator>>( std::basic_streambuf<CharT,Traits>* sb );                               \fB(11)\fP

  1-4) Behaves as a FormattedInputFunction. After constructing and checking the sentry object, which may skip leading whitespace, extracts an integer value by calling std::num_get::get()
  5) Behaves as a FormattedInputFunction. After constructing and checking the sentry object, which may skip leading whitespace, extracts a floating point value by calling std::num_get::get()
  6) Behaves as a FormattedInputFunction. After constructing and checking the sentry object, which may skip leading whitespace, extracts bool value by calling std::num_get::get()
  7) Behaves as a FormattedInputFunction. After constructing and checking the sentry object, which may skip leading whitespace, extracts a generic pointer value by calling std::num_get::get()
  8-10) Calls func(*this), where func is an I/O manipulator.
  11) Behaves as an UnformattedInputFunction. After constructing and checking the sentry object, extracts all data from the input stream and stores it to sb. The extraction stops if one of the following conditions are met:


        * end-of-file occurs on the input sequence;
        * inserting in the output sequence fails (in which case the character to be inserted is not extracted);
        * an exception occurs (in which case the exception is caught, and only rethrown if failbit is enabled in exceptions()).


  In either case, stores the number of characters extracted in the member variable accessed by subsequent calls to gcount(). If sb is a null pointer or if no characters were inserted into sb, calls setstate(failbit) (which may throw std::ios_base::failure if enabled).

  If extraction fails (e.g. if a letter was entered where a digit is expected), value is left unmodified and failbit is set.                                                                                                                      \fI(until C++11)\fP
  If extraction fails, zero is written to value and failbit is set. If extraction results in the value too large or too small to fit in value, std::numeric_limits<T>::max() or std::numeric_limits<T>::min() is written and failbit flag is set. \fI(since C++11)\fP


.SH Parameters


  value - reference to an integer or floating-point value to store the extracted value to
  func  - pointer to I/O manipulator function
  sb    - pointer to the streambuffer to write all the data to


.SH Return value

  1-9,11) *this
  10) func(*this)

.SH Example

  
// Run this code

    #include <iostream>
    #include <iomanip>
    #include <sstream>

    int main()
    {
        std::string input = "41 3.14 false hello world";
        std::istringstream stream(input);
        int n;
        double f;
        bool b;

        stream >> n >> f >> std::boolalpha >> b;
        std::cout << "n = " << n << '\\n'
                  << "f = " << f << '\\n'
                  << "b = " << std::boolalpha << b << '\\n';

        // extract the rest using the streambuf overload
        stream >> std::cout.rdbuf();
        std::cout << '\\n';
    }

.SH Output:

    n = 41
    f = 3.14
    b = false
    hello world


.SH See also


                                 extracts characters and character arrays
  operator>>(std::basic_istream) \fI(function template)\fP
                                 performs stream input and output on strings
  operator<<                     \fI(function template)\fP
  operator>>
                                 performs stream input and output of bitsets
  operator<<                     \fI(function template)\fP
  operator>>
                                 serializes and deserializes a complex number
  operator<<                     \fI(function template)\fP
  operator>>
                                 performs stream input and output on pseudo-random number engine
  operator<<                     \fI(function template)\fP
  operator>>
                                 performs stream input and output on pseudo-random number distribution
  operator<<                     \fI(function template)\fP
  operator>>
                                 extracts blocks of characters
  read                           \fI(public member function)\fP
                                 extracts already available blocks of characters
  readsome                       \fI(public member function)\fP
                                 extracts characters
  get                            \fI(public member function)\fP
                                 extracts characters until the given character is found
  getline                        \fI(public member function)\fP

  from_chars                     converts a character sequence to an integer or floating-point value
                                 \fI(function)\fP
  \fI(C++17)\fP




