.TH std::basic_string<CharT,Traits,Allocator>::c_str 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string<CharT,Traits,Allocator>::c_str \- std::basic_string<CharT,Traits,Allocator>::c_str

.SH Synopsis

const CharT* c_str() const;           \fI(until C++11)\fP
const CharT* c_str() const noexcept;  \fI(since C++11)\fP

Returns a pointer to a null-terminated character array with data equivalent to those stored in the string.
The pointer is such that the range [c_str(); c_str() + size()] is valid and the values in it correspond to the values stored in the string with an additional null character after the last position.
The pointer obtained from c_str() may be invalidated by:

* Passing a non-const reference to the string to any standard library function, or
* Calling non-const member functions on the string, excluding operator[], at(), front(), back(), begin(), rbegin(), end() and rend().

Writing to the character array accessed through c_str() is undefined behavior.

c_str() and data() perform the same function. \fI(since C++11)\fP


.SH Parameters

\fI(none)\fP

.SH Return value

Pointer to the underlying character storage.

c_str()[i] == operator[](i) for every i in [0, size()).                  \fI(until C++11)\fP
c_str() + i == std::addressof(operator[](i)) for every i in [0, size()]. \fI(since C++11)\fP


.SH Complexity

Constant.

.SH Notes

The pointer obtained from c_str() may only be treated as a pointer to a null-terminated character string if the string object does not contain other null characters.

.SH Example


// Run this code

  #include <algorithm>
  #include <cassert>
  #include <cstring>
  #include <string>

  int main()
  {
    std::string const s("Emplary");
    assert(s.size() == std::strlen(s.c_str()));
    assert(std::equal(s.begin(), s.end(), s.c_str()));
    assert(std::equal(s.c_str(), s.c_str() + s.size(), s.begin()));
    assert(0 == *(s.c_str() + s.size()));
  }



.SH See also



front   accesses the first character
        \fI(public member function)\fP
\fI(C++11)\fP

back    accesses the last character
        \fI(public member function)\fP
\fI(C++11)\fP
        returns a pointer to the first character of a string
data    \fI(public member function)\fP




