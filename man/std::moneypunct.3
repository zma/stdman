.TH std::moneypunct 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::moneypunct \- std::moneypunct

.SH Synopsis

  Defined in header <locale>
  template< class CharT, bool International = false >
  class moneypunct;

  The facet std::moneypunct encapsulates monetary value format preferences. Stream I/O manipulators std::get_money and std::put_money use std::moneypunct through std::money_get and std::money_put for parsing monetary value input and formatting monetary value output.
   std-moneypunct-inheritance.svg
  Inheritance diagram
  Four standalone (locale-independent) specializations are provided by the standard library:

  Defined in header <locale>
  std::moneypunct<char>          provides equivalents of the "C" locale preferences
  std::moneypunct<wchar_t>       provides wide character equivalents of the "C" locale preferences
  std::moneypunct<char, true>    provides equivalents of the "C" locale preferences, with international currency symbols
  std::moneypunct<wchar_t, true> provides wide character equivalents of the "C" locale preferences, with international currency symbols

  In addition, every locale object constructed in a C++ program implements its own (locale-specific) versions of these specializations.

.SH Member types


  Member type Definition
  char_type   CharT
  string_type std::basic_string<CharT>


.SH Member functions


                constructs a new moneypunct facet
  constructor   \fI(public member function)\fP
                destructs a moneypunct facet
  destructor    \fI(protected member function)\fP
                invokes do_decimal_point
  decimal_point \fI(public member function)\fP
                invokes do_thousands_sep
  thousands_sep \fI(public member function)\fP
                invokes do_grouping
  grouping      \fI(public member function)\fP
                invokes do_curr_symbol
  curr_symbol   \fI(public member function)\fP
                invokes do_positive_sign or do_negative_sign
  positive_sign \fI(public member function)\fP
  negative_sign
                invokes do_frac_digits
  frac_digits   \fI(public member function)\fP
                invokes do_pos_format/do_neg_format
  pos_format    \fI(public member function)\fP
  neg_format


.SH Protected member functions



  do_decimal_point provides the character to use as decimal point
                   \fI(virtual protected member function)\fP
  \fB[virtual]\fP

  do_thousands_sep provides the character to use as thousands separator
                   \fI(virtual protected member function)\fP
  \fB[virtual]\fP

  do_grouping      provides the numbers of digits between each pair of thousands separators
                   \fI(virtual protected member function)\fP
  \fB[virtual]\fP

  do_curr_symbol   provides the string to use as the currency identifier
                   \fI(virtual protected member function)\fP
  \fB[virtual]\fP

  do_positive_sign provides the string to indicate a positive or negative value
  do_negative_sign \fI(virtual protected member function)\fP

  \fB[virtual]\fP

  do_frac_digits   provides the number of digits to display after the decimal point
                   \fI(virtual protected member function)\fP
  \fB[virtual]\fP

  do_pos_format    provides the formatting pattern for currency values
  do_neg_format    \fI(virtual protected member function)\fP

  \fB[virtual]\fP


.SH Member constants


  Member                   Definition
  const bool intl (static) International


.SH Member objects


                            id of the locale
  static std::locale::id id \fI(public member object)\fP


  Inherited from std::money_base


  Member type                                     Definition
  enum part { none, space, symbol, sign, value }; unscoped enumeration type
  struct pattern { char field[4]; };              the monetary format type


  Enumeration constant Definition
  none                 whitespace is permitted but not required except in the last position, where whitespace is not permitted
  space                one or more whitespace characters are required
  symbol               the sequence of characters returned by moneypunct::curr_symbol is required
  sign                 the first of the characters returned by moneypunct::positive_sign or moneypunct::negative_sign is required
  value                the absolute numeric monetary value is required


.SH See also


                    defines monetary formatting patterns
  money_base        \fI(class)\fP
                    represents the system-supplied std::moneypunct for the named locale
  moneypunct_byname \fI(class template)\fP
                    parses and constructs a monetary value from an input character sequence
  money_get         \fI(class template)\fP
                    formats a monetary value for output as a character sequence
  money_put         \fI(class template)\fP




