.TH Deductionguidesforstd::chrono::zoned_time 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
Deductionguidesforstd::chrono::zoned_time \- Deductionguidesforstd::chrono::zoned_time

.SH Synopsis

zoned_time() -> zoned_time<std::chrono::seconds>;                                   \fB(1)\fP \fI(since C++20)\fP
template< class Duration >
zoned_time(std::chrono::sys_time<Duration>)                                         \fB(2)\fP \fI(since C++20)\fP
-> zoned_time<std::common_type_t<Duration, std::chrono::seconds>>;
template< class TimeZonePtrOrName >                                                 \fB(3)\fP \fI(since C++20)\fP
zoned_time(TimeZonePtrOrName) -> zoned_time<std::chrono::seconds, /* see below */>;
template< class TimeZonePtrOrName, class Duration >
zoned_time(TimeZonePtrOrName, std::chrono::sys_time<Duration>)                      \fB(4)\fP \fI(since C++20)\fP
-> zoned_time<std::common_type_t<Duration, std::chrono::seconds>, /* see below */>;
template< class TimeZonePtrOrName, class Duration >
zoned_time(TimeZonePtrOrName, std::chrono::local_time<Duration>,                    \fB(5)\fP \fI(since C++20)\fP
std::chrono::choose = std::chrono::choose::earliest)
-> zoned_time<std::common_type_t<Duration, std::chrono::seconds>, /* see below */>;
template< class TimeZonePtrOrName, class Duration, class TimeZonePtr2 >
zoned_time(TimeZonePtrOrName, std::chrono::zoned_time<Duration, TimeZonePtr2>,      \fB(6)\fP \fI(since C++20)\fP
std::chrono::choose = std::chrono::choose::earliest)
-> zoned_time<std::common_type_t<Duration, std::chrono::seconds>, /* see below */>;

Six deduction guides are provided for zoned_time. They normalize Duration to a minimum resolution of std::chrono::seconds, and provide correct handling for time zone names specified using types convertible to std::string_view.
3-6) If std::is_convertible_v<TimeZonePtrOrName, std::string_view> is true, the deduced second template argument is const std::chrono::time_zone*. Otherwise it is TimeZonePtrOrName.



