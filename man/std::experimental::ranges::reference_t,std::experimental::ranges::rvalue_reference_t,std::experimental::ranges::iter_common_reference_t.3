.TH std::experimental::ranges::reference_t,std::experimental::ranges::rvalue_reference_t,std::experimental::ranges::iter_common_reference_t 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::ranges::reference_t,std::experimental::ranges::rvalue_reference_t,std::experimental::ranges::iter_common_reference_t \- std::experimental::ranges::reference_t,std::experimental::ranges::rvalue_reference_t,std::experimental::ranges::iter_common_reference_t

.SH Synopsis

  Defined in header <experimental/ranges/iterator>
  template <class T>
  concept bool /*dereferenceable*/ = requires(T& t) { {*t} -> auto&&; }; // exposition only
  template< /*dereferenceable*/ T >                                                         \fB(1)\fP (ranges TS)
  using reference_t = decltype(*declval<T&>());
  template< /*dereferenceable*/ T >
  requires requires(T& t) { { ranges::iter_move(t) } -> auto&&; }                           \fB(2)\fP (ranges TS)
  using rvalue_reference_t = decltype(ranges::iter_move(declval<T&>()));
  template< Readable T >
  using iter_common_reference_t = ranges::common_reference_t<ranges::reference_t<T>,        \fB(3)\fP (ranges TS)
  ranges::value_type_t<T>&>;

  1) Obtain the reference type of a dereferenceable type T.
  2) Obtain the rvalue reference type of a dereferenceable type T, that is, the return type of ranges::iter_move.
  3) Compute a Readable type's common reference type. This is the common reference type of its reference type and an lvalue reference to its value type.

.SH Notes

  The -> auto&& constraint checks that the type of the expression is not void.



