.TH std::shared_lock<Mutex>::try_lock_until 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::shared_lock<Mutex>::try_lock_until \- std::shared_lock<Mutex>::try_lock_until

.SH Synopsis

template< class Clock, class Duration >                                              \fI(since C++14)\fP
bool try_lock_until( const std::chrono::time_point<Clock,Duration>& timeout_time );

Tries to lock the associated mutex in shared mode. Blocks until specified timeout_time has been reached or the lock is acquired, whichever comes first. On successful lock acquisition returns true, otherwise returns false. May block for longer than until timeout_time has been reached.
Effectively calls mutex()->try_lock_shared_until(timeout_time)
std::system_error is thrown if there is no associated mutex or if the mutex is already locked.

.SH Parameters


timeout_time - maximum time point to block until


.SH Return value

true if the ownership of the mutex has been acquired successfully, false otherwise.

.SH Exceptions


* Any exceptions thrown by mutex()->try_lock_shared_for(timeout_time)


* If there is no associated mutex, std::system_error with an error code of std::errc::operation_not_permitted


* If the mutex is already locked, std::system_error with an error code of std::errc::resource_deadlock_would_occur


.SH Example


 This section is incomplete
 Reason: no example


.SH See also


               locks the associated mutex
lock           \fI(public member function)\fP
               tries to lock the associated mutex
try_lock       \fI(public member function)\fP
               tries to lock the associated mutex, for the specified duration
try_lock_for   \fI(public member function)\fP
               unlocks the associated mutex
unlock         \fI(public member function)\fP
               tries to lock the associated TimedLockable mutex, returns if the mutex has been unavailable until specified time point has been reached
try_lock_until \fI(public member function of std::unique_lock<Mutex>)\fP




