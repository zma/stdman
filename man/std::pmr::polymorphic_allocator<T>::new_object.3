.TH std::pmr::polymorphic_allocator<T>::new_object 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::pmr::polymorphic_allocator<T>::new_object \- std::pmr::polymorphic_allocator<T>::new_object

.SH Synopsis

template< class U, class CtorArgs... >     \fI(since C++20)\fP
U* new_object( CtorArgs&&... ctor_args );

Allocates and constructs an object of type U.
Equivalent to

  U* p = allocate_object<U>();
  try {
    construct(p, std::forward<CtorArgs>(ctor_args)...);
  } catch (...) {
    deallocate_object(p);
    throw;
  }
  return p;


.SH Parameters


ctor_args - the arguments to forward to the the constructor of U


.SH Return value

A pointer to the allocated and constructed object.

.SH Notes

This function was introduced for use with the fully-specialized allocator std::polymorphic_allocator<>, but it may be useful in any specialization as a shortcut to avoid having to rebind from std::polymorphic_allocator<T> to std::polymorphic_allocator<U>, and having to call allocate, construct, and deallocate individually.
Since U is not deduced, it must be provided as a template argument when calling this function.

.SH Exceptions

May throw any exceptions thrown by the call to allocate_object or the constructor of U.

.SH See also



allocate_bytes  Allocate raw aligned memory from the underlying resource
                \fI(public member function)\fP
(C++20)

allocate_object Allocates raw memory suitable for an object or an array
                \fI(public member function)\fP
(C++20)
                Allocate memory
allocate        \fI(public member function)\fP

allocate        allocates uninitialized storage using the allocator
                \fI(public static member function of std::allocator_traits<Alloc>)\fP
\fB[static]\fP
                allocates memory
allocate        \fI(public member function of std::pmr::memory_resource)\fP




