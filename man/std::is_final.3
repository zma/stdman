.TH std::is_final 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_final \- std::is_final

.SH Synopsis

  Defined in header <type_traits>
  template< class T >              \fI(since C++14)\fP
  struct is_final;

  If T is a final class (that is, a class declared with the final_specifier), provides the member constant value equal true. For any other type, value is false.
  If T is a class type, T shall be a complete type; otherwise, the behavior is undefined.

.SH Template parameters


  T - a type to check


  Helper variable template


  template< class T >                                     \fI(since C++17)\fP
  inline constexpr bool is_final_v = is_final<T>::value;


  Inherited from std::integral_constant


.SH Member constants



  value    true if T is a final class type , false otherwise
           \fI(public static member constant)\fP
  \fB[static]\fP


.SH Member functions


                converts the object to bool, returns value
  operator bool \fI(public member function)\fP

  operator()    returns value
                \fI(public member function)\fP
  \fI(C++14)\fP


.SH Member types


  Type       Definition
  value_type bool
  type       std::integral_constant<bool, value>


.SH Notes

  Final classes cannot be used as base classes.
  A union can be marked final (and std::is_final will detect that), even though unions cannot be used as bases in any case.

.SH Example

  
// Run this code

    #include <iostream>
    #include <type_traits>

    class A {};
    class B final {};

    int main()
    {
        std::cout
            << std::boolalpha
            << std::is_final<A>::value << '\\n'
            << std::is_final<B>::value << '\\n';
    }

.SH Output:

    false
    true


.SH See also



  is_class       checks if a type is a non-union class type
                 \fI(class template)\fP
  \fI(C++11)\fP

  is_polymorphic checks if a type is a polymorphic class type
                 \fI(class template)\fP
  \fI(C++11)\fP




