.TH std::Assignable 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::Assignable \- std::Assignable

.SH Synopsis
   Defined in header <concepts>
   template< class LHS, class RHS >

   concept Assignable =
   std::is_lvalue_reference_v<LHS> &&
   std::CommonReference<
   const std::remove_reference_t<LHS>&,                              \fI(since C++20)\fP
   const std::remove_reference_t<RHS>&> &&
   requires(LHS lhs, RHS&& rhs) {
   lhs = std::forward<RHS>(rhs);
   requires std::Same<decltype(lhs = std::forward<RHS>(rhs)), LHS>;

   };

   The concept Assignable<LHS, RHS> specifies that an expression of the type and value category specified by RHS can be assigned to an lvalue expression whose type is specified by LHS.

   Given

     * lhs, an lvalue that refers to an object lcopy such that decltype((lhs)) is LHS,
     * rhs, an expression such that decltype((rhs)) is RHS,
     * rcopy, a distinct object that is equal to rhs,

   Assignable<LHS, RHS> is satisfied only if

     * std::addressof(lhs = rhs) == std::addressof(lcopy) (i.e., the assignment expression yields an lvalue referring to the left operand);
     * After evaluating lhs = rhs:

          * lhs is equal to rcopy, unless rhs is a non-const xvalue that refers to lcopy (i.e., the assignment is a self-move-assignment),
          * if rhs is a glvalue:

               * If it is a non-const xvalue, the object to which it refers is in a valid but unspecified state;
               * Otherwise, the object it refers to is not modified;

  Equality preservation

   An expression is equality preserving if it results in equal outputs given equal inputs.

     * The inputs to an expression consist of its operands.
     * The outputs of an expression consist of its result and all operands modified by the expression (if any).

   Every expression required to be equality preserving is further required to be stable: two evaluations of such an expression with the same input objects must have equal outputs absent any explicit intervening modification of those input objects.

   Unless noted otherwise, every expression used in a requires-expression is required to be equality preserving and stable, and the evaluation of the expression may only modify its non-constant operands. Operands that are constant must not be modified.

.SH Notes

   Assignment need not be a total function. In particular, if assigning to some object x can cause some other object y to be modified, then x = y is likely not in the domain of =. This typically happens if the right operand is owned directly or indirectly by the left operand (e.g., with smart pointers to nodes in an node-based data structure, or with something like std::vector<std::any>).

.SH See also

   is_assignable
   is_trivially_assignable
   is_nothrow_assignable   checks if a type has a assignment operator for a specific argument
   \fI(C++11)\fP                 \fI(class template)\fP
   \fI(C++11)\fP
   \fI(C++11)\fP
