.TH std::size,std::ssize 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::size,std::ssize \- std::size,std::ssize

.SH Synopsis
   Defined in header <iterator>
   template <class C>                                            \fB(1)\fP \fI(since C++17)\fP
   constexpr auto size(const C& c) -> decltype(c.size());
   template <class C>

   constexpr auto ssize(const C& c)                              \fB(2)\fP \fI(since C++20)\fP
   -> std::common_type_t<std::ptrdiff_t,

   std::make_signed_t<decltype(c.size())>>;
   template <class T, std::size_t N>                             \fB(3)\fP \fI(since C++17)\fP
   constexpr std::size_t size(const T (&array)[N]) noexcept;
   template <class T, std::ptrdiff_t N>                          \fB(4)\fP \fI(since C++20)\fP
   constexpr std::ptrdiff_t ssize(const T (&array)[N]) noexcept;

   Returns the size of the given container c or array array.

   1-2) Returns c.size(), converted to the return type if necessary.
   3-4) Returns N.

.SH Parameters

   c     - a container with a size method
   array - an array of arbitrary type

.SH Return value

   The size of c or array

.SH Notes

   In addition to being included in <iterator>, std::size and std::ssize are guaranteed to become available if any of the following headers are included: <array>, <deque>, <forward_list>, <list>, <map>, <regex>, <set>
   , <span>
   \fI(since C++20)\fP, <string>, <string_view>, <unordered_map>, <unordered_set>, and <vector>.

.SH Possible implementation

.SH First version
   template <class C>
   constexpr auto size(const C& c) -> decltype(c.size())
   {
       return c.size();
   }
.SH Second version
   template <class C>
   constexpr auto ssize(const C& c)
       -> std::common_type_t<std::ptrdiff_t,
                             std::make_signed_t<decltype(c.size())>> {
       using R = std::common_type_t<std::ptrdiff_t,
                                    std::make_signed_t<decltype(c.size())>>;
       return static_cast<R>(c.size());
   }
                                 Third version
   template <class T, std::size_t N>
   constexpr std::size_t size(const T (&array)[N]) noexcept
   {
       return N;
   }
                                Fourth version
   template <class T, std::ptrdiff_t N>
   constexpr std::ptrdiff_t ssize(const T (&array)[N]) noexcept
   {
       return N;
   }

.SH Example

   
// Run this code

 #include <iostream>
 #include <vector>
 #include <iterator>

 int main()
 {
     std::vector<int> v = { 3, 1, 4 };
     std::cout << std::size(v) << '\\n';

     int a[] = { -5, 10, 15 };
     std::cout << std::size(a) << '\\n';
 }

.SH Output:

 3
 3
