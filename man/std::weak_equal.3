.TH std::weak_equal 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::weak_equal \- std::weak_equal

.SH Synopsis

Defined in header <compare>
template< class T >                                               \fI(since C++20)\fP
constexpr std::weak_equality weak_equal(const T& a, const T& b);

Compares two values using 3-way comparison and produces a result of type std::weak_equality
Specifically,

* If the expression a <=> b is well-formed and its result is convertible to std::weak_equality, returns that result.
* Otherwise, if the expression a <=> b is well-formed, but its result is not convertible to std::weak_equality, then the function is defined as deleted.
* Otherwise, if the expression a <=> b is ill-formed, but the expression a == b is well-formed and convertible to bool,



      * if a == b is true, returns std::weak_equality::equivalent
      * otherwise, returns std::weak_equality::nonequivalent



* Otherwise, the function is defined as deleted.


.SH Parameters


a, b - values to compare


.SH Return value

A value of type std::weak_equality, as described above.

.SH Notes


.SH Example


 This section is incomplete
 Reason: no example


.SH See also



weak_equality the result type of 3-way comparison that supports only equality/inequality and is not substitutable
              \fI(class)\fP
(C++20)

strong_equal  performs 3-way comparison and produces a result of type std::strong_equality
              \fI(function template)\fP
(C++20)

strong_order  performs 3-way comparison and produces a result of type std::strong_ordering
              \fI(function template)\fP
(C++20)

partial_order performs 3-way comparison and produces a result of type std::partial_ordering
              \fI(function template)\fP
(C++20)

weak_order    performs 3-way comparison and produces a result of type std::weak_ordering
              \fI(function template)\fP
(C++20)




