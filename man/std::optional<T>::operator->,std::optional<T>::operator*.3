.TH std::optional<T>::operator->,std::optional<T>::operator* 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::optional<T>::operator->,std::optional<T>::operator* \- std::optional<T>::operator->,std::optional<T>::operator*

.SH Synopsis

  constexpr const T* operator->() const;   \fB(1)\fP \fI(since C++17)\fP
  constexpr T* operator->();               \fB(1)\fP \fI(since C++17)\fP
  constexpr const T& operator*() const&;   \fB(2)\fP \fI(since C++17)\fP
  constexpr T& operator*() &;              \fB(2)\fP \fI(since C++17)\fP
  constexpr const T&& operator*() const&&; \fB(2)\fP \fI(since C++17)\fP
  constexpr T&& operator*() &&;            \fB(2)\fP \fI(since C++17)\fP

  Accesses the contained value.
  1) Returns a pointer to the contained value.
  2) Returns a reference to the contained value.
  The behavior is undefined if *this does not contain a value.

.SH Parameters

  \fI(none)\fP

.SH Return value

  Pointer or reference to the contained value.

.SH Exceptions

  \fI(none)\fP

.SH Notes

  This operator does not check whether the optional contains a value! You can do so manually by using has_value() or simply operator_bool(). Alternatively, if checked access is needed, value() or value_or() may be used.

.SH Example

  
// Run this code

    #include <optional>
    #include <iostream>
    #include <string>

    int main()
    {
        using namespace std::string_literals;

        std::optional<int> opt1 = 1;
        std::cout<< "opt1: "  << *opt1 << '\\n';

        *opt1 = 2;
        std::cout<< "opt1: "  << *opt1 << '\\n';

        std::optional<std::string> opt2 = "abc"s;
        std::cout<< "opt2: " << *opt2 << " size: " << opt2->size() << '\\n';

        // You can "take" the contained value by calling operator* on a rvalue to optional

        auto taken = *std::move(opt2);
        std::cout << "taken: " << taken << " opt2: " << *opt2 << "size: " << opt2->size()  << '\\n';
    }

.SH Output:

    opt1: 1
    opt1: 2
    opt2: abc size: 3
    taken: abc opt2: size: 0


.SH See also


           returns the contained value
  value    \fI(public member function)\fP
           returns the contained value if available, another value otherwise
  value_or \fI(public member function)\fP




