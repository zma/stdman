.TH std::numeric_limits<T>::is_bounded 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::numeric_limits<T>::is_bounded \- std::numeric_limits<T>::is_bounded

.SH Synopsis

  static const bool is_bounded;      \fI(until C++11)\fP
  static constexpr bool is_bounded;  \fI(since C++11)\fP

  The value of std::numeric_limits<T>::is_bounded is true for all arithmetic types T that represent a finite set of values. While all fundamental types are bounded, this constant would be false in a specialization of std::numeric_limits for a library-provided arbitrary precision arithmetic type.

.SH Standard specializations


  T                     value of std::numeric_limits<T>::is_bounded
  /* non-specialized */ false
  bool                  true
  char                  true
  signed char           true
  unsigned char         true
  wchar_t               true
  char8_t               true
  char16_t              true
  char32_t              true
  short                 true
  unsigned short        true
  int                   true
  unsigned int          true
  long                  true
  unsigned long         true
  long long             true
  unsigned long long    true
  float                 true
  double                true
  long double           true


.SH See also



  is_integer identifies integer types
             \fI(public static member constant)\fP
  \fB[static]\fP

  is_signed  identifies signed types
             \fI(public static member constant)\fP
  \fB[static]\fP

  is_exact   identifies exact types
             \fI(public static member constant)\fP
  \fB[static]\fP




