.TH std::ranges::equal_to 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::equal_to \- std::ranges::equal_to

.SH Synopsis

  Defined in header <functional>
  struct equal_to;                \fI(since C++20)\fP

  Function object for performing comparisons. Deduces the parameter types of the function call operator from the arguments (but not the return type).

.SH Member types


  Member type    Definition
  is_transparent /* unspecified */


.SH Member functions


             checks if the arguments are equal
  operator() \fI(public member function)\fP


  std::ranges::equal_to::operator()


  template< class T, class U >
  requires EqualityComparableWith<T, U> ||
  /* std::declval<T>() == std::declval<U>() resolves to
  a built-in operator comparing pointers */
  constexpr bool operator()(T&& t, U&& u) const;

  Compares t and u, equivalent to return std::forward<T>(t) == std::forward<U>(u);, except when that expression resolves to a call to a builtin operator == comparing pointers.
  When a call would invoke a built-in operator comparing pointers of type P, the result is instead determined as follows:

  * Returns false if one of the (possibly converted) value of the first argument and the (possibly converted) value of the second argument precedes the other in the implementation-defined strict total ordering over all pointer values of type P. This strict total ordering is consistent with the partial order imposed by the builtin operators <, >, <=, and >=.
  * Otherwise (neither precedes the other), returns true.

  The behavior is undefined unless the the conversion sequences from both T and U to P are equality-preserving (see below).

  Equality preservation

  An expression is equality preserving if it results in equal outputs given equal inputs.

  * The inputs to an expression consist of its operands.
  * The outputs of an expression consist of its result and all operands modified by the expression (if any).

  Every expression required to be equality preserving is further required to be stable: two evaluations of such an expression with the same input objects must have equal outputs absent any explicit intervening modification of those input objects.

.SH Notes

  Unlike std::equal_to, std::ranges::equal_to requires both == and != to be valid (via the EqualityComparableWith constraint).

.SH Example


   This section is incomplete
   Reason: no example


.SH See also


           function object implementing x == y
  equal_to \fI(class template)\fP




