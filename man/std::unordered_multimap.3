.TH std::unordered_multimap 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unordered_multimap \- std::unordered_multimap

.SH Synopsis

Defined in header <unordered_map>
template<
class Key,
class T,
class Hash = std::hash<Key>,                                           \fB(1)\fP \fI(since C++11)\fP
class KeyEqual = std::equal_to<Key>,
class Allocator = std::allocator< std::pair<const Key, T> >
> class unordered_multimap;
namespace pmr {
template <class Key, class T,
class Hash = std::hash<Key>,
class Pred = std::equal_to<Key>>                                       \fB(2)\fP \fI(since C++17)\fP
using unordered_multimap = std::unordered_multimap<Key, T, Hash, Pred,
std::pmr::polymorphic_allocator<std::pair<const Key,T>>>;
}

Unordered multimap is an unordered associative container that supports equivalent keys (an unordered_multimap may contain multiple copies of each key value) and that associates values of another type with the keys. The unordered_multimap class supports forward iterators. Search, insertion, and removal have average constant-time complexity.
Internally, the elements are not sorted in any particular order, but organized into buckets. Which bucket an element is placed into depends entirely on the hash of its key. This allows fast access to individual elements, since once the hash is computed, it refers to the exact bucket the element is placed into.
The iteration order of this container is not required to be stable (so, for example, std::equal cannot be used to compare two std::unordered_multimaps), except that every group of elements whose keys compare equivalent (compare equal with key_eq() as the comparator) forms a contiguous subrange in the iteration order, also accessible with equal_range().
std::unordered_multimap meets the requirements of Container, AllocatorAwareContainer, UnorderedAssociativeContainer.

.SH Member types


Member type            Definition
key_type               Key
mapped_type            T
value_type             std::pair<const Key, T>
size_type              Unsigned integer type (usually std::size_t)
difference_type        Signed integer type (usually std::ptrdiff_t)
hasher                 Hash

key_equal              KeyEqual                                                                    \fI(until C++20)\fP
                       Hash::transparent_key_equal if defined and names a type, otherwise KeyEqual \fI(since C++20)\fP

allocator_type         Allocator
reference              value_type&
const_reference        const value_type&
pointer                std::allocator_traits<Allocator>::pointer
const_pointer          std::allocator_traits<Allocator>::const_pointer
iterator               LegacyForwardIterator
const_iterator         Constant LegacyForwardIterator
                       An iterator type whose category, value, difference, pointer and
local_iterator         reference types are the same as iterator. This iterator
                       can be used to iterate through a single bucket but not across buckets
                       An iterator type whose category, value, difference, pointer and
const_local_iterator   reference types are the same as const_iterator. This iterator
                       can be used to iterate through a single bucket but not across buckets
node_type\fI(since C++17)\fP a specialization of node_handle representing a container node


.SH Member functions


                  constructs the unordered_multimap
constructor       \fI(public member function)\fP
                  destructs the unordered_multimap
destructor        \fI(public member function)\fP
                  assigns values to the container
operator=         \fI(public member function)\fP
                  returns the associated allocator
get_allocator     \fI(public member function)\fP

.SH Iterators


begin             returns an iterator to the beginning
cbegin            \fI(public member function)\fP



end_              returns an iterator to the end
cend              \fI(public member function)\fP



.SH Capacity

                  checks whether the container is empty
empty             \fI(public member function)\fP
                  returns the number of elements
size              \fI(public member function)\fP
                  returns the maximum possible number of elements
max_size          \fI(public member function)\fP

.SH Modifiers

                  clears the contents
clear             \fI(public member function)\fP
                  inserts elements
                  or nodes
insert            \fI(since C++17)\fP
                  \fI(public member function)\fP
                  constructs element in-place
emplace           \fI(public member function)\fP
                  constructs elements in-place using a hint
emplace_hint      \fI(public member function)\fP
                  erases elements
erase             \fI(public member function)\fP
                  swaps the contents
swap              \fI(public member function)\fP

extract           extracts nodes from the container
                  \fI(public member function)\fP
\fI(C++17)\fP

merge             splices nodes from another container
                  \fI(public member function)\fP
\fI(C++17)\fP

.SH Lookup

                  returns the number of elements matching specific key
count             \fI(public member function)\fP
                  finds element with specific key
find              \fI(public member function)\fP

contains          checks if the container contains element with specific key
                  \fI(public member function)\fP
(C++20)
                  returns range of elements matching a specific key
equal_range       \fI(public member function)\fP

.SH Bucket interface

                  returns an iterator to the beginning of the specified bucket
begin(size_type)  \fI(public member function)\fP
cbegin(size_type)
                  returns an iterator to the end of the specified bucket
end(size_type)    \fI(public member function)\fP
cend(size_type)
                  returns the number of buckets
bucket_count      \fI(public member function)\fP
                  returns the maximum number of buckets
max_bucket_count  \fI(public member function)\fP
                  returns the number of elements in specific bucket
bucket_size       \fI(public member function)\fP
                  returns the bucket for specific key
bucket            \fI(public member function)\fP

.SH Hash policy

                  returns average number of elements per bucket
load_factor       \fI(public member function)\fP
                  manages maximum average number of elements per bucket
max_load_factor   \fI(public member function)\fP
                  reserves at least the specified number of buckets.
rehash            This regenerates the hash table.
                  \fI(public member function)\fP
                  reserves space for at least the specified number of elements.
reserve           This regenerates the hash table.
                  \fI(public member function)\fP

.SH Observers

                  returns function used to hash the keys
hash_function     \fI(public member function)\fP
                  returns the function used to compare keys for equality
key_eq            \fI(public member function)\fP


.SH Non-member functions


                                   compares the values in the unordered_multimap
operator==                         \fI(function template)\fP
operator!=

std::swap(std::unordered_multimap) specializes the std::swap algorithm
                                   \fI(function template)\fP
\fI(C++11)\fP

erase_if(std::unordered_multimap)  Erases all elements satisfying specific criteria
                                   \fI(function template)\fP
(C++20)


Deduction_guides\fI(since C++17)\fP




