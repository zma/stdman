.TH std::isinf 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::isinf \- std::isinf

.SH Synopsis

  Defined in header <cmath>
  bool isinf( float arg );        \fB(1)\fP \fI(since C++11)\fP
  bool isinf( double arg );       \fB(2)\fP \fI(since C++11)\fP
  bool isinf( long double arg );  \fB(3)\fP \fI(since C++11)\fP
  bool isinf( IntegralType arg ); \fB(4)\fP \fI(since C++11)\fP

  1-3) Determines if the given floating point number arg is a positive or negative infinity.
  4) A set of overloads or a function template accepting the arg argument of any integral_type. Equivalent to \fB(2)\fP (the argument is cast to double).

.SH Parameters


  arg - floating point value


.SH Return value

  true if arg is infinite, false otherwise

.SH Example

  
// Run this code

    #include <iostream>
    #include <cmath>
    #include <cfloat>

    int main()
    {
        std::cout << std::boolalpha
                  << "isinf(NaN) = " << std::isinf(NAN) << '\\n'
                  << "isinf(Inf) = " << std::isinf(INFINITY) << '\\n'
                  << "isinf(0.0) = " << std::isinf(0.0) << '\\n'
                  << "isinf(exp(800)) = " << std::isinf(std::exp(800)) << '\\n'
                  << "isinf(DBL_MIN/2.0) = " << std::isinf(DBL_MIN/2.0) << '\\n';
    }

.SH Output:

    isinf(NaN) = false
    isinf(Inf) = true
    isinf(0.0) = false
    isinf(exp(800)) = true
    isinf(DBL_MIN/2.0) = false


.SH See also



  fpclassify categorizes the given floating point value
             \fI(function)\fP
  \fI(C++11)\fP

  isfinite   checks if the given number has finite value
             \fI(function)\fP
  \fI(C++11)\fP

  isnan      checks if the given number is NaN
             \fI(function)\fP
  \fI(C++11)\fP

  isnormal   checks if the given number is normal
             \fI(function)\fP
  \fI(C++11)\fP




