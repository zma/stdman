.TH std::set<Key,Compare,Allocator>::find 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::set<Key,Compare,Allocator>::find \- std::set<Key,Compare,Allocator>::find

.SH Synopsis
   iterator find( const Key& key );                             \fB(1)\fP
   const_iterator find( const Key& key ) const;                 \fB(2)\fP
   template< class K > iterator find( const K& x );             \fB(3)\fP \fI(since C++14)\fP
   template< class K > const_iterator find( const K& x ) const; \fB(4)\fP \fI(since C++14)\fP

   1,2) Finds an element with key equivalent to key.
   3,4) Finds an element with key that compares equivalent to the value x. This overload only participates in overload resolution if the qualified-id Compare::is_transparent is valid and denotes a type. It allows calling this function without constructing an instance of Key

.SH Parameters

   key - key value of the element to search for
   x   - a value of any type that can be transparently compared with a key

.SH Return value

   Iterator to an element with key equivalent to key. If no such element is found, past-the-end (see end()) iterator is returned.

.SH Complexity

   Logarithmic in the size of the container.

.SH Example

   
// Run this code

 #include <iostream>
 #include <set>
 struct FatKey   { int x; int data[1000]; };
 struct LightKey { int x; };
 bool operator<(const FatKey& fk, const LightKey& lk) { return fk.x < lk.x; }
 bool operator<(const LightKey& lk, const FatKey& fk) { return lk.x < fk.x; }
 bool operator<(const FatKey& fk1, const FatKey& fk2) { return fk1.x < fk2.x; }
 int main()
 {
 // simple comparison demo
     std::set<int> example = {1, 2, 3, 4};

     auto search = example.find(2);
     if (search != example.end()) {
         std::cout << "Found " << (*search) << '\\n';
     } else {
         std::cout << "Not found\\n";
     }

 // transparent comparison demo
     std::set<FatKey, std::less<>> example2 = { {1, {} }, {2, {} }, {3, {} }, {4, {} } };

     LightKey lk = {2};
     auto search2 = example2.find(lk);
     if (search2 != example2.end()) {
         std::cout << "Found " << search2->x << '\\n';
     } else {
         std::cout << "Not found\\n";
     }
 }

.SH Output:

 Found 2
 Found 2

.SH See also

   count       returns the number of elements matching specific key
               \fI(public member function)\fP
   equal_range returns range of elements matching a specific key
               \fI(public member function)\fP
