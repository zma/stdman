.TH std::chrono::floor(std::chrono::duration) 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::chrono::floor(std::chrono::duration) \- std::chrono::floor(std::chrono::duration)

.SH Synopsis

  Defined in header <chrono>
  template <class ToDuration, class Rep, class Period>         \fI(since C++17)\fP
  constexpr ToDuration floor(const duration<Rep, Period>& d);

  Returns the greatest duration t representable in ToDuration that is less or equal to d.
  The function does not participate in the overload resolution unless ToDuration is an instance of std::chrono::duration.

.SH Parameters


  d - duration to convert


.SH Return value

  d rounded down to a duration of type ToDuration.

.SH Possible implementation



    template <class T> struct is_duration : std::false_type {};
    template <class Rep, class Period> struct is_duration<
        std::chrono::duration<Rep, Period>> : std::true_type {};

    template <class To, class Rep, class Period,
              class = std::enable_if_t<is_duration<To>{}>>
    constexpr To floor(const duration<Rep, Period>& d)
    {
        To t = std::chrono::duration_cast<To>(d);
        if (t > d)
            return t - To{1};
        return t;
    }



.SH Example


   This section is incomplete
   Reason: no example


.SH See also


                                 converts a duration to another, with a different tick interval
  duration_cast                  \fI(function template)\fP

  ceil(std::chrono::duration)    converts a duration to another, rounding up
                                 \fI(function template)\fP
  \fI(C++17)\fP

  round(std::chrono::duration)   converts a duration to another, rounding to nearest, ties to even
                                 \fI(function template)\fP
  \fI(C++17)\fP

  floor(std::chrono::time_point) converts a time_point to another, rounding down
                                 \fI(function template)\fP
  \fI(C++17)\fP

  floor
  floorf
  floorl                         nearest integer not greater than the given value
                                 \fI(function)\fP

  \fI(C++11)\fP
  \fI(C++11)\fP




