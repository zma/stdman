.TH std::experimental::ranges::tagged<Base,Tags...>::operator= 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::ranges::tagged<Base,Tags...>::operator= \- std::experimental::ranges::tagged<Base,Tags...>::operator=

.SH Synopsis

tagged &operator=(tagged&& that) = default;                                                  \fB(1)\fP
tagged &operator=(const tagged& that) = default;                                             \fB(2)\fP
template <class Other>
requires Assignable<Base&, Other>                                                            \fB(3)\fP
constexpr tagged& operator=(ranges::tagged<Other, Tags...>&& that)
noexcept(std::is_nothrow_assignable<Base&, Other>::value);
template <class Other>
requires Assignable<Base&, const Other&>                                                     \fB(4)\fP
constexpr tagged& operator=(const ranges::tagged<Other, Tags...>& that);
template <class U>
requires Assignable<Base&, U> && !Same<std::decay_t<U>, tagged>                              \fB(5)\fP
constexpr tagged& operator=(U&& that) noexcept(std::is_nothrow_assignable<Base&, U>::value);

Assigns the contents of that to *this.
1-2) tagged has defaulted copy and move assignment operators that invoke the corresponding assignment operator of Base.
3) Converting move assignment from a different tagged specialization with matching tags. Equivalent to static_cast<Base&>(*this) = static_cast<Other&&>(that);.
4) Converting copy assignment from a different tagged specialization with matching tags. Equivalent to static_cast<Base&>(*this) = static_cast<const Other&>(that);.
5) Assigns that to the Base subobject. Equivalent to static_cast<Base&>(*this) = std::forward<U>(that);

.SH Return value

*this.



