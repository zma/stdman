.TH std::input_iterator_tag,std::output_iterator_tag,std::forward_iterator_tag,std::bidirectional_iterator_tag,std::random_access_iterator_tag,std::contiguous_iterator_tag 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::input_iterator_tag,std::output_iterator_tag,std::forward_iterator_tag,std::bidirectional_iterator_tag,std::random_access_iterator_tag,std::contiguous_iterator_tag \- std::input_iterator_tag,std::output_iterator_tag,std::forward_iterator_tag,std::bidirectional_iterator_tag,std::random_access_iterator_tag,std::contiguous_iterator_tag

.SH Synopsis

Defined in header <iterator>
struct input_iterator_tag { };
struct output_iterator_tag { };
struct forward_iterator_tag : public input_iterator_tag { };
struct bidirectional_iterator_tag : public forward_iterator_tag { };
struct random_access_iterator_tag : public bidirectional_iterator_tag { };
struct contiguous_iterator_tag: public random_access_iterator_tag { };      \fI(since C++20)\fP

Defines the category of an iterator. Each tag is an empty type and corresponds to one of the
five
\fI(until C++20)\fP
six
\fI(since C++20)\fP iterator categories:

* input_iterator_tag corresponds to LegacyInputIterator.
* output_iterator_tag corresponds to LegacyOutputIterator.
* forward_iterator_tag corresponds to LegacyForwardIterator.
* bidirectional_iterator_tag corresponds to LegacyBidirectionalIterator.
* random_access_iterator_tag corresponds to LegacyRandomAccessIterator.



* contiguous_iterator_tag corresponds to LegacyContiguousIterator. \fI(since C++20)\fP


Iterator category tags carry information that can be used to select the most efficient algorithms for the specific requirement set that is implied by the category.
For every iterator type It, a typedef std::iterator_traits<It>::iterator_category is available, which is an alias to one of these
five
\fI(until C++20)\fP
six
\fI(since C++20)\fP tag types.

Additionally, std::iterator_traits<It>::iterator_Â­concept may be used to indicate conformance to the iterator concepts.\fI(since C++20)\fP



Notes                                                  \fI(since C++17)\fP
                                                       \fI(until C++20)\fP
There is no separate tag for LegacyContiguousIterator.


.SH Example

Common technique for algorithm selection based on iterator category tags is to use a dispatcher function (the alternative is std::enable_if)

// Run this code

  #include <iostream>
  #include <vector>
  #include <list>
  #include <iterator>

  template< class BDIter >
  void alg(BDIter, BDIter, std::bidirectional_iterator_tag)
  {
      std::cout << "alg() called for bidirectional iterator\\n";
  }

  template <class RAIter>
  void alg(RAIter, RAIter, std::random_access_iterator_tag)
  {
      std::cout << "alg() called for random-access iterator\\n";
  }

  template< class Iter >
  void alg(Iter first, Iter last)
  {
      alg(first, last,
          typename std::iterator_traits<Iter>::iterator_category());
  }

  int main()
  {
      std::vector<int> v;
      alg(v.begin(), v.end());

      std::list<int> l;
      alg(l.begin(), l.end());

  //    std::istreambuf_iterator<char> i1(std::cin), i2;
  //    alg(i1, i2); // compile error: no matching function for call
  }

.SH Output:

  alg() called for random-access iterator
  alg() called for bidirectional iterator


.SH See also



iterator              base class to ease the definition of required types for simple iterators
                      \fI(class template)\fP
(deprecated in C++17)
                      provides uniform interface to the properties of an iterator
iterator_traits       \fI(class template)\fP




