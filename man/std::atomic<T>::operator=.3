.TH std::atomic<T>::operator= 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::atomic<T>::operator= \- std::atomic<T>::operator=

.SH Synopsis

T operator=( T desired ) noexcept;
T operator=( T desired ) volatile noexcept;           \fB(1)\fP \fI(since C++11)\fP (1) (since C++11)
atomic& operator=( const atomic& ) = delete;                            \fB(2)\fP \fI(since C++11)\fP
atomic& operator=( const atomic& ) volatile = delete;

1) Atomically assigns a value desired to the atomic variable. Equivalent to store(desired).
2) Atomic variables are not CopyAssignable.

.SH Parameters


desired - value to assign


.SH Return value

desired.


.SH Notes

Unlike most assignment operators, the assignment operators for atomic types do not return a reference to their left-hand arguments. They return a copy of the stored value instead.

.SH See also


              constructs an atomic object
constructor   \fI(public member function)\fP




