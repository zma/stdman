.TH std::numeric_limits<T>::is_integer 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::numeric_limits<T>::is_integer \- std::numeric_limits<T>::is_integer

.SH Synopsis

static const bool is_integer;      \fI(until C++11)\fP
static constexpr bool is_integer;  \fI(since C++11)\fP

The value of std::numeric_limits<T>::is_integer is true for all integer arithmetic types T and false otherwise. This constant is meaningful for all specializations.

.SH Standard specializations


T                     value of std::numeric_limits<T>::is_integer
/* non-specialized */ false
bool                  true
char                  true
signed char           true
unsigned char         true
wchar_t               true
char8_t               true
char16_t              true
char32_t              true
short                 true
unsigned short        true
int                   true
unsigned int          true
long                  true
unsigned long         true
long long             true
unsigned long long    true
float                 false
double                false
long double           false


.SH See also



is_integral checks if a type is an integral type
            \fI(class template)\fP
\fI(C++11)\fP

is_signed   identifies signed types
            \fI(public static member constant)\fP
\fB[static]\fP

is_exact    identifies exact types
            \fI(public static member constant)\fP
\fB[static]\fP

is_bounded  identifies types that represent a finite set of values
            \fI(public static member constant)\fP
\fB[static]\fP




