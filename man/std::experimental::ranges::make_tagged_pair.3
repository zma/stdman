.TH std::experimental::ranges::make_tagged_pair 3 "2020.03.24" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::ranges::make_tagged_pair \- std::experimental::ranges::make_tagged_pair

.SH Synopsis

  Defined in header <experimental/ranges/utility>
  template< TagSpecifier Tag1, TagSpecifier Tag2, class T1, class T2>                    (ranges TS)
  constexpr ranges::tagged</*see below*/, Tag1, Tag2> make_tagged_pair(T1&& x, T2&& y);

  Convenience function for creating a tagged pair, deducing the element types from the arguments (the tag specifiers must be explicitly specified).
  The see below portion of the return type is decltype(std::make_pair(std::forward<T1>(x), std::forward<T2>(y))).

.SH Return value

  R(std::forward<T1>(x), std::forward<T2>(y)), where R is the return type.

.SH See also


                    specifies that a type represents a tag specifier and its element type
  TaggedType        (concept)
                    augument a tuple-like type with named accessors
  tagged            \fI(class template)\fP
                    alias template for a tagged std::pair
  tagged_pair       (alias template)
                    alias template for a tagged std::tuple
  tagged_tuple      (alias template)
                    convenience function for creating a tagged_tuple
  make_tagged_tuple \fI(function template)\fP

  in
  in1
  in2
  out
  out1              tag specifiers for use with ranges::tagged
  out2              \fI(class)\fP
  fun
  min
  max
  begin
  end




